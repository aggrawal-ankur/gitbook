<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>All Things Low Level – All Write Ups</title><link>https://hi-anki.github.io/gitbook/docs/</link><description>Recent content in All Write Ups on All Things Low Level</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://hi-anki.github.io/gitbook/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Historical Introduction</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/history/</guid><description>
&lt;p&gt;Assembly is a low-level programming language, which provides direct-access over computer hardware. It almost maps one-to-one with machine instructions.&lt;/p&gt;
&lt;p&gt;Assembly is the closest we can get to the CPU while still understanding what&amp;rsquo;s going on.&lt;/p&gt;
&lt;p&gt;What distinguishes assembly from other programming languages is that &lt;strong&gt;every CPU architecture&lt;/strong&gt; (like x86, ARM, MIPS, RISC-V) has its &lt;strong&gt;own assembly language&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Why different flavors of assembly exist?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Because of the &lt;strong&gt;Instruction Set Architecture (ISA)&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Each CPU has its own set of instructions, which creates demand for specific-assembly.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Architectural History&lt;span class="hx:absolute hx:-mt-20" id="architectural-history"&gt;&lt;/span&gt;
&lt;a href="#architectural-history" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The x86 CPU architecture, which refers to a family of processors — 8086, 80186, 80286, 80386, 80486 — was originally developed by &lt;strong&gt;Intel Corporation&lt;/strong&gt;, starting in &lt;strong&gt;1978&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The x86 ISA is a &lt;strong&gt;Intel&amp;rsquo;s proprietary&lt;/strong&gt;, but other companies (notably &lt;strong&gt;AMD&lt;/strong&gt;) were &lt;strong&gt;licensed&lt;/strong&gt; to create compatible CPUs.&lt;/p&gt;
&lt;p&gt;All these processors share the same &lt;strong&gt;Instruction Set Architecture (ISA)&lt;/strong&gt; and are collectively known as &lt;strong&gt;x86&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The original &lt;strong&gt;8086&lt;/strong&gt; was a &lt;strong&gt;16-bit&lt;/strong&gt; processor. Intel extended it to &lt;strong&gt;32-bit&lt;/strong&gt;, known as &lt;strong&gt;IA-32&lt;/strong&gt; (or x86_32). Then in &lt;strong&gt;2003&lt;/strong&gt;, AMD extended the architecture to &lt;strong&gt;64-bit&lt;/strong&gt;, releasing &lt;strong&gt;AMD64&lt;/strong&gt;. Intel later adopted the same ISA, calling their version &lt;strong&gt;Intel 64&lt;/strong&gt; — both are &lt;strong&gt;functionally identical&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Since Intel designed the architecture, they also defined the original syntax for its assembly — known as, &lt;strong&gt;Intel syntax&lt;/strong&gt;. This style is widely used in &lt;strong&gt;Microsoft&lt;/strong&gt; development tools and the &lt;strong&gt;Windows&lt;/strong&gt; ecosystem.&lt;/p&gt;
&lt;p&gt;But Intel is not the only syntax for x86 processors.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;The Origins of AT&amp;amp;T Syntax&lt;span class="hx:absolute hx:-mt-20" id="the-origins-of-att-syntax"&gt;&lt;/span&gt;
&lt;a href="#the-origins-of-att-syntax" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Along the same time, &lt;strong&gt;AT&amp;amp;T&lt;/strong&gt;, through &lt;strong&gt;Bell Labs&lt;/strong&gt;, created &lt;strong&gt;Unix&lt;/strong&gt; in &lt;strong&gt;1969&lt;/strong&gt;, originally for &lt;strong&gt;PDP-7&lt;/strong&gt; machines, which was initially written in assembly. By &lt;strong&gt;1973&lt;/strong&gt;, Unix was rewritten in &lt;strong&gt;C&lt;/strong&gt;, making it portable.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;1978&lt;/strong&gt;, Intel introduced the x86 architecture, which eventually became popular on personal computers.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;1983&lt;/strong&gt;, &lt;strong&gt;GNU Project&lt;/strong&gt; was launched to create a &lt;strong&gt;free, Unix-like operating system&lt;/strong&gt;. It needed a new assembler and adopted a &lt;strong&gt;new assembly syntax&lt;/strong&gt; for x86 that was more consistent and easier to parse than Intel&amp;rsquo;s. Also, they wanted to avoid the proprietary issues, and this created the need for a new syntax.&lt;/p&gt;
&lt;p&gt;This new syntax, although created by GNU, was based on conventions from Unix systems — and since &lt;strong&gt;Unix was synonymous with AT&amp;amp;T&lt;/strong&gt;, this style became popular as &lt;strong&gt;AT&amp;amp;T syntax&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When &lt;strong&gt;Linux&lt;/strong&gt; was created in &lt;strong&gt;1991&lt;/strong&gt;, it relied heavily on GNU tools like &lt;strong&gt;GCC&lt;/strong&gt; and &lt;strong&gt;GAS&lt;/strong&gt;, which used AT&amp;amp;T syntax. As a result, &lt;strong&gt;AT&amp;amp;T&lt;/strong&gt; syntax became the &lt;em&gt;de facto&lt;/em&gt; in the Linux ecosystem.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Which Syntax We Are Going To Use?&lt;span class="hx:absolute hx:-mt-20" id="which-syntax-we-are-going-to-use"&gt;&lt;/span&gt;
&lt;a href="#which-syntax-we-are-going-to-use" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We are learning assembly, not syntaxes. The only thing that matters here is an assembler. Because an assembly code heavily uses assembler directives. That&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;We will write intel syntax and use GAS. Because, the operand style matches the mathematical style, &lt;code&gt;LHS = RHS&lt;/code&gt;.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;// Intel
mnemonic destination, source
// AT&amp;amp;T
mnemonic source, destination&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Learn Assembly, Not Syntaxes.&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Difference Between Assembly And Other Languages (C, Python&amp;hellip;..)&lt;span class="hx:absolute hx:-mt-20" id="difference-between-assembly-and-other-languages-c-python"&gt;&lt;/span&gt;
&lt;a href="#difference-between-assembly-and-other-languages-c-python" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;1. Core Purpose&lt;span class="hx:absolute hx:-mt-20" id="1-core-purpose"&gt;&lt;/span&gt;
&lt;a href="#1-core-purpose" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;High level languages abstract the core functionality. Their core purpose is to provide the programmer with ease of usability and reduce development time.&lt;/p&gt;
&lt;p&gt;Assembly, on the other hand, is completely raw. There&amp;rsquo;s no abstraction. Everything is open and the programmer has to write every single instruction themselves.&lt;/p&gt;
&lt;p&gt;This exposes the reality that even a simple &amp;ldquo;Hello, World!&amp;rdquo; program requires multiple low-level steps before it can actually run.&lt;/p&gt;
&lt;h3&gt;2. Platform Dependency&lt;span class="hx:absolute hx:-mt-20" id="2-platform-dependency"&gt;&lt;/span&gt;
&lt;a href="#2-platform-dependency" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We are used to download python for our windows, Linux or mac machine and start coding. We don&amp;rsquo;t have to worry about how CPU will understand our hand writing.&lt;/p&gt;
&lt;p&gt;But assembly doesn&amp;rsquo;t work like that. It is &lt;strong&gt;architecture-dependent&lt;/strong&gt;. Assembly written for x86 will not work on ARM.&lt;/p&gt;
&lt;h3&gt;3. Control &amp;raquo; Convenience&lt;span class="hx:absolute hx:-mt-20" id="3-control--convenience"&gt;&lt;/span&gt;
&lt;a href="#3-control--convenience" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Assembly gives you &lt;strong&gt;maximum control&lt;/strong&gt;, at the cost of &lt;strong&gt;convenience&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What is convenience?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Pretty and verbose named variables&lt;/strong&gt;? Not in assembly. You work directly with memory and registers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data types&lt;/strong&gt;? Everything is just bytes. It&amp;rsquo;s up to &lt;strong&gt;you&lt;/strong&gt; to interpret the bytes as intended.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Control flow&lt;/strong&gt;? Nothing is built in. You implement it using jump instructions.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Loops&lt;/strong&gt;? You use jump statements to create them as well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I/O&lt;/strong&gt;? Use direct syscalls. No dedicated &lt;code&gt;printf&lt;/code&gt; and &lt;code&gt;scanf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Structures&lt;/strong&gt;? &lt;strong&gt;Functions&lt;/strong&gt;? &lt;strong&gt;DO. IT. YOURSELF.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You have got every raw material, and building anything is your responsibility.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;How these things exist then? We will explore each of them soon.&lt;/p&gt;
&lt;h2&gt;Fun Fact&lt;span class="hx:absolute hx:-mt-20" id="fun-fact"&gt;&lt;/span&gt;
&lt;a href="#fun-fact" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;C is called portable assembly.&lt;/p&gt;</description></item><item><title>Idea &amp; Structure</title><link>https://hi-anki.github.io/gitbook/docs/elf-parser-project/idea-and-structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/elf-parser-project/idea-and-structure/</guid><description>
&lt;h2&gt;Project Design&lt;span class="hx:absolute hx:-mt-20" id="project-design"&gt;&lt;/span&gt;
&lt;a href="#project-design" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The whole project can be divided into two parts.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Extracting raw bytes from the ELF.&lt;/li&gt;
&lt;li&gt;Interpreting those raw bytes and creating a c-style dump of it.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Structure&lt;span class="hx:absolute hx:-mt-20" id="structure"&gt;&lt;/span&gt;
&lt;a href="#structure" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;elf_parser
└─ build-steps
...
...
└─ core_api
└─ parser.c
└─ parser.h
└─ dump_structure
└─ dump.c
└─ dump.h
└─ mappings.c
└─ mappings.h
└─ reference
└─ hello_elf
└─ hello_world.c
└─ readelf_output
└─ elf_spec.h
└─ main.c&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Few Things About The Project&lt;span class="hx:absolute hx:-mt-20" id="few-things-about-the-project"&gt;&lt;/span&gt;
&lt;a href="#few-things-about-the-project" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;It is not perfect.&lt;/li&gt;
&lt;li&gt;I am not trying to compete with projects like &lt;code&gt;binutils&lt;/code&gt; , which hosts &lt;code&gt;readelf&lt;/code&gt; or &lt;code&gt;pax-utils&lt;/code&gt; , which hosts &lt;code&gt;dumpelf&lt;/code&gt; or any other project. It is purely to understand the elf specification not by reading docs but by implementing something myself.&lt;/li&gt;
&lt;li&gt;It is verbose by design because I am not familiar with things that reduce code but at the cost of readability. I wanted something straightforward.&lt;/li&gt;
&lt;li&gt;It is great for educational purposes, where beginners can read the code and understand it themselves, where things obscure to them are not used to do the thing.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Timeline&lt;span class="hx:absolute hx:-mt-20" id="timeline"&gt;&lt;/span&gt;
&lt;a href="#timeline" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Started on &lt;em&gt;July 24, 2025&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Finished writing core API on &lt;em&gt;July 31, 2025&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Finished writing c-style dumps on &lt;em&gt;August 02, 2025&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Starting documentation on &lt;em&gt;August 03, 2025&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Improvements ahead.&lt;/strong&gt;&lt;/p&gt;</description></item><item><title>Introduction To Debugging</title><link>https://hi-anki.github.io/gitbook/docs/debugging/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/debugging/introduction/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;22, 23 September 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;At its core, &lt;em&gt;&lt;strong&gt;debugging&lt;/strong&gt;&lt;/em&gt; can be defined as a process of actively observing and controlling a program to understand what it’s doing, why it’s doing it, and how to manipulate it.&lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;debugger&lt;/strong&gt; is like a sentinel being who can observe everything about a process and change it against its will. It&amp;rsquo;s like &lt;em&gt;S2 Loki (A Marvel Studious TV Series)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Any debugger primarily does these three things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stop execution at a known point (breakpoints, signals, traps)&lt;/li&gt;
&lt;li&gt;Inspect program state (memory, registers, stack, variables)&lt;/li&gt;
&lt;li&gt;Modify execution if needed (change variable values, registers, or program counter)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To understand debuggers, we have to understand what enables debugging. Otherwise, gdb will feel black magic.&lt;/p&gt;</description></item><item><title>Linux Syscalls For DMA</title><link>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/dma/dma-syscalls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/dma/dma-syscalls/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;10 September 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;User Space Layout&lt;span class="hx:absolute hx:-mt-20" id="user-space-layout"&gt;&lt;/span&gt;
&lt;a href="#user-space-layout" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is the virtual address space layout for user space memory. For more information, checkout &lt;a href="../introduction/virtual-memory-layout.md"title="mention"&gt;virtual-memory-layout.md&lt;/a&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt; User Space Memory Layout
*--------------------------*
| High Memory (~128 TiB) |
| *-----------------* |
| | Stack (↓) | |
| *-----------------* |
| | Mmap region | |
| *-----------------* |
| | Free Space | |
| *-----------------* |
| | Heap (↑) | |
| *-----------------* |
| | Data (data/bss) | |
| *-----------------* |
| | Code | |
| *-----------------* |
| Low Memory (0..0) |
*--------------------------*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &amp;ldquo;heap&amp;rdquo; region and the &amp;ldquo;mmap&amp;rdquo; region both supports dynamic memory allocation. But both are managed differently, which is why we have two different methods for dynamic memory allocation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They are &lt;code&gt;sbrk()&lt;/code&gt; and &lt;code&gt;mmap()&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sbrk()&lt;/code&gt; manages the heap region and &lt;code&gt;mmap()&lt;/code&gt; manages the mmap region.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;brk()&lt;span class="hx:absolute hx:-mt-20" id="brk"&gt;&lt;/span&gt;
&lt;a href="#brk" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There is a syscall named &lt;code&gt;brk()&lt;/code&gt; which is used to extend the &lt;strong&gt;program break&lt;/strong&gt;. What is program break?&lt;/p&gt;
&lt;p&gt;In the early days of dynamic memory allocation, the data segment was data/bss and heap together.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is perfectly logical as compilation already reveals how much space you need for static/globals so the lower part of the data segment was reserved for static/globals and the upper part was reserved for heap.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Therefore, program break is the boundary which logically separates the data/bss part from heap.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For example, the data segment starts at &lt;code&gt;0d1000&lt;/code&gt; and ends at &lt;code&gt;0d1015&lt;/code&gt; . This means that 16 bytes are required for data/bss. Now the program break is at &lt;code&gt;0d1016&lt;/code&gt; just one byte after the data/bss allocation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If any function from &lt;code&gt;malloc&lt;/code&gt; family is called, the &lt;code&gt;brk()&lt;/code&gt; is executed to extend the program break. And this new space is what heap is.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;brk()&lt;/code&gt; takes an address and changes the program break to it. But how we are supposed to know where the current program break is?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;brk(0)&lt;/code&gt; gives the current program break.&lt;/li&gt;
&lt;li&gt;But a problem with &lt;code&gt;brk()&lt;/code&gt; is that it doesn&amp;rsquo;t return the pointer to the newly allocated space.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;sbrk()&lt;span class="hx:absolute hx:-mt-20" id="sbrk"&gt;&lt;/span&gt;
&lt;a href="#sbrk" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;sbrk()&lt;/code&gt; is a C library function, which is a wrapper over the actual &lt;code&gt;brk()&lt;/code&gt; syscall.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;brk()&lt;/code&gt; returns 0 on success and -1 on failure. &lt;code&gt;sbrk()&lt;/code&gt; returns the pointer to the newly allocated memory or the previous program break on success and &lt;code&gt;(void *)-1&lt;/code&gt; on failure.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In practice, we use &lt;code&gt;sbrk()&lt;/code&gt; not &lt;code&gt;brk()&lt;/code&gt;. Although the use of both is not recommended today; instead we should use functions from &lt;code&gt;malloc&lt;/code&gt; family.&lt;/p&gt;
&lt;p&gt;A key thing about &lt;code&gt;sbrk(n)&lt;/code&gt; is that it extends heap contiguously. And we can prove this by a simple example:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;initial_break &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sbrk&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;); &lt;span style="color:#75715e"&gt;// get current break
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Allocate 32 bytes using sbrk
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;new_mem &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sbrk&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (new_mem &lt;span style="color:#f92672"&gt;==&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt;) &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;perror&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;sbrk failed&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// New program break
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;after_alloc &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sbrk&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Initial program break: %p&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, initial_break);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Allocated 32 bytes at: %p&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, new_mem);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Program break after sbrk: %p&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, after_alloc);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The output is:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ gcc main.c
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./a.out
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Initial program break: 0x55bc200da000
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Allocated &lt;span style="color:#ae81ff"&gt;32&lt;/span&gt; bytes at: 0x55bc200da000
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Program break after sbrk: 0x55bc200da020&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;0x55bc200da000 = 0d94266479976448
0x55bc200da020 = 0d94266479976480&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The difference is exactly 32 bytes.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;But, if you do this:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;initial_break &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sbrk&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;); &lt;span style="color:#75715e"&gt;// get current break
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Initial program break: %p&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, initial_break);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Allocate 32 bytes using sbrk
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;new_mem &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sbrk&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (new_mem &lt;span style="color:#f92672"&gt;==&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt;) &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;perror&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;sbrk failed&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Allocated 32 bytes at: %p&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, new_mem);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// New program break
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;after_alloc &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sbrk&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Program break after sbrk: %p&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, after_alloc);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;the output changes significantly.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ gcc main.c
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./a.out
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Initial program break: 0x559b4fc4b000
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Allocated &lt;span style="color:#ae81ff"&gt;32&lt;/span&gt; bytes at: 0x559b4fc6c000
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Program break after sbrk: 0x559b4fc6c020&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Just by the output we can see that the jump in address is way too much. This behavior might be attributed to &lt;code&gt;printf&lt;/code&gt; calling &lt;code&gt;malloc&lt;/code&gt; internally for its requirements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Therefore, never mix the two&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;mmap()&lt;span class="hx:absolute hx:-mt-20" id="mmap"&gt;&lt;/span&gt;
&lt;a href="#mmap" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;mmap&lt;/code&gt; is a Linux syscall and &lt;code&gt;mmap()&lt;/code&gt; is libc wrapper around it.&lt;/p&gt;
&lt;p&gt;mmap stands for memory map which lets a process map files or anonymous memory into its virtual address space.&lt;/p&gt;
&lt;p&gt;Unlike &lt;code&gt;brk/sbrk&lt;/code&gt;, which adjust the heap break, &lt;code&gt;mmap&lt;/code&gt; can allocate memory anywhere in the &lt;code&gt;mmap&lt;/code&gt; region of the virtual address space, not just growing the heap upward.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;mmap()&lt;/code&gt; was successful, it returns a pointer to the allocated memory. If failed, &lt;code&gt;(void *) -1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Every time we run a program on Linux, the dynamic linker (&lt;code&gt;ld.so&lt;/code&gt;) uses &lt;code&gt;mmap&lt;/code&gt; to load shared libraries (&lt;code&gt;.so&lt;/code&gt; files) in our address space. So, we don&amp;rsquo;t use &lt;code&gt;mmap&lt;/code&gt; directly, unless we&amp;rsquo;re doing systems programming; but we are incomplete without it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;In a more melodramatic way, we might not use it directly, but Its presence is a boon to us.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;mmap&lt;/code&gt; has a variety of use cases and dynamic memory allocation is one of them.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;File mapping.&lt;/strong&gt; Map a file into memory and access it like an array.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Anonymous mapping:&lt;/strong&gt; Heap-like memory without touching the process break.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shared memory:&lt;/strong&gt; Two processes can map the same file and see each other’s updates.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Where are the boundaries?&lt;span class="hx:absolute hx:-mt-20" id="where-are-the-boundaries"&gt;&lt;/span&gt;
&lt;a href="#where-are-the-boundaries" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you notice, stack is free flowing, heap is free flowing and mmap is free flowing. Where are the boundaries that prevent collision?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Code section is fixed at compile-time.&lt;/li&gt;
&lt;li&gt;data/bss size is known at compile-time, so that is also fixed.&lt;/li&gt;
&lt;li&gt;The start of heap is fixed, just after data/bss. But the end is floating.&lt;/li&gt;
&lt;li&gt;The start of stack is fixed at the top of user space and grows downwards. But the end is floating again, depending on stack pointer.&lt;/li&gt;
&lt;li&gt;At last we have &lt;code&gt;mmap&lt;/code&gt; region, which is surrounded by floating regions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The answer is that there are no boundaries. &lt;/p&gt;
&lt;p&gt;First of all, the virtual address space is large enough to make this problem insignificant for normal use case.&lt;/p&gt;
&lt;p&gt;Second, the kernel has data structures which keep every allocation in control and lets the kernel not allocate memory when there is a point of conflict.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;sbrk() or mmap()&lt;span class="hx:absolute hx:-mt-20" id="sbrk-or-mmap"&gt;&lt;/span&gt;
&lt;a href="#sbrk-or-mmap" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;How the allocator decides whether to use &lt;code&gt;sbrk()&lt;/code&gt; or &lt;code&gt;mmap()&lt;/code&gt; ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Although the exact implementation can vary, the concept remains the same.&lt;/li&gt;
&lt;li&gt;Small allocations via &lt;code&gt;sbrk()&lt;/code&gt; and large allocations via &lt;code&gt;mmap()&lt;/code&gt;. The definition of small and large can be allocator specific which we will explore later.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;And we are done with the syscalls enabling dynamic memory allocation.&lt;/p&gt;</description></item><item><title>Paging</title><link>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/virtual-memory/paging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/virtual-memory/paging/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;August 11 and 12, 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Why Pages?&lt;span class="hx:absolute hx:-mt-20" id="why-pages"&gt;&lt;/span&gt;
&lt;a href="#why-pages" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Memory is &lt;strong&gt;byte-addressable&lt;/strong&gt;. In 2025, most laptops comes with 8 GiB RAM at least. How many bytes does 8 GiB have?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 GiB = 1024 MiB&lt;/li&gt;
&lt;li&gt;1 MiB = 1024 KiB&lt;/li&gt;
&lt;li&gt;1 KiB = 1024 bytes&lt;/li&gt;
&lt;li&gt;Therefore, 1 GiB = 1024 * 1024 * 1024 bytes = 1073741824 bytes.&lt;/li&gt;
&lt;li&gt;And, 8 GiB would be 8 * 1073741824 = 8589934592 bytes or, ~8.6 billion bytes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we have to keep track of every byte in a flat table, it would have ~8.6 billion entries. And this is for 8 GiB RAM stick. The number would become crazy for higher valued RAMs.&lt;/p&gt;
&lt;p&gt;So, the solution? Group these bytes. And the group of these bytes is came to known as a &lt;strong&gt;page&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Generally, a page is sized 4 KiB in modern Linux systems, though Linux supports huge pages as well. But we need not to worry about them yet. Plus, if you ask why a page is 4 KiB only? Its historical and technical as well. But we can avoid that for now.&lt;/p&gt;
&lt;p&gt;4 KiB means 4 * 1024 bytes or 4096 bytes. That means, a page is a gateway to 4096 unique byte-addressable locations.&lt;/p&gt;
&lt;p&gt;Remember, the concept of pages exist in virtual memory only. The equivalent concept in physical memory is page frame, which we will talk about later.&lt;/p&gt;
&lt;h2&gt;Page Table&lt;span class="hx:absolute hx:-mt-20" id="page-table"&gt;&lt;/span&gt;
&lt;a href="#page-table" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A page table is a data structure that manages pages. That&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;These page tables are then used by the memory management unit to translate virtual addresses to physical addresses.&lt;/p&gt;
&lt;p&gt;Modern systems are based on 64-bit architecture, which have 64-bit wide addressable length.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Virtual Addresses are large and if a single flat page table was used, it would be huge.&lt;/li&gt;
&lt;li&gt;Managing such a page table would be a nightmare.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To solve this problem, a hierarchical approach was implemented, which ensures that each access reduces the sample space of possibilities.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The closest example that explains this problem is linear search.&lt;/li&gt;
&lt;li&gt;If there is a sorted array of 1,000 elements, and our element lies at index 762, we have to traverse 763 entries before we find our match.&lt;/li&gt;
&lt;li&gt;But binary search reduces this exponentially. In just 9 iterations, we will find our match. Roughly 1% of linear search. That&amp;rsquo;s the same level of reduction we are talking about through paging.&lt;/li&gt;
&lt;li&gt;If you are wondering how binary search works, you can google it. In simple words, we divide the sample space in half and take the value at mid index. If the value at mid index is lesser than the target value, we have to search the upper half, otherwise, the lower half. We do this until the value at mid index becomes the target.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This hierarchical approach is what we call as 4-level paging.&lt;/p&gt;
&lt;h2&gt;4-Level Paging&lt;span class="hx:absolute hx:-mt-20" id="4-level-paging"&gt;&lt;/span&gt;
&lt;a href="#4-level-paging" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In simple words, there are 4 levels and each level has a version of page table. These are structured in a way that as you move through these tables, you are reducing the sample space by multiple folds. Lets zero in and find out how it actually happens.&lt;/p&gt;
&lt;p&gt;We will move from low to high because that is more logical and comprehensible.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Plain page table.&lt;/li&gt;
&lt;li&gt;Page directory index table.&lt;/li&gt;
&lt;li&gt;Page directory pointer table.&lt;/li&gt;
&lt;li&gt;Page map level 4 table.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Plain Page Table&lt;span class="hx:absolute hx:-mt-20" id="plain-page-table"&gt;&lt;/span&gt;
&lt;a href="#plain-page-table" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A page is a collection of individual bytes. At basic, we are dealing with 4 KiB pages. So, a page is a collection of 4096 addressable bytes in virtual memory.&lt;/p&gt;
&lt;p&gt;As named, a page table should be a collection of pages, right? Not really.&lt;/p&gt;
&lt;p&gt;Page is just a conceptual term. It exist in theory only. What we really deal with is page frame in the physical memory. And, a page table is a collection of page frames. How many page frames, to be exact? The number is 512.&lt;/p&gt;
&lt;p&gt;This number is obtained by dividing the page size by size of each entry, where size of each entry is given by the register width, which is 8 bytes on x64. So, we get, &lt;code&gt;4096/8&lt;/code&gt;, giving us 512 entries. And this mathematics is applicable to rest of the tables as well.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Therefore, a plain page table is a collection of 512 page frames, or, each entry in a page table is a gateway to a page frame in the physical memory.&lt;/p&gt;
&lt;p&gt;A page is sized 4096 bytes, so, a plain page table manages a total of &lt;code&gt;512 * 4096&lt;/code&gt; bytes, which is &lt;code&gt;2097152&lt;/code&gt; bytes.&lt;/p&gt;
&lt;h3&gt;Page Directory Index Table (PDIT)&lt;span class="hx:absolute hx:-mt-20" id="page-directory-index-table-pdit"&gt;&lt;/span&gt;
&lt;a href="#page-directory-index-table-pdit" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Each entry in this table is of type &lt;strong&gt;page table&lt;/strong&gt;. Therefore, a page directory index table is a collection of 512 page tables, or, each entry in a page directory index table is a gateway to a page table.&lt;/p&gt;
&lt;p&gt;A single page table manages a total of &lt;code&gt;2097152&lt;/code&gt; bytes, so, a page directory index table would manage a total of &lt;code&gt;512 * 2097152&lt;/code&gt; bytes, which is &lt;code&gt;1073741824&lt;/code&gt; bytes.&lt;/p&gt;
&lt;h3&gt;Page Directory Pointer Table (PDPT)&lt;span class="hx:absolute hx:-mt-20" id="page-directory-pointer-table-pdpt"&gt;&lt;/span&gt;
&lt;a href="#page-directory-pointer-table-pdpt" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Each entry in this table is of type &lt;strong&gt;page directory&lt;/strong&gt;. Therefore, a page directory pointer table is a collection of page directories.&lt;/p&gt;
&lt;p&gt;It has 512 entries, each pointing to a separate page directory.&lt;/p&gt;
&lt;p&gt;A page directory manages &lt;code&gt;1073741824&lt;/code&gt; bytes. So, a page directory pointer table would manage a total of &lt;code&gt;512 * 1073741824&lt;/code&gt; bytes, which is &lt;code&gt;549755813888&lt;/code&gt; bytes.&lt;/p&gt;
&lt;h3&gt;Page Map Level 4 (PML4) Table&lt;span class="hx:absolute hx:-mt-20" id="page-map-level-4-pml4-table"&gt;&lt;/span&gt;
&lt;a href="#page-map-level-4-pml4-table" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Each entry in this table is of type PDPT.&lt;/p&gt;
&lt;p&gt;A PDPT manages &lt;code&gt;549755813888&lt;/code&gt; bytes. So, a page map level 4 table would manage a total of &lt;code&gt;512 * 549755813888&lt;/code&gt; bytes, which is &lt;code&gt;281474976710656&lt;/code&gt; bytes.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So these bytes look daunting. Lets simplify them.&lt;/p&gt;
&lt;p&gt;1 KiB = 1024 bytes&lt;/p&gt;
&lt;p&gt;1 MiB = 1024 KiB = 1024 * 1024 bytes = 1048576 bytes&lt;/p&gt;
&lt;p&gt;2 MiB = (2 * 1048576) bytes = 2097152 bytes&lt;/p&gt;
&lt;p&gt;1 GiB = 1024 MiB = (1024*1024) KiB = (1024*1024*1024) bytes = 1073741824 bytes.&lt;/p&gt;
&lt;p&gt;549755813888/1073741824 = 512 GiB&lt;/p&gt;
&lt;p&gt;1 TiB = 1024 GiB = (1024*1024) MiB = (1024*1024*1024) KiB = (1024*1024*1024*1024) bytes = 1099511627776&lt;/p&gt;
&lt;p&gt;281474976710656/1099511627776 = 256 TiB&lt;/p&gt;
&lt;p&gt;Therefore:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Page Tables&lt;/th&gt;
&lt;th&gt;Bytes Managed&lt;/th&gt;
&lt;th&gt;Simplified Size&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Plain Page Table&lt;/td&gt;
&lt;td&gt;2097152 bytes&lt;/td&gt;
&lt;td&gt;2 MiB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Page Directory Table&lt;/td&gt;
&lt;td&gt;1073741824 bytes&lt;/td&gt;
&lt;td&gt;1 GiB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Page Directory Index Table&lt;/td&gt;
&lt;td&gt;549755813888 bytes&lt;/td&gt;
&lt;td&gt;512 GiB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Page Map Level 4 Table&lt;/td&gt;
&lt;td&gt;281474976710656 bytes&lt;/td&gt;
&lt;td&gt;256 TiB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;p&gt;That&amp;rsquo;s enough for paging. Lets talk about virtual addresses.&lt;/p&gt;
&lt;h3&gt;But what really exist in these tables?&lt;span class="hx:absolute hx:-mt-20" id="but-what-really-exist-in-these-tables"&gt;&lt;/span&gt;
&lt;a href="#but-what-really-exist-in-these-tables" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;What we just had was a conceptual view of these page tables. But what do these page tables actually contain? That is important to understand, especially for the plain page table. Otherwise, it would lead to mental ruckus.&lt;/p&gt;
&lt;p&gt;In simple words, all of them are pointer tables. And each address (pointer) is 64-bit, obviously.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The PML4 table contains 512 pointers to page directory pointer tables.&lt;/li&gt;
&lt;li&gt;The page directory pointer table contains 512 pointers to page directory index/offset tables.&lt;/li&gt;
&lt;li&gt;The page directory index table contains 512 pointers to plain page tables.&lt;/li&gt;
&lt;li&gt;A plain page table contains 512 pointers to physical page frames.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only important thing to understand here is the entries in the plain page tables.&lt;/p&gt;
&lt;p&gt;A page table is a gateway to physical page frames. A page table entry looks like this:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;*--------* *----------* *-------------* *-------------------* *---------------------*
| NX-bit | | CPU bits | | OS-Reserved | | Page Frame Number | Flags &amp;amp;&amp;amp; Control Bits |
*--------* *----------* *-------------* *-------------------* *---------------------*
63 62 59 58 52 51 12 11 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you are deep into the trenches, and constantly thinking, you will spot that something is missing. Let me tell you that something. &lt;em&gt;&lt;strong&gt;How everything fits in the bigger picture?&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;A Note&lt;span class="hx:absolute hx:-mt-20" id="a-note"&gt;&lt;/span&gt;
&lt;a href="#a-note" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Before you start to wonder how these 4 page tables work together and stuff, I want to say, sit tight and enjoy the journey. Right now we don&amp;rsquo;t know virtual addresses in-depth, which are essential to understand how all of this fits in.&lt;/p&gt;
&lt;p&gt;Once we understand the virtual addressing system, we can hop on a process called &lt;strong&gt;page walk&lt;/strong&gt;, which would piece everything we have understood so far together.&lt;/p&gt;
&lt;p&gt;And the next thing we are going to study is exactly that.&lt;/p&gt;</description></item><item><title>Basic Computer Theory</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/basic-intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/basic-intro/</guid><description>
&lt;p&gt;Learning assembly is not similar to learning yet another programming language. There are no high-level constructs. There is memory and instructions. That&amp;rsquo;s it.&lt;/p&gt;
&lt;h2&gt;Memory (RAM)&lt;span class="hx:absolute hx:-mt-20" id="memory-ram"&gt;&lt;/span&gt;
&lt;a href="#memory-ram" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Imagine a room of personal-lockers inside of a bank. Every locker is the same.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Same size and color,&lt;/li&gt;
&lt;li&gt;Same capacity,&lt;/li&gt;
&lt;li&gt;Same access mechanism, and&lt;/li&gt;
&lt;li&gt;An addressing system to uniquely identify them.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A locker can contain anything, but what identifies them commonly is &lt;strong&gt;valuables&lt;/strong&gt;. A person can keep gold or silver items while another person can keep the photos of their family. Items are different but both of them identifies as a &lt;em&gt;valuable&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Similarly, memory is a huge collection of boxes, which have common properties, like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They are fixed in capacity, 1 byte (or 8-bits).&lt;/li&gt;
&lt;li&gt;Each box is identified by a unique number, called &lt;strong&gt;memory address&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Just as a locker itself can&amp;rsquo;t identify its contents, everything is just a valuable, the same is with memory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Everything is raw bytes. What defines a byte as an integer, a decimal, an emoji, an alphabet is the interpretation of that byte (or a group of bytes).&lt;/li&gt;
&lt;li&gt;Previously, we have read that &lt;strong&gt;context&lt;/strong&gt; and &lt;strong&gt;interpretation&lt;/strong&gt; is what that rules assembly. We can see it in practice here.&lt;/li&gt;
&lt;li&gt;A byte can be interpreted as digit, as an alphabet. When those same bytes are grouped, and interpreted, their meaning changes.&lt;/li&gt;
&lt;li&gt;Context decides the kind of interpretation required in order to get the right meaning out of those bytes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Central Processing Unit&lt;span class="hx:absolute hx:-mt-20" id="central-processing-unit"&gt;&lt;/span&gt;
&lt;a href="#central-processing-unit" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;CPU is the physical component that actually executes instructions.&lt;/p&gt;
&lt;p&gt;While modern systems are very complex, the role of CPU is quite simple: fetch, decode, and execute instructions stored in memory. And this what a &lt;strong&gt;fetch-execute&lt;/strong&gt; cycle is.&lt;/p&gt;
&lt;p&gt;The CPU needs to know the instruction to be executed, for this, it has got &lt;strong&gt;Program Counter&lt;/strong&gt;, whose purpose is to hold the memory address of the next instruction to be executed.&lt;/p&gt;
&lt;p&gt;The CPU has the instruction now and it needs to figure-out what this instruction means. For this, the CPU has &lt;strong&gt;instruction decoder&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In our everyday life, anything we do involves movement. We are moving things from one place to other. &lt;strong&gt;Locations&lt;/strong&gt; are one the most important things in our life. And so as with CPU.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every instruction uses some memory locations, where some data is stored, which is required in the instruction. Instructions themselves can be stored at a memory location.&lt;/li&gt;
&lt;li&gt;To fetch that data from that memory location, what comes handy is the &lt;strong&gt;data bus&lt;/strong&gt;. It is the connection between CPU and memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Suppose you have to go to your best friend&amp;rsquo;s house. You have picked up the keys for your bike, the cap, the scarf to protect from heat, and the sun glasses. All these things are stored somewhere in your house.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The key is probably on the top of the fridge or in the key-holding area.&lt;/li&gt;
&lt;li&gt;The sun glasses are at the dressing table.&lt;/li&gt;
&lt;li&gt;The scarf is in the closet.&lt;/li&gt;
&lt;li&gt;And the cap is on the table.&lt;/li&gt;
&lt;li&gt;What about the address to your friend&amp;rsquo;s house? Where is that? In your mind?&lt;/li&gt;
&lt;li&gt;If you don&amp;rsquo;t go mad on me, can I ask why don&amp;rsquo;t you write the address of your friend on a paper and store it your closet?&lt;/li&gt;
&lt;li&gt;Obviously, you are saying, &amp;ldquo;I am not mad!&amp;rdquo; Keeping the address in your mind ensures that it is accessible all the time.&lt;/li&gt;
&lt;li&gt;The CPU also has some highly-efficient and rapidly-accessible locations for this exact purpose. They are called &lt;strong&gt;general purpose registers&lt;/strong&gt;. These are high-speed memory locations inside the processor itself, that takes part in the actual execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At last, the &lt;strong&gt;Arithmetic and Logic Unit&lt;/strong&gt;. The data and the decoded instruction is passed here for further processing. Here, the instruction is actually executed. The computed results are placed on the data bus and sent to the appropriate location (a memory, or a register), as specified by the instruction.&lt;/p&gt;
&lt;p&gt;And these are the core elements of the CPU.&lt;/p&gt;
&lt;h2&gt;Fetch-Execute Cycle&lt;span class="hx:absolute hx:-mt-20" id="fetch-execute-cycle"&gt;&lt;/span&gt;
&lt;a href="#fetch-execute-cycle" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Fetch&lt;/strong&gt; – Read the instruction from memory (address held in instruction pointer).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decode&lt;/strong&gt; – Understand what the instruction means.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Execute&lt;/strong&gt; – Perform the operation (move data, add, compare, etc).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt; – Write the result (often into a register or memory).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Repeat&lt;/strong&gt; – Move to the next instruction.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And this happens billions of times.&lt;/p&gt;
&lt;h2&gt;Registers&lt;span class="hx:absolute hx:-mt-20" id="registers"&gt;&lt;/span&gt;
&lt;a href="#registers" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In addition to the memory outside of the processor, the processor itself has some special, high-speed memory locations called registers.&lt;/p&gt;
&lt;p&gt;The primary purpose of a register is to hold the data that the CPU is actively working on. Just like the desk has a pen-holder which holds necessary pens like black and blue ball pens, a correction pen, a ruler, pencil, and a rubber. But it doesn&amp;rsquo;t contain the whole stationary. We have cupboards for that.&lt;/p&gt;
&lt;p&gt;Since registers are high-speed and are located within the processor itself, they are limited in number, for various valid reasons.&lt;/p&gt;
&lt;p&gt;Most information is stored in the main memory, brought in the registers [,for processing], and then put back into memory when the processing is completed.&lt;/p&gt;
&lt;p&gt;Just like memory, registers also hold bits. It&amp;rsquo;s up to you to interpret them correctly (as numbers, characters, addresses, etc.)&lt;/p&gt;
&lt;p&gt;Mainly, there are two types of registers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;General Purpose Registers&lt;/strong&gt;, this is where the main action happens. Addition, subtraction, multiplication, comparisons, and other operations generally use GPRs. They are expansive and are very less in number. There are 16 GPRs in x86_64 (amd64 or 64-bit) architecture.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Special Purpose Registers&lt;/strong&gt;, self-explanatory?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Size/Width Of A Register&lt;span class="hx:absolute hx:-mt-20" id="sizewidth-of-a-register"&gt;&lt;/span&gt;
&lt;a href="#sizewidth-of-a-register" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Word size is the size of the data, or the number of bits the CPU can process at once.&lt;/p&gt;
&lt;p&gt;It is architecture dependent. 32-bit systems has a word size of 32-bits or 4-bytes, while 64-bit systems have 64-bit wide registers.&lt;/p&gt;
&lt;p&gt;Word is the size of the registers in a particular CPU architecture.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Word&amp;rdquo; is the fundamental unit of CPU. Just like &lt;em&gt;m/s&lt;/em&gt; is for velocity.&lt;/p&gt;
&lt;h2&gt;What is 32-bit &amp;amp;&amp;amp; 64-bit?&lt;span class="hx:absolute hx:-mt-20" id="what-is-32-bit--64-bit"&gt;&lt;/span&gt;
&lt;a href="#what-is-32-bit--64-bit" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We download software. If that&amp;rsquo;s a technical software, it is always mentioned whether you are at 32-bit or 64-bit OS. And there are different software for both.&lt;/p&gt;
&lt;p&gt;Most modern systems are based on 64-bit architecture.&lt;/p&gt;
&lt;p&gt;This 32-bit and 64-bit tells us how many numbers the CPU is capable of dealing at once.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A 32-bit CPU can work with numbers that are 32 bits long.&lt;/li&gt;
&lt;li&gt;A 64-bit CPU can work with numbers that are 64-bits long.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;ISA v/s Assemblers&lt;span class="hx:absolute hx:-mt-20" id="isa-vs-assemblers"&gt;&lt;/span&gt;
&lt;a href="#isa-vs-assemblers" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are multiple assemblers in the market. GNU assembler (GAS), Netwide assembler (NASM), fish assembler (FASM), Microsoft assembler (MASM) and so on&amp;hellip;.&lt;/p&gt;
&lt;p&gt;Assembler does one thing — translate human readable assembly instructions into machine opcodes, which the CPU can understand and execute directly.&lt;/p&gt;
&lt;p&gt;A CPU&amp;rsquo;s instruction set architecture defines its capabilities. It conceptualizes everything that the CPU can do.&lt;/p&gt;
&lt;p&gt;Assemblers are the programs that decides how the programmers will interact with the CPU.&lt;/p&gt;
&lt;p&gt;Take this, there are handful of firms that research on semiconductor chips, but there are relatively many who does the manufacturing. ISA is that research while assemblers are the manufacturers. Each manufacturer (assembler) has the freedom to manufacture its own way.&lt;/p&gt;
&lt;h2&gt;Assembly-Time vs Run-Time&lt;span class="hx:absolute hx:-mt-20" id="assembly-time-vs-run-time"&gt;&lt;/span&gt;
&lt;a href="#assembly-time-vs-run-time" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Assembler directives mean nothing to the CPU. They exist to streamline development. Assembler resolves them into machine understandable things while assembling the code. This is called assembly-time management. (Checkout &lt;a href="../../understanding-hello-world/a-high-level-overview-of-build-process-in-c.md"title="mention"&gt;a-high-level-overview-of-build-process-in-c.md&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;There are things that are consistent across all the assemblers because the CPU directly understand them. These are runtime managed things.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;OFFSET&lt;/code&gt; is an assembler directive, while &lt;code&gt;lea&lt;/code&gt; is a CPU understood operation, defined in the ISA itself.&lt;/p&gt;</description></item><item><title>Deallocation</title><link>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/dma/deallocation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/dma/deallocation/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;10 September 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Deallocation as a process can be divided into two parts.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Making the memory inaccessible.&lt;/li&gt;
&lt;li&gt;Reclamation by kernel.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;There are hundreds of process getting created and exiting simultaneously. All of them are accessing the same computer memory.&lt;/p&gt;
&lt;p&gt;Although the virtual address space is quite large, the physical space is still limited. And the virtual space is mapped with the physical space by the MMU.&lt;/p&gt;
&lt;p&gt;When a process used a part of memory and now it&amp;rsquo;s time for deallocation, there can be two path. Either you zero the whole memory used by the process or you make it inaccessible.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Path 1 sounds more safe as it ensures that there is no possibility of data leaks.&lt;/li&gt;
&lt;li&gt;Path 2 sounds more like a irresponsible way to handle memory. But is it really?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As we have seen before, there are hundreds of processes in action simultaneously. And their virtual address space do differs but at the end of the day, it is going to be mapped with physical memory.&lt;/p&gt;
&lt;p&gt;When memory is constantly in use, it is so complex to leak data. It is highly unlikely that you won&amp;rsquo;t find the memory location with some data on it, but the question is, how you are going to make sense of it? How you are going to establish the integrity that this data belongs to that process specifically?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is the reason that makes path 2 a clever way instead of an irresponsible one.&lt;/li&gt;
&lt;li&gt;Because deallocation will come at a cost. You have to put zero or any sentinel value on all the memory locations. While this is possible for smaller allocations, this can be really a resource exhausting take on deallocation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is why making memory inaccessible is cheaper and makes logically sense as well.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Now comes part 2, reclamation by the kernel.&lt;/p&gt;
&lt;p&gt;When we call &lt;code&gt;free(ptr)&lt;/code&gt;, it just tells the allocator that this part of memory can be reused by the process. The allocator marks this memory as free to use.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This memory is still mapped in that process as it is allocated to it.&lt;/li&gt;
&lt;li&gt;The memory still has the contents but they aren&amp;rsquo;t accessible (directly).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;free(ptr)&lt;/code&gt; never really frees anything in an absolute sense. It just makes the memory inaccessible &lt;strong&gt;via usual means&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As we know, there can be two ways in which dynamic memory is allocated, &lt;code&gt;brk()&lt;/code&gt; and &lt;code&gt;mmap()&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;brk()&lt;/code&gt; based allocation, if the top of the heap is free, the allocator can move the program break back down and this is called as &lt;strong&gt;heap trimming&lt;/strong&gt;. This part of heap is now unmapped and the kernel reclaims it instantly, mid-process.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;mmap()&lt;/code&gt; based allocation, on a call to &lt;code&gt;free(ptr)&lt;/code&gt; , the kernel calls &lt;code&gt;munmap()&lt;/code&gt; , which stands for memory unmapping. And the kernel reclaims the memory instantly, again mid-process.&lt;/li&gt;
&lt;li&gt;Stack also grows automatically with page faults. if you don&amp;rsquo;t use much of the space, the kernel can unmap and reclaim the space instantly.&lt;/li&gt;
&lt;li&gt;In all of these cases, the kernel destroys the part of the data structure which was accounting the memory allocation for that part in that process. Every region, stack/heap/mmap becomes unmapped and the memory is reclaimed. And the memory reclaimed is &lt;strong&gt;no longer accessible via any means&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;When the process dies, the kernel destroys the entire data structure which was accounting the memory allocation for that process. Every region, stack/heap/mmap becomes unmapped and the memory is reclaimed.&lt;/p&gt;
&lt;p&gt;When a new process spawns and demands memory, the kernel zeroes the memory before making it available for that process. This guarantees no cross-process leaks. Zeroing happens on demand, so idle freed pages aren’t wasted effort.&lt;/p&gt;
&lt;p&gt;So effectively, there are two cases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Freed but not reclaimed.&lt;/li&gt;
&lt;li&gt;Freed and reclaimed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And zeroing happens for inter-process, not intra-process.&lt;/p&gt;</description></item><item><title>Virtual Addressing System</title><link>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/virtual-memory/virtual-addressing-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/virtual-memory/virtual-addressing-system/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;August 11 and 12, 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;A Virtual Address&lt;span class="hx:absolute hx:-mt-20" id="a-virtual-address"&gt;&lt;/span&gt;
&lt;a href="#a-virtual-address" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Total number of bits we have are 64. But not all the 64-bits are required to manage addresses now. It would be huge to manage 2^64 addresses.&lt;/p&gt;
&lt;p&gt;So, we stick to 48-bit virtual addresses. The rest of the 16-bits are sign extension of the 47th bit. We&amp;rsquo;ll explore what that means in a while.&lt;/p&gt;
&lt;p&gt;A virtual address is divided into several pieces. More precisely, the bits in the a virtual address are grouped together to represent different parts of the 4-level paging system that we have discussed previously.&lt;/p&gt;
&lt;p&gt;At high level, a virtual address is structured like this:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;&amp;#43;--------------&amp;#43; &amp;#43;--------------&amp;#43; &amp;#43;--------------&amp;#43; &amp;#43;------------&amp;#43; &amp;#43;----------------------&amp;#43;
| PML4: 9-bits | | PDPT: 9-bits | | PDIT: 9-bits | | PT: 9-bits | | Page Offset: 12-bits |
&amp;#43;--------------&amp;#43; &amp;#43;--------------&amp;#43; &amp;#43;--------------&amp;#43; &amp;#43;------------&amp;#43; &amp;#43;----------------------&amp;#43;
47 39 38 30 29 21 20 12 11 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Why like this?&lt;span class="hx:absolute hx:-mt-20" id="why-like-this"&gt;&lt;/span&gt;
&lt;a href="#why-like-this" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;All the 4 page tables have 512 entries, which require a minimum of 9-bits to represent. So, 9-bits are reserved for them.&lt;/p&gt;
&lt;p&gt;Page offset is the actual byte being addressed within the page. Since there are 4096 bytes in total, 12-bit are required at minimum to represent them.&lt;/p&gt;
&lt;h3&gt;Some Good-To-Know Things&lt;span class="hx:absolute hx:-mt-20" id="some-good-to-know-things"&gt;&lt;/span&gt;
&lt;a href="#some-good-to-know-things" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A virtual address is in big endian notation, so most significant bits are in left and least significant bits in the right.&lt;/p&gt;
&lt;p&gt;As long as we are dealing with pen paper math, there is no need for bit shifts. But with programming, bit shifting becomes important for extracting values the right way and avoiding falling at edge cases.&lt;/p&gt;
&lt;p&gt;Each process gets a virtual address space, which has 256 TiB worth of addressable space, most of which is empty. Yes, the calculation we have done previously is applied individually to every single process.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The program never runs out of virtual address spaces. It only runs out of mappings in the physical memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note: Addressable space ≠ Usable space.&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Address Range Split&lt;span class="hx:absolute hx:-mt-20" id="address-range-split"&gt;&lt;/span&gt;
&lt;a href="#address-range-split" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The virtual address space is split into two halves for user space and kernel space.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;0x0000000000000000 → 0x00007FFFFFFFFFFF (Lower half, ~128 TiB) → User space
0xFFFF800000000000 → 0xFFFFFFFFFFFFFFFF (Upper half, ~128 TiB) → Kernel space&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;The middle region (&lt;code&gt;x00007FFFFFFFFFFF to 0xFFFF800000000000&lt;/code&gt;) is unused guard space.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note: The split is logical and exist only in virtual memory, except the hardware enforced rules.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;What are user space and kernel space really?&lt;span class="hx:absolute hx:-mt-20" id="what-are-user-space-and-kernel-space-really"&gt;&lt;/span&gt;
&lt;a href="#what-are-user-space-and-kernel-space-really" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In simple words, user space and kernel space are two logical distinctions within the virtual memory layout.&lt;/p&gt;
&lt;p&gt;This logical distinction is achieved by access control (privileges) and protection rights, which are enforced both at the hardware level (CPU) and the software level (OS).&lt;/p&gt;
&lt;p&gt;User space is the portion where unprivileged jobs are managed and kernel space is where privileged jobs are managed.&lt;/p&gt;
&lt;p&gt;A definition which is quite popular is that user space is where &lt;strong&gt;user mode&lt;/strong&gt; applications run and kernel space is where the &lt;strong&gt;OS Kernel&lt;/strong&gt; runs or privileged tasks are executed. This doesn&amp;rsquo;t sound accurate to me for one reason.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A task is usually made up of multiple atomic jobs. And we can verify this with assembly. An action as simple as printing something to standard output can involve multiple steps.&lt;/li&gt;
&lt;li&gt;A task itself can&amp;rsquo;t be tagged as privileged or unprivileged. The atomic jobs that actually do something are the ones that can be actually tagged.&lt;/li&gt;
&lt;li&gt;For example, running &lt;em&gt;VS Code&lt;/em&gt; is a user space action but within that are several thousands of actions, many of which aren&amp;rsquo;t possible without privileged access. Like writing code, which is an I/O operation inside a file, which is a privileged job.&lt;/li&gt;
&lt;li&gt;Therefore, it is a little ambiguous to say that &amp;ldquo;&lt;em&gt;user space runs user mode applications and kernel space runs elevated tasks&lt;/em&gt;&amp;rdquo; or something like that. Saying that &amp;ldquo;&lt;em&gt;user space executes unprivileged jobs and kerne space executes privileged jobs&lt;/em&gt;&amp;rdquo; is far more accurate in my opinion.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Why this distinction exist?&lt;span class="hx:absolute hx:-mt-20" id="why-this-distinction-exist"&gt;&lt;/span&gt;
&lt;a href="#why-this-distinction-exist" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;There is no limit on what you can execute, which creates problems. There malwares and other program threatening the functioning of the hardware.&lt;/p&gt;
&lt;p&gt;This distinction ensures that programs can be contained by default. Its a version of &lt;em&gt;&lt;strong&gt;deny by default, allow by exception&lt;/strong&gt;&lt;/em&gt; strategy. Anything is considered unsafe before it passes the kernel&amp;rsquo;s checks.&lt;/p&gt;
&lt;p&gt;And any attempt to access privileged area doesn&amp;rsquo;t get unnoticed. And if it is inappropriate, the system denies it.&lt;/p&gt;
&lt;p&gt;There is a proper mechanism through which the execution mode switches from user space to kernel space, when required.&lt;/p&gt;
&lt;h3&gt;Analogy&lt;span class="hx:absolute hx:-mt-20" id="analogy"&gt;&lt;/span&gt;
&lt;a href="#analogy" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Consider an office space with employees of different kinds. And there is a room for the boos.&lt;/p&gt;
&lt;p&gt;The boss&amp;rsquo;s room is what kernel space is really is. Only privileged access is allowed and rest has to undergo a process to come there.&lt;/p&gt;
&lt;p&gt;Then there is general area which is accessible to everyone as long as they are an employee in the company. This is out user space.&lt;/p&gt;
&lt;p&gt;When you need to something that requires permission from the boss, you go through a standard process, which is exactly how the execution context changes from user space to kernel space when required.&lt;/p&gt;
&lt;h3&gt;Hardware Enforced Privilege Levels&lt;span class="hx:absolute hx:-mt-20" id="hardware-enforced-privilege-levels"&gt;&lt;/span&gt;
&lt;a href="#hardware-enforced-privilege-levels" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Rings&lt;/strong&gt; are hardware-enforced CPU privilege levels, which forms a core part of how modern processors (like x64) separates trusted code (kernel) from untrusted (user) code.&lt;/p&gt;
&lt;p&gt;CPUs implement multiple &lt;strong&gt;protection rings&lt;/strong&gt; numbered 0 to 3, with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Ring 0 = highest privilege (kernel mode)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Ring 3 = lowest privilege (user mode)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rings 1 and 2&lt;/strong&gt; exist but are rarely used in mainstream Linux.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;System calls cause a CPU privilege level switch from Ring 3 → Ring 0.&lt;/p&gt;</description></item><item><title>What are .h files?</title><link>https://hi-anki.github.io/gitbook/docs/elf-parser-project/header-files/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/elf-parser-project/header-files/</guid><description>
&lt;h2&gt;Why?&lt;span class="hx:absolute hx:-mt-20" id="why"&gt;&lt;/span&gt;
&lt;a href="#why" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;.c&lt;/code&gt; files are source files and &lt;code&gt;.h&lt;/code&gt; files are header files.&lt;/p&gt;
&lt;p&gt;The idea is to keep declarations and definitions separate. Why? For a variety of reasons.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Cleanliness and Directness&lt;/strong&gt;. When something is used by multiple files, it is better to keep it in one file and reference that file instead of duplicating it, &lt;strong&gt;reducing chaos and redundancy&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Modular code&lt;/strong&gt;. The files which require those definitions just have to include the header file, avoiding the need to include the complete source file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compiler efficiency&lt;/strong&gt;. The most important one.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We know that when multiple files are passed to &lt;code&gt;gcc&lt;/code&gt; , it generates object files for each source file and the &lt;code&gt;linker&lt;/code&gt; program joins them together to form the final binary.&lt;/p&gt;
&lt;p&gt;If the source file changes in the future, that&amp;rsquo;s where this system shines.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the other files have included the declaration file only, they are not required to be recompiled. Only the corresponding source file needs recompilation. This leads to compiler efficiency.&lt;/li&gt;
&lt;li&gt;If the other files have included the source (full definition) itself, every other such file needs to be recompiled before linking.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may ask why including header files doesn&amp;rsquo;t demand full recompilation but including source files does. And the answer to this question lies in the build process.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;include&lt;/code&gt; preprocessing directive copies the file as it is, in the file it is called.&lt;/li&gt;
&lt;li&gt;Header files themselves don&amp;rsquo;t generate any object code. They are an interface to how we access &lt;code&gt;glibc&lt;/code&gt;, the standard C library, which is one-file that becomes &lt;code&gt;libc.so&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;All these different header files are used to categorize the declarations used for different purposes. And they are expanded into the source file. The linker joins the object files with the shared object library and we are done.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have a look at the &lt;code&gt;/build-steps&lt;/code&gt; directory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you open the &lt;code&gt;elfdump-mappings.i&lt;/code&gt; file, along with &lt;code&gt;dump_structure/mappings.c&lt;/code&gt; and &lt;code&gt;dump_structure/mappings.h&lt;/code&gt;, you will find that it includes both of these files along with the the declarations from the &lt;code&gt;inttypes.h&lt;/code&gt; file. Line 296 on wards.&lt;/li&gt;
&lt;li&gt;And these extended files are then compiled to object codes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;span class="hx:absolute hx:-mt-20" id="conclusion"&gt;&lt;/span&gt;
&lt;a href="#conclusion" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Its a simple way to reduce redundancy and organize the code. That&amp;rsquo;s it.&lt;/p&gt;</description></item><item><title>What Powers Debuggers? — 1</title><link>https://hi-anki.github.io/gitbook/docs/debugging/wpd-1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/debugging/wpd-1/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;22, 23 September 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Premise&lt;span class="hx:absolute hx:-mt-20" id="premise"&gt;&lt;/span&gt;
&lt;a href="#premise" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It looks like debuggers are doing some sort of black magic, which is not the case. To remove that black magic, we have to understand what powers debuggers.&lt;/p&gt;
&lt;p&gt;Primarily there are 2 things that power a debugging program.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Trap instructions, CPU flags, signals and exceptions are the basis of this &lt;strong&gt;black magic&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ptrace&lt;/code&gt; syscall is the dedicated API that allows a debugger to act as a sentinel being and observe other processes. It allows the debugger to make use of traps and signals to do the black magic.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But there is one more thing, called &lt;strong&gt;symbol and debug information&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is not strictly required but it makes debugging intuitive and less mentally draining. Without debug information, you&amp;rsquo;d just have raw assembly and memory addresses.&lt;/li&gt;
&lt;li&gt;If you have no problem seeing raw assembly and memory addresses, this part is just add-on for you. But to make the process easier, debug information is a necessary thing.&lt;/li&gt;
&lt;li&gt;By the way, this is a part of ELF and DWARF specs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Exceptions&lt;span class="hx:absolute hx:-mt-20" id="exceptions"&gt;&lt;/span&gt;
&lt;a href="#exceptions" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;An &lt;strong&gt;exception&lt;/strong&gt; is a synchronous event that is generated when the processor detects one or more &amp;ldquo;predefined special conditions&amp;rdquo; while executing an instruction.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Take &lt;code&gt;4/0&lt;/code&gt;, that&amp;rsquo;s going to raise divide by zero exception. This is only going to be raised when the CPU reaches that instruction, this is what synchronous means. The exception is not going to be raised arbitrarily but systematically.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Exceptions is how the CPU &lt;em&gt;stops normal execution&lt;/em&gt; and transfers control to the OS.&lt;/p&gt;
&lt;p&gt;There are 3 classes of exceptions: faults, traps, and aborts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A synchronous exception detected before the instruction completes is called a &lt;strong&gt;fault&lt;/strong&gt;. Ex: divide by zero and page fault.&lt;/li&gt;
&lt;li&gt;A synchronous exception after the instruction completes is called a &lt;strong&gt;trap&lt;/strong&gt;. Ex: Breakpoint, overflow and single-step via trap flag (TF).&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;abort&lt;/strong&gt; is a catastrophic exception, which typically &lt;strong&gt;cannot be handled normally&lt;/strong&gt;. Usually indicates hardware failure or an unrecoverable condition.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Interrupts&lt;span class="hx:absolute hx:-mt-20" id="interrupts"&gt;&lt;/span&gt;
&lt;a href="#interrupts" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;An &lt;strong&gt;interrupt&lt;/strong&gt; is an asynchronous event that is typically triggered by an I/O device. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL + C&lt;/code&gt; to exit an infinite loop or a hanged terminal process.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CTRL + D&lt;/code&gt; to exit python shell.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When an interrupt or an exception is signaled, the processor halts the execution of the program and switches to a handler procedure that has been written specifically to handle the interrupt or exception condition.&lt;/p&gt;
&lt;p&gt;The processor accesses the handler procedure through an entry in the &lt;strong&gt;interrupt descriptor table&lt;/strong&gt; (IDT). When the handler has completed handling the interrupt or exception, program control is returned to the interrupted program.&lt;/p&gt;
&lt;p&gt;The IA-32 Architecture defines 18 predefined interrupts and exceptions and 224 user defined interrupts.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;When the trap flag in &lt;code&gt;RFLAGS&lt;/code&gt; is set, which is the 8th bit, the CPU generates a debug exception (#DB) after every instruction. This is the hardware single-step mode.&lt;/p&gt;
&lt;h3&gt;Breakpoint&lt;span class="hx:absolute hx:-mt-20" id="breakpoint"&gt;&lt;/span&gt;
&lt;a href="#breakpoint" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;INT3&lt;/code&gt; is a one-byte (&lt;code&gt;0xCC&lt;/code&gt;) instruction inserted by the debugger, which when executed CPU raises a breakpoint exception (&lt;code&gt;#BP&lt;/code&gt;). The kernel delivers a &lt;code&gt;SIGTRAP&lt;/code&gt; to the process.&lt;/p&gt;
&lt;p&gt;To insert a breakpoint at an address, the debugger modifies the first byte of that instruction to &lt;code&gt;0xCC&lt;/code&gt;. When the CPU reaches that instruction, a break point exception is triggered.&lt;/p&gt;
&lt;p&gt;To resume execution, the debugger restores the original byte at that instruction’s address. Since &lt;code&gt;RIP&lt;/code&gt; has advanced by one (past the &lt;code&gt;0xCC&lt;/code&gt;), the debugger decrements &lt;code&gt;RIP&lt;/code&gt; by 1 so that it points back to the intended instruction.&lt;/p&gt;
&lt;p&gt;It is used to stop execution at a certain address in the process.&lt;/p&gt;
&lt;h3&gt;Trap Flag&lt;span class="hx:absolute hx:-mt-20" id="trap-flag"&gt;&lt;/span&gt;
&lt;a href="#trap-flag" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Trap flag or &lt;code&gt;RFLAGS.TF&lt;/code&gt; is the 8th bit in the CPU flags register.&lt;/p&gt;
&lt;p&gt;When this bit is set to 1, the CPU raises a debug exception (&lt;code&gt;#DB&lt;/code&gt;) after every instruction in the process. Kernel delivers &lt;code&gt;SIGTRAP&lt;/code&gt; to the debugger.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Single-step&lt;/strong&gt; means execute one instruction and then stop. It is achieved by setting &lt;code&gt;RFLAGS.TF=1&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;span class="hx:absolute hx:-mt-20" id="conclusion"&gt;&lt;/span&gt;
&lt;a href="#conclusion" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A debugger program sets up either an &lt;code&gt;INT3&lt;/code&gt; instruction to create a breakpoint at an address or it sets up the &lt;code&gt;RFLAGS.TF&lt;/code&gt; bit to 1 to stop after each instruction.&lt;/p&gt;
&lt;p&gt;When a breakpoint is set on an instruction, an &lt;code&gt;INT3&lt;/code&gt; instruction executes immediately, which raises a &lt;code&gt;#BP&lt;/code&gt; exception. The kernel responds to this by sending a &lt;code&gt;SIGTRAP&lt;/code&gt; , which the debugger program catches via &lt;code&gt;ptrace&lt;/code&gt;. The rest is taken care by &lt;code&gt;ptrace&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;RFLAGS.TF=1&lt;/code&gt; , a &lt;code&gt;#DB&lt;/code&gt; exception is raised after every instruction in the process. The kernel responds similarly by sending a &lt;code&gt;SIGTRAP&lt;/code&gt;, which the debugger program catches via &lt;code&gt;ptrace&lt;/code&gt;. The rest is taken care by &lt;code&gt;ptrace&lt;/code&gt; itself.&lt;/p&gt;
&lt;h2&gt;References&lt;span class="hx:absolute hx:-mt-20" id="references"&gt;&lt;/span&gt;
&lt;a href="#references" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href="https://cdrdv2.intel.com/v1/dl/getContent/671200"target="_blank" rel="noopener"&gt;Intel 64 and 32 bit Manual&lt;/a&gt;&lt;/p&gt;</description></item><item><title>Common Terminologies</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/common-terms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/common-terms/</guid><description>
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Mnemonic:&lt;/strong&gt; The actual CPU operation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Operand:&lt;/strong&gt; Arguments passed to the mnemonic, which could be a register, intermediate or a memory location.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Instruction:&lt;/strong&gt; Something the CPU can execute. It includes both the mnemonic and the operands.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Immediate&lt;/strong&gt;: An immediate is a constant value, like &lt;code&gt;4&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Label:&lt;/strong&gt; A name given to a particular memory address in the code.
&lt;ul&gt;
&lt;li&gt;It is made up of letters, digits and underscore.&lt;/li&gt;
&lt;li&gt;A label must start with a letter or underscore.&lt;/li&gt;
&lt;li&gt;A label must end with a colon.&lt;/li&gt;
&lt;li&gt;There are &lt;code&gt;.&lt;/code&gt; prepended labels which are used to make a label available to its parent and hides from others. &lt;em&gt;Just don&amp;rsquo;t think about it for now, it&amp;rsquo;s a complicated thing.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;It holds meaning for the assembler (&lt;code&gt;GAS&lt;/code&gt;, in our case), not the CPU. The assembler replaces the labels with virtual addresses or offsets.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Directive (or Pseudo-Instruction):&lt;/strong&gt; Instructions defined for the assembler program, not the CPU.
&lt;ul&gt;
&lt;li&gt;They begin with a period (&lt;code&gt;.&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Ex: &lt;code&gt;.section&lt;/code&gt; creates a section within the program.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Section:&lt;/strong&gt; The code is divided into multiple sections to organize the memory layout.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Comment:&lt;/strong&gt; Anything after a semi-colon (;) or hash (#) is ignored by the assembler and is a note for the programmer itself.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Keyword:&lt;/strong&gt; In high-level languages, keywords are reserved words (like if, for, while). In assembly, the idea of keywords basically overlaps with mnemonics and directives.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Symbol:&lt;/strong&gt; Everything is a symbol. Ever label is a symbol, but every symbol need not to be a label.&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Doug Lea's Memory Model</title><link>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/dma/doug-leas-memory-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/dma/doug-leas-memory-model/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;11, 15, 17 September 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;!-- raw HTML omitted --&gt;</description></item><item><title>Magic Verification</title><link>https://hi-anki.github.io/gitbook/docs/elf-parser-project/magic-verification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/elf-parser-project/magic-verification/</guid><description>
&lt;h2&gt;Problem Statement&lt;span class="hx:absolute hx:-mt-20" id="problem-statement"&gt;&lt;/span&gt;
&lt;a href="#problem-statement" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The first step in parsing an ELF is to verify if the file passed in the argument is an ELF or not.&lt;/p&gt;
&lt;p&gt;This is done by verifying the magic bytes (or numbers) present as the first thing in all kinds of binary files.&lt;/p&gt;
&lt;h2&gt;What are magic numbers?&lt;span class="hx:absolute hx:-mt-20" id="what-are-magic-numbers"&gt;&lt;/span&gt;
&lt;a href="#what-are-magic-numbers" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Magic numbers can take multiple forms in computer programming. In our case, it is a constant stream of characters, used to identify a file format.&lt;/p&gt;
&lt;p&gt;From the static analysis of the hello world binary, we know that file headers are the first thing in an ELF. The output for readelf started like this:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;ELF Header:
Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The first 4 hexadecimal numbers represent the magic number.&lt;/p&gt;
&lt;p&gt;But &lt;code&gt;readelf&lt;/code&gt; refers all the pairs as magic?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only the first 4 pairs of hexadecimal values form the magic number. Rest are the values in the &lt;code&gt;e_ident[]&lt;/code&gt; array, which is a part of the file headers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Remember, each pair is hexadecimal so they are 1 byte in size.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Does this magic number hold any meaning?&lt;span class="hx:absolute hx:-mt-20" id="does-this-magic-number-hold-any-meaning"&gt;&lt;/span&gt;
&lt;a href="#does-this-magic-number-hold-any-meaning" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Yes. &lt;code&gt;0x7f&lt;/code&gt; = DEL, &lt;code&gt;0x45&lt;/code&gt; = E, &lt;code&gt;0x4c&lt;/code&gt; = L and &lt;code&gt;0x46&lt;/code&gt; = F&lt;/p&gt;
&lt;h3&gt;Why `0x7f` ?&lt;span class="hx:absolute hx:-mt-20" id="why-0x7f-"&gt;&lt;/span&gt;
&lt;a href="#why-0x7f-" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A random text file may start with &lt;code&gt;45 4c 46&lt;/code&gt; bytes, but it is very unlikely for a text file to start with &lt;code&gt;7f 45 4c 46&lt;/code&gt; . That is why a random character is used.&lt;/p&gt;
&lt;h2&gt;Reading The Magic&lt;span class="hx:absolute hx:-mt-20" id="reading-the-magic"&gt;&lt;/span&gt;
&lt;a href="#reading-the-magic" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To mark a file as a valid ELF, the first 4 bytes must be &lt;code&gt;0x7F 0x45 0x4C 0x46&lt;/code&gt; . We will use &lt;code&gt;fread()&lt;/code&gt; to read those bytes.&lt;/p&gt;
&lt;p&gt;It is provided by the C standard I/O library (&lt;code&gt;stdio.h&lt;/code&gt;). The signature of &lt;code&gt;fread()&lt;/code&gt; is as follows.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// General Signature
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;fread&lt;/span&gt;(dest_ptr, size_each_element, n_ele, file_ptr);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;fread&lt;/code&gt; requires 4 arguments.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dest_ptr&lt;/code&gt; is where the raw bytes would be stored after extraction.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n_elements&lt;/code&gt; is the total number of elements we are extracting.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size_each_element&lt;/code&gt; is self-explanatory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file_ptr&lt;/code&gt; has access to the file&amp;rsquo;s raw bytes. This is how we are going to read the file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In simple words, &lt;em&gt;read N number of elements, each of size S, from the file pointer and store them in the destination pointer.&lt;/em&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// From Manual Entry
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fread&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; ptr[&lt;span style="color:#66d9ef"&gt;restrict&lt;/span&gt; .size &lt;span style="color:#f92672"&gt;*&lt;/span&gt; .nmemb], &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; size, &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; nmemb, FILE &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;restrict&lt;/span&gt; stream);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Lets discuss what &lt;code&gt;void ptr[restrict .size * .nmemb]&lt;/code&gt; means.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nmemb&lt;/code&gt; represents number of memory blocks to read.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt; represents the size of each memory block.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void *restrict stream&lt;/code&gt; means the pointer can point to data of any type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;restrict&lt;/code&gt; is a type qualifier introduced in the C99 standard. It tells the compiler that, &lt;em&gt;for the lifetime of this pointer, no other pointer will be used to access the object it points to.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ptr[restrict .size * .nmemb]&lt;/code&gt; indicates that &lt;code&gt;ptr&lt;/code&gt; is a pointer to a block of memory with a minimum size of &lt;code&gt;size * nmemb&lt;/code&gt; bytes.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Those who have taken C tutorials can spot something here. So, its worth addressing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Depending on the time you have watched the &lt;strong&gt;File I/O tutorials&lt;/strong&gt;, you may have seen a variety of functions to read a file. They may include &lt;code&gt;fscanf&lt;/code&gt;, &lt;code&gt;fgets&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;Those tutorials focused on text files. We are dealing with binary files, which need different handling.&lt;/li&gt;
&lt;li&gt;If you are known to assembly, you know that memory is a flat-array of bytes at low level. We have to interpret those bytes the right way to obtain the intended meaning. Either we do it ourselves or outsource it to some API. &lt;code&gt;fread&lt;/code&gt; is that API.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Return Value&lt;span class="hx:absolute hx:-mt-20" id="return-value"&gt;&lt;/span&gt;
&lt;a href="#return-value" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If successful, it returns the number of items read. And this forms the basis for error handling.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;If you wonder why &lt;code&gt;fread&lt;/code&gt; needs size and count of entries, instead of just byte count, remember, C is statically-typed and &lt;code&gt;fread&lt;/code&gt; allows you to abstract away the complexity of parsing and interpreting raw bytes according to some data type. If you want to deal with raw bytes directly, use the UNIX system call API &lt;code&gt;read&lt;/code&gt; .&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;If you are still unsure about it, and want to dive deep into it, I&amp;rsquo;ve written a short detour&lt;/em&gt; &lt;a href="https://ankuragrawal.gitbook.io/home/~/revisions/lowdzHlD13Xe1P8sFUmd/low-level-detours/why-c-is-statically-typed"target="_blank" rel="noopener"&gt;&lt;em&gt;here&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;For more information on &lt;code&gt;fread&lt;/code&gt;, visit its man page.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;man fread&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://man7.org/linux/man-pages/man3/fread.3.html"target="_blank" rel="noopener"&gt;man7 online&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Verifying The Magic Bytes&lt;span class="hx:absolute hx:-mt-20" id="verifying-the-magic-bytes"&gt;&lt;/span&gt;
&lt;a href="#verifying-the-magic-bytes" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;{% code title=&amp;ldquo;parser.c&amp;rdquo; %}&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;verify_elf&lt;/span&gt;(FILE&lt;span style="color:#f92672"&gt;*&lt;/span&gt; f_obj){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;unsigned&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; magic_bytes[&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;fread&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;magic_bytes, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;, f_obj) &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fprintf&lt;/span&gt;(stderr, &lt;span style="color:#e6db74"&gt;&amp;#34;Error: `fread()`: Unable to read ELF magic bytes.&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fclose&lt;/span&gt;(f_obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (magic_bytes[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0x7f&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; magic_bytes[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;E&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; magic_bytes[&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;L&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; magic_bytes[&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;] &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;F&amp;#39;&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fprintf&lt;/span&gt;(stderr, &lt;span style="color:#e6db74"&gt;&amp;#34;Error: Unexpected magic bytes returned.&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt; Expected: `0x7F, E, L, F`&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt; Found: %02X, %02X, %02X, %02X&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, magic_bytes[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], magic_bytes[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;], magic_bytes[&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;], magic_bytes[&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fclose&lt;/span&gt;(f_obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;{% endcode %}&lt;/p&gt;
&lt;h3&gt;Why unsigned char?&lt;span class="hx:absolute hx:-mt-20" id="why-unsigned-char"&gt;&lt;/span&gt;
&lt;a href="#why-unsigned-char" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;char&lt;/code&gt; is 1-byte, so it is appropriate to store magic bytes.&lt;/p&gt;
&lt;p&gt;But &lt;code&gt;char&lt;/code&gt; can be signed (-128 to 127) or unsigned (0-255). We have to make sure that it is unsigned because the magic bytes for an ELF are unsigned.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Why `fprintf` not `printf`?&lt;span class="hx:absolute hx:-mt-20" id="why-fprintf-not-printf"&gt;&lt;/span&gt;
&lt;a href="#why-fprintf-not-printf" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Lets make it clear. C does have abstraction. But those abstractions are usually a collection of very low level stuff.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;printf&lt;/code&gt; defaults to printing at standard out (&lt;code&gt;stdout&lt;/code&gt;). &lt;code&gt;fprintf&lt;/code&gt; allows you to set the direction for the output stream. Therefore, the below two are the same.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hi&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;fprintf&lt;/span&gt;(stdout, &lt;span style="color:#e6db74"&gt;&amp;#34;Hi&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Even these are just wrapper APIs. The actual heavy lifters are &lt;code&gt;v*&lt;/code&gt; prefixed printfs. Checkout the library functions manual for &lt;code&gt;printf&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;man 3 printf&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://man7.org/linux/man-pages/man3/printf.3.html"target="_blank" rel="noopener"&gt;man7 online&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;fprintf&lt;/code&gt; lets us send error messages to &lt;code&gt;stderr&lt;/code&gt; instead of mixing them with normal output.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We are passing a reference of the &lt;code&gt;magic_number&lt;/code&gt; array as &lt;code&gt;fread&lt;/code&gt; expects a pointer.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;span class="hx:absolute hx:-mt-20" id="conclusion"&gt;&lt;/span&gt;
&lt;a href="#conclusion" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;And we have checked if the file passed to our program is an ELF or not.&lt;/p&gt;
&lt;p&gt;Next we will parse the file headers.&lt;/p&gt;</description></item><item><title>Virtual Memory Layout</title><link>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/virtual-memory/virtual-memory-layout/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/virtual-memory/virtual-memory-layout/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;August 12, 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Big Picture&lt;span class="hx:absolute hx:-mt-20" id="big-picture"&gt;&lt;/span&gt;
&lt;a href="#big-picture" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;High Address
Top Of Virtual Address Space
0xFFFFFFFFFFFFFFFF *-----------------------------* End Of Kernel Space ↓
| |
| Kernel Space |
| |
| Size: ~128 TiB |
| |
| Upper Half |
| |
0xFFFF800000000000 *-----------------------------* Start Of Kernel Space ↑
| |
| Unused / Guard Space |
| |
0x0000800000000000 *-----------------------------* End of User Space ↓
| |
| User Space |
| |
| Size: ~128 TiB |
| |
| Lower Half |
| |
0x0000000000400000 *-----------------------------* Start Of User Space ↑
| |
| Reserved / Unmapped |
| |
0x0000000000000000 *-----------------------------*
Bottom Of Virtual Address Space
Low Address&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;User Space Layout&lt;span class="hx:absolute hx:-mt-20" id="user-space-layout"&gt;&lt;/span&gt;
&lt;a href="#user-space-layout" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;0x0000800000000000 *-----------------------------* End of User Space ↓
| Stack (grows downward) |
*-----------------------------*
| Memory-Mapped Region |
| (shared libs, mmap, ....) |
*-----------------------------*
| Heap (grows upward) |
*-----------------------------*
| Static &amp;amp;&amp;amp; Global Variables |
| (.bss / .data) |
*-----------------------------*
| .text |
0x0000000000400000 *-----------------------------* Start Of User Space ↑&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;.data&lt;/code&gt; and &lt;code&gt;.bss&lt;/code&gt; are packed together because they are functionally the same thing, just differ in initialization.&lt;/p&gt;
&lt;h3&gt;What are stack and heap really?&lt;span class="hx:absolute hx:-mt-20" id="what-are-stack-and-heap-really"&gt;&lt;/span&gt;
&lt;a href="#what-are-stack-and-heap-really" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In simple words, stack and heap are two approaches to manage memory. There are no specialized regions either in the physical memory which refer to stack or heap. They are just two ways to manage the same flat memory.&lt;/p&gt;
&lt;h3&gt;Why the stack grows downward?&lt;span class="hx:absolute hx:-mt-20" id="why-the-stack-grows-downward"&gt;&lt;/span&gt;
&lt;a href="#why-the-stack-grows-downward" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When we learn stack as a data structure, we imagine it as a stack of plates. A stack of anything starts from bottom and approaches sky as the top.&lt;/p&gt;
&lt;p&gt;But, when you learn assembly, you find that stack grows downward. And you keep scratching your head. I was no different.&lt;/p&gt;
&lt;p&gt;There is a simple solution to this problem. &lt;strong&gt;Reverse the address space.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Right now we are looking from top to bottom or higher addresses to lower addresses.&lt;/li&gt;
&lt;li&gt;Just flip the structure and you get an upward growing stack.&lt;/li&gt;
&lt;li&gt;Just remember that this doesn&amp;rsquo;t change the address management of stack. A push would still reduce the memory address mathematically and a pop would increase it. But, at least it solves the mental overhead of imagining stack growing downwards.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Apart from this, there is a genuine question that why stack was put at the top of the user space. The reason that they shouldn&amp;rsquo;t collide is not applicable as the memory-mapped region will always come in-between.&lt;/p&gt;
&lt;p&gt;As of now, I don&amp;rsquo;t have any answer, but if I find anything interesting, I will update this block.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Why the stack is fast and heap is slow?&lt;span class="hx:absolute hx:-mt-20" id="why-the-stack-is-fast-and-heap-is-slow"&gt;&lt;/span&gt;
&lt;a href="#why-the-stack-is-fast-and-heap-is-slow" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This question is not completely answerable as it is based on comparison.&lt;/p&gt;
&lt;p&gt;We can explore why stack is fast because we are familiar with it. But we don&amp;rsquo;t know what heap is.&lt;/p&gt;
&lt;p&gt;Although we know why stack is fast because it is based on sequential allocation. But what makes heap slow is not known.&lt;/p&gt;
&lt;p&gt;When we will explore dynamic memory allocation, it will become clear why stack is fast and heap is slow.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Until then, we are now prepared to understand how all of this fits in the grand scheme of memory management with MMU.&lt;/p&gt;</description></item><item><title>What Powers Debuggers? — 2</title><link>https://hi-anki.github.io/gitbook/docs/debugging/wpd-2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/debugging/wpd-2/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;23 September 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Premise&lt;span class="hx:absolute hx:-mt-20" id="premise"&gt;&lt;/span&gt;
&lt;a href="#premise" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We have a process that we want to debug/trace. We call it debugee/tracee process.&lt;/p&gt;
&lt;p&gt;To debug a process, we have a program called debugger, which itself becomes a process upon running, which is called, debugger/tracer process.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: We are going to stick to the debugger/debugee terminology.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Since we have to bypass a lot of restrictions to do debugging, all the requests of the debugger process are mediated by the kernel. The arm of the kernel that does all of it is called &lt;code&gt;ptrace&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ptrace&lt;/code&gt; is a syscall interface that lets one process (the debugger) observe and control another process (the debugee).&lt;/p&gt;
&lt;h2&gt;The Mental Model&lt;span class="hx:absolute hx:-mt-20" id="the-mental-model"&gt;&lt;/span&gt;
&lt;a href="#the-mental-model" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are 4 steps in the debugging model.&lt;/p&gt;
&lt;h3&gt;1. Triggering Event&lt;span class="hx:absolute hx:-mt-20" id="1-triggering-event"&gt;&lt;/span&gt;
&lt;a href="#1-triggering-event" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The debugee is running fine and there is no need for a debugger to intervene. But for a debugger to intervene in a process, it needs to stop the process. To stop the debugee, the debugger needs a triggering event.&lt;/p&gt;
&lt;p&gt;Triggering event is anything that signals the kernel to halt the execution of the debugee process.&lt;/p&gt;
&lt;p&gt;So far, we have read about breakpoint &lt;code&gt;#BP&lt;/code&gt; and single-step &lt;code&gt;#DB&lt;/code&gt;. But there is more to it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For example: syscall entry/exit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When the kernel detects that event, it suspends the debugee process.&lt;/p&gt;
&lt;h3&gt;2. Notification To The Debugger&lt;span class="hx:absolute hx:-mt-20" id="2-notification-to-the-debugger"&gt;&lt;/span&gt;
&lt;a href="#2-notification-to-the-debugger" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When the debugee is suspended, the debugger is notified about the activation of the event that the debugger told the kernel to stop at.&lt;/p&gt;
&lt;p&gt;The debugger process is notified via &lt;code&gt;waitpid()&lt;/code&gt;/&lt;code&gt;waitid()&lt;/code&gt; that the debugee has stopped and the reason behind it.&lt;/p&gt;
&lt;h3&gt;3. Transfer Of Control&lt;span class="hx:absolute hx:-mt-20" id="3-transfer-of-control"&gt;&lt;/span&gt;
&lt;a href="#3-transfer-of-control" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;After notifying the debugger, the debugger process gains the ability to inspect/modify the state of the debugee process via &lt;code&gt;ptrace&lt;/code&gt;. This state is often referred to as &lt;strong&gt;process/execution context&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Everything is mediated by the kernel.&lt;/p&gt;
&lt;h3&gt;4. Resuming The Debugee Process&lt;span class="hx:absolute hx:-mt-20" id="4-resuming-the-debugee-process"&gt;&lt;/span&gt;
&lt;a href="#4-resuming-the-debugee-process" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When the debugger process is done with its work, it can notify the kernel about resuming the debugee process.&lt;/p&gt;
&lt;p&gt;The debugee is now resumed by the kernel until another event triggers.&lt;/p&gt;
&lt;h3&gt;Where do signals fit?&lt;span class="hx:absolute hx:-mt-20" id="where-do-signals-fit"&gt;&lt;/span&gt;
&lt;a href="#where-do-signals-fit" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Suppose our process accessed an invalid memory location. A page fault occurs as there is no page mapping between the physical and virtual memory. That&amp;rsquo;s basically a segfault and the kernel has to send the process a &lt;code&gt;SIGSEGV&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When there is no debugger, the kernel directly sends the &lt;code&gt;SIGSEGV&lt;/code&gt; signal to the process and the process handles it.&lt;/p&gt;
&lt;p&gt;When there is a debugger process waiting for a segfault event, the debugee is suspended when it occurs and the debugger is notified using &lt;code&gt;waitpid()/waitid()&lt;/code&gt; that &amp;ldquo;the debugee has been suspended because this event occurred&amp;rdquo;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Since the debugee is suspended, it can&amp;rsquo;t receive the signal until the debugger resumes it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Process Context&lt;span class="hx:absolute hx:-mt-20" id="process-context"&gt;&lt;/span&gt;
&lt;a href="#process-context" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Process context refers to the state of a process at any given instance. Process context includes multiple things, some important ones are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;General purpose registers&lt;/li&gt;
&lt;li&gt;Flags register&lt;/li&gt;
&lt;li&gt;Segment registers (read-only)&lt;/li&gt;
&lt;li&gt;Floating point registers (SSE/AVX)&lt;/li&gt;
&lt;li&gt;Virtual address space (.text/.data/.bss/heap/stack)&lt;/li&gt;
&lt;li&gt;Signals&lt;/li&gt;
&lt;li&gt;Process metadata (pid, ppid, uid, gid)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;What can a debugger do?&lt;span class="hx:absolute hx:-mt-20" id="what-can-a-debugger-do"&gt;&lt;/span&gt;
&lt;a href="#what-can-a-debugger-do" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Based on the process context, a debugger can inspect, modify, and control the execution flow of the debugee.&lt;/p&gt;
&lt;p&gt;A debugger can do a lot of things, most of which might be beyond the scope of this exploration, but here are the most important ones, which a debugger does almost all the times.&lt;/p&gt;
&lt;h3&gt;Inspecting the state of registers&lt;span class="hx:absolute hx:-mt-20" id="inspecting-the-state-of-registers"&gt;&lt;/span&gt;
&lt;a href="#inspecting-the-state-of-registers" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;General purpose registers can reveal the state of current execution context.&lt;/p&gt;
&lt;p&gt;Calling convention like System V ABI on Linux 64-bit have syscall convention which mandates certain registers to be used in a specific way for cross-compatibility.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inspecting &lt;code&gt;rax&lt;/code&gt; for example can tell us which syscall the debugee is preparing for.&lt;/li&gt;
&lt;li&gt;Inspecting &lt;code&gt;rsi&lt;/code&gt;, &lt;code&gt;rdi&lt;/code&gt; can tell us what are the arguments to that syscall.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inspecting &lt;code&gt;rip&lt;/code&gt; can inform about the next instruction.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rsp&lt;/code&gt; can be used to inspect local variables and overall stack state.&lt;/p&gt;
&lt;h3&gt;Modifying registers&lt;span class="hx:absolute hx:-mt-20" id="modifying-registers"&gt;&lt;/span&gt;
&lt;a href="#modifying-registers" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Flags register is great to inspect the result of various computations like &lt;code&gt;OF ZF SF PF&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;We also have trap flag on 8th-bit which can be modified to raise debug exception &lt;code&gt;#DB&lt;/code&gt; after each instruction.&lt;/p&gt;
&lt;h3&gt;Execution Control&lt;span class="hx:absolute hx:-mt-20" id="execution-control"&gt;&lt;/span&gt;
&lt;a href="#execution-control" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A debugger needs access to the debugee’s memory to set breakpoints and modify instructions.&lt;/p&gt;
&lt;p&gt;This temporarily bypasses normal memory protections, but all access is mediated by the kernel via ptrace.&lt;/p&gt;
&lt;h3&gt;Event Monitoring&lt;span class="hx:absolute hx:-mt-20" id="event-monitoring"&gt;&lt;/span&gt;
&lt;a href="#event-monitoring" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Breakpoints and Debug exceptions are just two events. There are multiple events like fork, execve, syscall entry/exit, which the debugger can monitor.&lt;/p&gt;
&lt;p&gt;The kernel mediates all reads/writes, so the debugger cannot bypass protections directly.&lt;/p&gt;
&lt;p&gt;This event monitoring is what tools like &lt;code&gt;strace&lt;/code&gt; do.&lt;/p&gt;
&lt;h2&gt;Rules For Debugging&lt;span class="hx:absolute hx:-mt-20" id="rules-for-debugging"&gt;&lt;/span&gt;
&lt;a href="#rules-for-debugging" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A process can deny to be debugged.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Only the processes with the same user ID (&lt;code&gt;UID&lt;/code&gt;) can trace each other.&lt;/strong&gt; If you try to attach to a process owned by another user, the kernel denies it.&lt;/p&gt;
&lt;p&gt;Root can trace any process.&lt;/p&gt;
&lt;p&gt;Modern Linux restricts tracing even further using the Linux Security Module &lt;code&gt;YAMA&lt;/code&gt;: &lt;code&gt;/proc/sys/kernel/yama/ptrace_scope&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; → trace anything allowed by UID.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt; → only direct parent can trace.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt; → no tracing allowed (even by parent).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This prevents arbitrary processes from attaching to random programs.&lt;/p&gt;
&lt;p&gt;A child is always traceable by its parent. This is why we usually use gdb to execute the program, so that gdb can have the privilege to do debugging.&lt;/p&gt;
&lt;p&gt;A process can voluntarily call &lt;code&gt;ptrace(PTRACE_TRACEME)&lt;/code&gt; to allow its parent to debug it. If it doesn’t, a child cannot be traced unless &lt;code&gt;PTRACE_ATTACH&lt;/code&gt; is used by a permitted debugger (and the kernel verifies the security policies).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;These are some of the rules that protects &lt;code&gt;ptrace&lt;/code&gt; from abuse.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;span class="hx:absolute hx:-mt-20" id="conclusion"&gt;&lt;/span&gt;
&lt;a href="#conclusion" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is what that enables debugging.&lt;/p&gt;
&lt;p&gt;Now we are primed to understand how the GNU Debugger works.&lt;/p&gt;</description></item><item><title>Address Translation</title><link>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/virtual-memory/address-translation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/virtual-memory/address-translation/</guid><description>
&lt;p&gt;This is the exact moment we were preparing for.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;August 12, 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;What Is MMU?&lt;span class="hx:absolute hx:-mt-20" id="what-is-mmu"&gt;&lt;/span&gt;
&lt;a href="#what-is-mmu" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;MMU stands for memory management unit, which is a hardware component in the CPU, that sits between.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;core&lt;/strong&gt; executing instructions (which always works in virtual addresses), and&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;memory bus&lt;/strong&gt; (which only understands physical addresses).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Its entire reason to exist is to intercept every memory access and translate it from a virtual address to a physical address in real time, applying protection checks along the way.&lt;/p&gt;
&lt;p&gt;So, MMU exists for one purpose, &lt;strong&gt;address translation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Before we hop on address translation, we have to understand translation lookaside buffer.&lt;/p&gt;
&lt;h2&gt;Translation Lookaside Buffer (TLB)&lt;span class="hx:absolute hx:-mt-20" id="translation-lookaside-buffer-tlb"&gt;&lt;/span&gt;
&lt;a href="#translation-lookaside-buffer-tlb" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Translation Lookaside Buffer (TLB) is a specialized cache used by the CPU to speed up the process of translating virtual memory addresses to physical memory addresses.&lt;/p&gt;
&lt;p&gt;It stores recently used address translations, allowing for quicker access if the same translation is needed again. Basically, it&amp;rsquo;s a cache for page table entries.&lt;/p&gt;
&lt;p&gt;Its primary function is to reduce the time it takes to access memory. A full 4-level page table walk would be very slow and come costly for every memory access.&lt;/p&gt;
&lt;p&gt;For the time being, there is no need to dive further into it.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Lets understand address translation now.&lt;/p&gt;
&lt;h2&gt;Address Translation&lt;span class="hx:absolute hx:-mt-20" id="address-translation"&gt;&lt;/span&gt;
&lt;a href="#address-translation" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This process can be divided into an if-else chart.&lt;/p&gt;
&lt;p&gt;When MMU receives a virtual address, first it checks the translation lookaside buffer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If it finds an entry which maps the input with a physical address, it is considered &lt;strong&gt;TLB Hit&lt;/strong&gt; and translation is done instantly.&lt;/li&gt;
&lt;li&gt;If no mapping is found, it is a &lt;strong&gt;TLB Miss.&lt;/strong&gt; The CPU has to do a page walk to find the mapping and possibly cache it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now the thing we were waiting for, page walk.&lt;/p&gt;
&lt;h3&gt;Page Walk&lt;span class="hx:absolute hx:-mt-20" id="page-walk"&gt;&lt;/span&gt;
&lt;a href="#page-walk" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;There is a special purpose register called &lt;code&gt;CR3&lt;/code&gt;. This register keeps the base address of PML4 table.&lt;/p&gt;
&lt;p&gt;The OS loads CR3 with the &lt;strong&gt;physical address&lt;/strong&gt; of the PML4 for that process. When the MMU needs to translate a virtual address, it reads &lt;code&gt;CR3&lt;/code&gt; and gets the PML4 base physical address.&lt;/p&gt;
&lt;p&gt;Side by side, the virtual address is parsed to obtain the first 9-bits (from MSB) which represent the PML4 entry this virtual address belongs to.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The value obtained from these 9-bits is added to the base address of PML4 and the desired entry within the PML4 table is found.&lt;/li&gt;
&lt;li&gt;The desired entry is pointer to the PDPT table. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we are at the base address of PDPT table.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The next 9-bits of the virtual address are parsed to obtain the right index/offset in the PDPT table.&lt;/li&gt;
&lt;li&gt;This value is added to the base address and we are at the correct entry now. This entry is a pointer to PDIT table.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we are at the PDIT table.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The next 9-bits of the virtual address are parsed to obtain the right index/offset in the PDIT table.&lt;/li&gt;
&lt;li&gt;The value is added to the base address and we are at the correct entry now. This entry is a pointer to the plain page table this address belongs to.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we are at the plain page table.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The next 9-bits of the virtual address are parsed to obtain the right index/offset in the page table.&lt;/li&gt;
&lt;li&gt;The value is added to the base address and we are at the correct entry now. This entry is the address to the actual physical frame this address is mapped to.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The PTE entry is parsed and the bits 51 to 12 are extracted, which forms the page frame number.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The page frame number is the base address of the 4 KiB physical frame.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, the last 12-bits of the virtual address are parsed to obtain the page offset.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The page offset is the actual byte in the group of 4096 bytes (4 KiB frame) that the virtual address is mapped to.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The PFN and page offset are added to form the final &lt;strong&gt;physical address&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;And the page walk is done.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;After a successful page walk, the translation lookaside buffer is updated to contain this mapping for faster lookup.&lt;/p&gt;
&lt;p&gt;What if the page walk failed?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A page fault;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>Instructions</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/instructions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/instructions/</guid><description>
&lt;p&gt;An instruction is an atomic operation that tells the CPU what to do.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-asm" data-lang="asm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mnemonic&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;destination&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;source&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Mnemonic is the actual CPU operation. Destination and source are the operands it is generally performed on.&lt;/p&gt;
&lt;p&gt;Some mnemonics take one operand only. So, this is not strict.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-asm" data-lang="asm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;rax&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;move 1 into &lt;code&gt;rax&lt;/code&gt; register.&lt;/li&gt;
&lt;li&gt;It also aligns with the mathematical assignment of values, &lt;code&gt;a = 4&lt;/code&gt;, assign 4 to a.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Common Operations&lt;span class="hx:absolute hx:-mt-20" id="common-operations"&gt;&lt;/span&gt;
&lt;a href="#common-operations" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are hundreds of instructions in assembly. But the core ones are as follows.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2&gt;CPU Flags&lt;span class="hx:absolute hx:-mt-20" id="cpu-flags"&gt;&lt;/span&gt;
&lt;a href="#cpu-flags" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;CPU flags are binary indicators (either 0 or 1) that reflect the outcome of certain operations or hold special status information. They&amp;rsquo;re part of the processor&amp;rsquo;s status register, which is used by instructions like &lt;code&gt;cmp&lt;/code&gt; (compare) and &lt;code&gt;test&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When an instruction modifies the flags, other instructions can check the state of these flags to make decisions, like jumping to different parts of code based on conditions.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Flag&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;ZF&lt;/strong&gt; (Zero Flag)&lt;/td&gt;
&lt;td&gt;Set to 1 if the result of an operation is zero; otherwise, it’s 0.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;SF&lt;/strong&gt; (Sign Flag)&lt;/td&gt;
&lt;td&gt;Set to 1 if the result of an operation is negative (the most significant bit of the result is 1).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;There are other flags as well.&lt;/p&gt;
&lt;h2&gt;Memory/Pointer Dereferencing&lt;span class="hx:absolute hx:-mt-20" id="memorypointer-dereferencing"&gt;&lt;/span&gt;
&lt;a href="#memorypointer-dereferencing" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It refers to obtaining the actual value stored at a memory location.&lt;/p&gt;
&lt;p&gt;It is done by &lt;code&gt;[]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, if a memory location like 100000 stores a number, such as 45, dereferencing the memory location would give 45, like this, &lt;code&gt;[100000] = 45&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Common Instructions&lt;span class="hx:absolute hx:-mt-20" id="common-instructions"&gt;&lt;/span&gt;
&lt;a href="#common-instructions" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;&lt;code&gt;mov&lt;/code&gt;&lt;span class="hx:absolute hx:-mt-20" id="mov"&gt;&lt;/span&gt;
&lt;a href="#mov" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In simple words, it is assignment operator (&lt;code&gt;=&lt;/code&gt;) in assembly.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-asm" data-lang="asm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;destination&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;source&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Mathematically, it is &lt;code&gt;destination = source&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Most commonly, these operands are registers like rax, rsi etc&amp;hellip;. But there are other options as well.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;mov rax, rsi&lt;/code&gt; means &lt;code&gt;rsi = rax&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mov rax, [rsi]&lt;/code&gt;: dereference the value in &lt;code&gt;rsi&lt;/code&gt; and put it into &lt;code&gt;rax&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mov [rsi], rax&lt;/code&gt;: dereference the value in &lt;code&gt;rsi&lt;/code&gt; and store what&amp;rsquo;s inside &lt;code&gt;rax&lt;/code&gt; in there.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note: &lt;code&gt;mov&lt;/code&gt; copy data from one place to other. Its not &amp;lsquo;move&amp;rsquo; in literal sense.&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;cmp&lt;/code&gt;&lt;span class="hx:absolute hx:-mt-20" id="cmp"&gt;&lt;/span&gt;
&lt;a href="#cmp" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;It compares two values by subtracting them, later deciding what might be the case.&lt;/p&gt;
&lt;p&gt;In C, we can do something like this: &lt;code&gt;a = (4 &amp;gt; 2)&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; will contain the result. However, that&amp;rsquo;s not the case here.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-asm" data-lang="asm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;cmp&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;a&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;which is evaluated as &lt;code&gt;a - b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When we do &lt;code&gt;cmp 4, 2&lt;/code&gt;, &lt;code&gt;cmp&lt;/code&gt; does &lt;code&gt;4-2&lt;/code&gt;, and the result is 2. This result is not stored. Instead, certain CPU flags are changed based on the result. Jump statements use these flags to decide what to do next.&lt;/p&gt;
&lt;h3&gt;Jump Statements&lt;span class="hx:absolute hx:-mt-20" id="jump-statements"&gt;&lt;/span&gt;
&lt;a href="#jump-statements" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;They change the flow of execution. Instead of executing the next line, they send the CPU to another part of the code based on some condition. This is what &lt;code&gt;if-else&lt;/code&gt; stands on.&lt;/p&gt;
&lt;p&gt;There are two types of jumps, conditional and unconditional.&lt;/p&gt;
&lt;p&gt;An unconditional jump always goes to some label, no matter what. &lt;code&gt;jmp some_label&lt;/code&gt; is an unconditional jump.&lt;/p&gt;
&lt;p&gt;A conditional jump is based on the flags set by &lt;code&gt;cmp&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Type Specifier&lt;span class="hx:absolute hx:-mt-20" id="type-specifier"&gt;&lt;/span&gt;
&lt;a href="#type-specifier" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Type specifiers are used to explicitly tell the assembler what size of data we&amp;rsquo;re working with while accessing memory.&lt;/p&gt;
&lt;p&gt;They ensure that the assembler knows how much data to read or write.&lt;/p&gt;
&lt;p&gt;Common type specifiers include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;byte ptr&lt;/code&gt;: load only 1-byte from the memory address.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;word ptr&lt;/code&gt;: load a word or 2-bytes (in x86_64) from the memory address.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dword ptr&lt;/code&gt;: load a double word or 4-bytes from the memory address.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;qword ptr&lt;/code&gt;: load a quad word or 8-bytes from the memory address.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;They are particularly important (actually necessary) when working with memory operands and dereferencing pointers because x86_64 architecture can handle different size of data (like bytes, words, double words, etc).&lt;/p&gt;
&lt;p&gt;Many assemblers offer separate mnemonics for special data movements, like GAS.&lt;/p&gt;</description></item><item><title>Lets Get Chunky</title><link>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/dma/lets-get-chunky/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/dma/lets-get-chunky/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;15 September 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In brief, the whole story of dlmalloc revolves around chunks.&lt;/p&gt;
&lt;h2&gt;Clarity&lt;span class="hx:absolute hx:-mt-20" id="clarity"&gt;&lt;/span&gt;
&lt;a href="#clarity" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;DMA = &amp;ldquo;dynamic memory allocation&amp;rdquo;&lt;/p&gt;
&lt;p&gt;process = &amp;ldquo;an executing binary&amp;rdquo;&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Chunkification&amp;rdquo; = not an actual term but I like to use it.&lt;/p&gt;
&lt;h2&gt;How chunks are formed?&lt;span class="hx:absolute hx:-mt-20" id="how-chunks-are-formed"&gt;&lt;/span&gt;
&lt;a href="#how-chunks-are-formed" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When a process start to exist, it rarely requires DMA.&lt;/p&gt;
&lt;p&gt;When &lt;code&gt;malloc&lt;/code&gt; is called for the first time, the idea of DMA starts to exist &lt;strong&gt;for that process&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;We know that a pointer in heap is returned for each &lt;code&gt;malloc&lt;/code&gt; request. The kernel releases memory in pages, the allocator processes them as &lt;em&gt;chunks&lt;/em&gt; and we get our requested bytes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The smallest page is 1 page, assuming 4 KiB of size, the allocator would receive at least 4 KiB of memory from the kernel at minimum, which is 4096 bytes.&lt;/li&gt;
&lt;li&gt;This 4096 bytes is our &lt;strong&gt;arena&lt;/strong&gt;, the total unallocated pool of memory, that the allocator is now going to manage.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Note: 4096 bytes is a lot of memory so the allocator doesn&amp;rsquo;t need to request the kernel every time there is a malloc request. Only when the arena is not sufficient to support allocation is when the allocator reaches the kernel.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s take an example and visualize the theory.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Visualizing Chunkification&lt;span class="hx:absolute hx:-mt-20" id="visualizing-chunkification"&gt;&lt;/span&gt;
&lt;a href="#visualizing-chunkification" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note 1: We are going to use ASCII Art to represent blocks in heap and 4096 bytes means 4096 blocks, which is too much and maybe an overkill. Therefore, for this experimentation, we are going to assume that the least the kernel can offer is &amp;ldquo;100 bytes&amp;rdquo;, not 4096 bytes. This way, we can control the influx of information without losing context.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note 2: This is just a simplified version of something that only exist in theory and there is no simple way to visualize it. The actual ground-level reality might differ because of &amp;ldquo;various rules&amp;rdquo;. But the idea always remains like this. &amp;ldquo;We are not studying the wrong way, we are studying the way it becomes easy to comprehend and sets up a foundation which can handle chaos later, much better.&amp;rdquo;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;The Playground&lt;span class="hx:absolute hx:-mt-20" id="the-playground"&gt;&lt;/span&gt;
&lt;a href="#the-playground" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is how our playground looks like.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
1 2 3 4 5 6 7 8 9 10
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
11 12 13 14 15 16 17 18 19 20
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
21 22 23 24 25 26 27 28 29 30
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
31 32 33 34 35 36 37 38 39 40
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
41 42 43 44 45 46 47 48 49 50
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
51 52 53 54 55 56 57 58 59 60
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
61 62 63 64 65 66 67 68 69 70
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
71 72 73 74 75 76 77 78 79 80
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
81 82 83 84 85 86 87 88 89 90
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
91 92 93 94 95 96 97 98 99 100&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I have used box-drawing characters to create this playground. You can check them out on &lt;a href="https://en.wikipedia.org/wiki/Box-drawing_characters"target="_blank" rel="noopener"&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Example 1&lt;span class="hx:absolute hx:-mt-20" id="example-1"&gt;&lt;/span&gt;
&lt;a href="#example-1" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Suppose the process requests dynamic memory like this:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;p = malloc(20);
q = malloc(10);
r = malloc(15);
s = malloc(18);
t = malloc(32);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The first request is for 20 bytes and the allocator asks the kernel to release memory and it gets a total of 100 bytes. The &lt;strong&gt;arena&lt;/strong&gt; is established now.&lt;/p&gt;
&lt;p&gt;The allocator carves a chunk of 20 bytes and returns a pointer to it to the process. &lt;strong&gt;The first in-use chunk&lt;/strong&gt; came into existence.&lt;/p&gt;
&lt;p&gt;Following the remaining four requests, a total of 95 bytes is allocated, which is shared by &lt;strong&gt;5&lt;/strong&gt; i&lt;strong&gt;n-use chunks&lt;/strong&gt; and 5 bytes of unallocated/free memory.&lt;/p&gt;
&lt;p&gt;This is how it will look in our heap art:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| p. | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
1 2 3 4 5 6 7 8 9 10
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | .p |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
11 12 13 14 15 16 17 18 19 20
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| q. | | | | | | | | | .q |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
21 22 23 24 25 26 27 28 29 30
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| r. | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
31 32 33 34 35 36 37 38 39 40
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | .r | s. | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
41 42 43 44 45 46 47 48 49 50
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
51 52 53 54 55 56 57 58 59 60
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | .s | t. | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
61 62 63 64 65 66 67 68 69 70
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
71 72 73 74 75 76 77 78 79 80
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
81 82 83 84 85 86 87 88 89 90
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | .t | // | // | // | // | // |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
91 92 93 94 95 96 97 98 99 100&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Unallocated and free bytes are represented using &lt;code&gt;//&lt;/code&gt; and all the blocks between &lt;code&gt;p. to .p&lt;/code&gt; belong to one chunk which is pointed by &lt;code&gt;p&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now the process is coming to an end and we are freeing every allocation. &lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;free(20); free(10); free(15); free(28); free(32);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;and the process exited.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this scenario, there were no free chunks and honestly, there was no need as well.&lt;/p&gt;
&lt;p&gt;This example was pretty straightforward and had no space for the real chaos. So, let&amp;rsquo;s take another example which is slightly more real.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Example 2&lt;span class="hx:absolute hx:-mt-20" id="example-2"&gt;&lt;/span&gt;
&lt;a href="#example-2" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This time we will free memory in-between.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;p = malloc(10);
q = malloc(20);
free(10);
r = malloc(30);
free(20);
s = malloc(32);
t = malloc(26);
u = malloc(12);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The total allocation size is 118 bytes but we will not need anything beyond 100 bytes as memory is being freed in the middle.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| p. | | | | | | | | | .p |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
1 2 3 4 5 6 7 8 9 10
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| q. | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
11 12 13 14 15 16 17 18 19 20
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | .q |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
21 22 23 24 25 26 27 28 29 30
.
.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we have to stop as there is a free instruction. On &lt;code&gt;free(p)&lt;/code&gt; , the state of memory becomes this:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| // | // | // | // | // | // | // | // | // | // |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
1 2 3 4 5 6 7 8 9 10
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| q. | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
11 12 13 14 15 16 17 18 19 20
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | .q |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
21 22 23 24 25 26 27 28 29 30
.
.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;And that&amp;rsquo;s how the first &lt;strong&gt;free chunk&lt;/strong&gt; comes into existence. This free chunk is sized 10 bytes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next comes &lt;code&gt;r&lt;/code&gt;.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| // | // | // | // | // | // | // | // | // | // |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
1 2 3 4 5 6 7 8 9 10
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| q. | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
11 12 13 14 15 16 17 18 19 20
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | .q |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
21 22 23 24 25 26 27 28 29 30
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| r. | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
31 32 33 34 35 36 37 38 39 40
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
41 42 43 44 45 46 47 48 49 50
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | .r |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
51 52 53 54 55 56 57 58 59 60
.
.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After &lt;code&gt;free(q)&lt;/code&gt; , the state of memory becomes this:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| // | // | // | // | // | // | // | // | // | // |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
1 2 3 4 5 6 7 8 9 10
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| // | // | // | // | // | // | // | // | // | // |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
11 12 13 14 15 16 17 18 19 20
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| // | // | // | // | // | // | // | // | // | // |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
21 22 23 24 25 26 27 28 29 30
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| r. | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
31 32 33 34 35 36 37 38 39 40
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
41 42 43 44 45 46 47 48 49 50
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | .r |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
51 52 53 54 55 56 57 58 59 60
.
.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We already had a free chunk of &lt;code&gt;10&lt;/code&gt; bytes and now we have another &lt;code&gt;20&lt;/code&gt; bytes. Is there any point in keeping these chunks different? Can we bring them together, like collapse them into one?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The rule is simple, allocated chunks can be adjacent to each other, but a free chunk is always surrounded by in-use chunks. So, when an in-use chunk adjacent to a free chunk is freed, the 2 free chunks are &lt;strong&gt;coalesced&lt;/strong&gt; to form one single chunk. &lt;/li&gt;
&lt;li&gt;Now we have one free chunk of size 30 bytes and one in-use chunk of 30 bytes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next comes &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We already had a free chunk but that free chunk is sized 30 bytes and we need 32.&lt;/li&gt;
&lt;li&gt;So we have to allocate after &lt;code&gt;r&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| // | // | // | // | // | // | // | // | // | // |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
1 2 3 4 5 6 7 8 9 10
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| // | // | // | // | // | // | // | // | // | // |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
11 12 13 14 15 16 17 18 19 20
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| // | // | // | // | // | // | // | // | // | // |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
21 22 23 24 25 26 27 28 29 30
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| r. | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
31 32 33 34 35 36 37 38 39 40
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
41 42 43 44 45 46 47 48 49 50
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | .r |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
51 52 53 54 55 56 57 58 59 60
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| s. | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
61 62 63 64 65 66 67 68 69 70
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
71 72 73 74 75 76 77 78 79 80
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
81 82 83 84 85 86 87 88 89 90
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | .s | // | // | // | // | // | // | // | // |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
91 92 93 94 95 96 97 98 99 100&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next we have &lt;code&gt;malloc(26)&lt;/code&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The memory after &lt;code&gt;s&lt;/code&gt; is insufficient so we have to request the kernel to allocated more memory.&lt;/li&gt;
&lt;li&gt;But there is a free chunk of size 30 bytes, we can use that chunk. But that chunk is more than what we need so we carve 26 bytes out of it for &lt;code&gt;t&lt;/code&gt; and leave the rest as a free chunk.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the final state of our arena would be:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| t. | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
1 2 3 4 5 6 7 8 9 10
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
11 12 13 14 15 16 17 18 19 20
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | .t | // | // | // | // |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
21 22 23 24 25 26 27 28 29 30
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| r. | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
31 32 33 34 35 36 37 38 39 40
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
41 42 43 44 45 46 47 48 49 50
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | .r |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
51 52 53 54 55 56 57 58 59 60
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| s. | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
61 62 63 64 65 66 67 68 69 70
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
71 72 73 74 75 76 77 78 79 80
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
81 82 83 84 85 86 87 88 89 90
┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| | .s | // | // | // | // | // | // | // | // |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
91 92 93 94 95 96 97 98 99 100&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We have 3 in-use chunks, 1 free chunk and 1 unallocated memory (like free chunk only).&lt;/p&gt;
&lt;p&gt;At last, we have to allocate 12 bytes for &lt;code&gt;u&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you notice, the total size of free/unallocated memory is 12 bytes, precisely what we need, but it is &amp;ldquo;&lt;strong&gt;fragmented&lt;/strong&gt;&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;This is what external fragmentation looks like. It wastes memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;External Fragmentation&lt;span class="hx:absolute hx:-mt-20" id="external-fragmentation"&gt;&lt;/span&gt;
&lt;a href="#external-fragmentation" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is a 15X16 grid, so 240 byte-addressable blocks in heap.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| .. | .. | .. | .. | .. | .. | .. | .. | | | | | .. | .. | .. | .. |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
| .. | .. | .. | .. | | | | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
| | | | | | | .. | .. | .. | .. | .. | .. | .. | .. | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
| | .. | .. | | | | | .. | .. | .. | .. | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
| | | | | | | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
| | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
| | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
| | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. | .. | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
| | | | | .. | .. | .. | .. | .. | .. | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
| | .. | .. | .. | .. | .. | .. | | | | | .. | .. | .. | .. | .. |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
| | | | | | | .. | .. | .. | .. | .. | .. | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
| | | | | | .. | .. | .. | .. | .. | .. | .. | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
| | | | | | .. | .. | .. | .. | .. | .. | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
| | .. | .. | .. | .. | .. | .. | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘
| .. | .. | .. | .. | .. | .. | | | | | | | | | | |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The dotted blocks are reserved while the rest are free. Roughly 108 bytes are lying freely. This is almost half of the total available bytes, 45%. Yet if I want 50 bytes contiguously, that&amp;rsquo;s not possible.&lt;/p&gt;
&lt;p&gt;Now scale it to 8 GiB of RAM or more. This is how memory is wasted&lt;/p&gt;
&lt;p&gt;This is external fragmentation in miniature.&lt;/p&gt;
&lt;p&gt;And there are mechanisms to deal with it and this is what we are going to explore next.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;span class="hx:absolute hx:-mt-20" id="conclusion"&gt;&lt;/span&gt;
&lt;a href="#conclusion" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Use memory responsibly.&lt;/p&gt;
&lt;p&gt;We saw memory allocation on surface and tried to picture it so that we can feel confident. And I am sure we are.&lt;/p&gt;
&lt;p&gt;But how that allocation is actually managed by dlmalloc is still unknown. And to answer that, we have to get more chunky.&lt;/p&gt;
&lt;p&gt;Basically, now we have to explore the real structure of a in-use and free chunks, as perceived by &lt;code&gt;dlmalloc&lt;/code&gt; and how the concept of bins is applied to manage chunks efficiently.&lt;/p&gt;
&lt;p&gt;Until then, bye bye.&lt;/p&gt;</description></item><item><title>The GNU Debugger</title><link>https://hi-anki.github.io/gitbook/docs/debugging/the-gnu-debugger/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/debugging/the-gnu-debugger/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;24, 25 September 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Starting A GDB Session&lt;span class="hx:absolute hx:-mt-20" id="starting-a-gdb-session"&gt;&lt;/span&gt;
&lt;a href="#starting-a-gdb-session" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are two ways to start gdb.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We provide the source (binary/core) to be debugged while starting gdb.&lt;/li&gt;
&lt;li&gt;We attach a running process or provide gdb a core or even a binary after the gdb session is started.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When we do this:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ gdb ./source-binary&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We get a message along with a &lt;code&gt;gdb&lt;/code&gt; prompt.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;GNU gdb ......
.
.
For help, type &amp;#34;help&amp;#34;.
Type &amp;#34;apropos word&amp;#34; to search for commands related to &amp;#34;word&amp;#34;.
(gdb)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This means we are in a gdb session. But the source binary has not become a process yet.&lt;/p&gt;
&lt;p&gt;Passing the source binary name ensures that the source binary can be run as a child process for gdb so that there are no problems on the permission side, as discussed in the previous write up &lt;a href="wpd-2.md"title="mention"&gt;wpd-2.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We will learn attaching to a running process later.&lt;/p&gt;
&lt;h2&gt;Premise&lt;span class="hx:absolute hx:-mt-20" id="premise"&gt;&lt;/span&gt;
&lt;a href="#premise" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There is a lot that can be done with GDB. But using a bunch of commands and memorizing them is not my cup of tea. There are awesome reference cards on the internet, take this one: &lt;a href="https://users.ece.utexas.edu/~adnan/gdb-refcard.pdf"target="_blank" rel="noopener"&gt;https://users.ece.utexas.edu/~adnan/gdb-refcard.pdf&lt;/a&gt; but memorization is not the point.&lt;/p&gt;
&lt;p&gt;To really understand gdb, we have to understand how gdb perceives everything, what is gdb&amp;rsquo;s mental model.&lt;/p&gt;
&lt;h2&gt;GDB&amp;rsquo;s View Of The Debugee&lt;span class="hx:absolute hx:-mt-20" id="gdbs-view-of-the-debugee"&gt;&lt;/span&gt;
&lt;a href="#gdbs-view-of-the-debugee" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The debugee process is divided into three parts.&lt;/p&gt;
&lt;h3&gt;1. Memory Image&lt;span class="hx:absolute hx:-mt-20" id="1-memory-image"&gt;&lt;/span&gt;
&lt;a href="#1-memory-image" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The process is seen as a set of mapped regions in the virtual address space. It includes everything we have studied in the ELF specification: text, data/bss, heap, stack, and shared libraries (as memory mapped regions).&lt;/p&gt;
&lt;h3&gt;2. Execution State&lt;span class="hx:absolute hx:-mt-20" id="2-execution-state"&gt;&lt;/span&gt;
&lt;a href="#2-execution-state" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The execution state is what the CPU is doing at any point in time. It includes the state of registers, the syscall it is preparing for, flags, instruction pointer, frame information etc.&lt;/p&gt;
&lt;p&gt;GDB can walk thru all of that and give us an in-detail, low level overview of what&amp;rsquo;s happening in the process at any instant.&lt;/p&gt;
&lt;p&gt;GDB can modify the execution state as well to test how arbitrary or even precision-guided changes in the execution state drives the debugee in a different direction.&lt;/p&gt;
&lt;p&gt;The execution state is often tied to a specific call stack. When you change the call stack, the execution state changes as well.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We have already explored process state in detail in the previous article,&lt;/em&gt; &lt;a href="wpd-2.md"title="mention"&gt;wpd-2.md&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;3. Debug Information&lt;span class="hx:absolute hx:-mt-20" id="3-debug-information"&gt;&lt;/span&gt;
&lt;a href="#3-debug-information" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As mentioned in previous articles, debug information is semantic information which aids the debugging process. It&amp;rsquo;s not necessary if you are great with raw assembly and memory addresses.&lt;/p&gt;
&lt;p&gt;If the source was compiled with &lt;code&gt;-g&lt;/code&gt; option in &lt;code&gt;gcc&lt;/code&gt;, we can observe exact source lines, function names, local variables etc.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This is how a debugee process is perceived by gdb.&lt;/p&gt;
&lt;p&gt;If we hurry up and run commands randomly, we are not going to get anything useful because gdb expects us to behave in a certain way so that it can help us to the best of its capabilities.&lt;/p&gt;
&lt;p&gt;To understand what gdb expects us, we have to map how gdb functions at high level.&lt;/p&gt;
&lt;h2&gt;Mapping GDB&lt;span class="hx:absolute hx:-mt-20" id="mapping-gdb"&gt;&lt;/span&gt;
&lt;a href="#mapping-gdb" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Mapping gdb is about priming ourselves with gdb&amp;rsquo;s terminology.&lt;/p&gt;
&lt;h3&gt;1. Inferior&lt;span class="hx:absolute hx:-mt-20" id="1-inferior"&gt;&lt;/span&gt;
&lt;a href="#1-inferior" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Normally, inferior means &lt;em&gt;lower in rank or quality&lt;/em&gt;. Here, inferior refers to the debugee that gdb works on. It can be&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A live process started by gdb or attached later.&lt;/li&gt;
&lt;li&gt;A core dump.&lt;/li&gt;
&lt;li&gt;An executable file (only static information).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;GDB can debug multiple processes in a single session, so there can be multiple inferiors.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t have an inferior, there is nothing for gdb to process.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you run &lt;code&gt;info registers&lt;/code&gt;, gdb should give the state of the registers, but where there is no debugee process, how gdb is supposed to give the register state?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That is why, an inferior is the first thing we should provide to gdb.&lt;/p&gt;
&lt;p&gt;The inferior must be stopped to allow meaningful inspection of the execution state.&lt;/p&gt;
&lt;p&gt;If the source is not compiled with debug symbols, gdb can&amp;rsquo;t give any semantic information about the source.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;From now on, we will refer the debugee process as inferior.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;2. Frame&lt;span class="hx:absolute hx:-mt-20" id="2-frame"&gt;&lt;/span&gt;
&lt;a href="#2-frame" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A single function activation in the &lt;strong&gt;call stack&lt;/strong&gt;. Frames are numbered from 0 to n.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;frame 0: currently_executing()
frame 1: called the currently_executing frame
frame 2: called frame 1
.
.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;3. Breakpoint&lt;span class="hx:absolute hx:-mt-20" id="3-breakpoint"&gt;&lt;/span&gt;
&lt;a href="#3-breakpoint" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A &amp;ldquo;stop here&amp;rdquo; marker.&lt;/p&gt;
&lt;p&gt;We can set a breakpoint on a source line and on an address.&lt;/p&gt;
&lt;p&gt;We can set breakpoints directly or based on a condition.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GDB processes that condition and decides when to set the breakpoint.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. Watchpoint&lt;span class="hx:absolute hx:-mt-20" id="4-watchpoint"&gt;&lt;/span&gt;
&lt;a href="#4-watchpoint" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A watchpoint observes for a change in the specified memory location and stops when the change happens.&lt;/p&gt;
&lt;p&gt;For example - If we created a watchpoint on a variable and updated it later in the process, the moment it is updated, the execution would be halted.&lt;/p&gt;
&lt;h3&gt;5. Catchpoint&lt;span class="hx:absolute hx:-mt-20" id="5-catchpoint"&gt;&lt;/span&gt;
&lt;a href="#5-catchpoint" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A catchpoint observes for an event and when that happens, the execution is halted.&lt;/p&gt;
&lt;p&gt;GDB supports many events like exec, fork, shared libraries (load/unload), signal, syscalls (entry/exit), vfork, throw and rethrow (c++).&lt;/p&gt;
&lt;h3&gt;6. Source Line&lt;span class="hx:absolute hx:-mt-20" id="6-source-line"&gt;&lt;/span&gt;
&lt;a href="#6-source-line" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;It refers to a human-friendly view that maps back to machine addresses.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Remember, it is possible only when the source is compiled with debug information.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;7. Location&lt;span class="hx:absolute hx:-mt-20" id="7-location"&gt;&lt;/span&gt;
&lt;a href="#7-location" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Location is any place you can stop the execution at. A line, an address, or a function.&lt;/p&gt;
&lt;p&gt;Breakpoints/watchpoints are always attached to a location.&lt;/p&gt;
&lt;h3&gt;8. Core Dump&lt;span class="hx:absolute hx:-mt-20" id="8-core-dump"&gt;&lt;/span&gt;
&lt;a href="#8-core-dump" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A memory snapshot from a crashed process.&lt;/p&gt;
&lt;p&gt;It is used extensively in memory analysis.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Now we can explore the actual commands.&lt;/p&gt;
&lt;h2&gt;GDB Commands&lt;span class="hx:absolute hx:-mt-20" id="gdb-commands"&gt;&lt;/span&gt;
&lt;a href="#gdb-commands" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Few things before the exciting part.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GDB is very extensive. It can do a lot of things, so sticking to our purpose is very important. Otherwise, it&amp;rsquo;s a recipe for time and energy wastage.&lt;/li&gt;
&lt;li&gt;We can organize gdb commands based on some high level categories.&lt;/li&gt;
&lt;li&gt;Under these &amp;ldquo;high level categories&amp;rdquo;, we can further divide the commands based on their usability factor. The usability factor is simple. Some commands completely rely on debug information, other don&amp;rsquo;t. Later we&amp;rsquo;ll find the importance of this categorization.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Stopping The Debugee&lt;span class="hx:absolute hx:-mt-20" id="stopping-the-debugee"&gt;&lt;/span&gt;
&lt;a href="#stopping-the-debugee" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3&gt;Accessing The Source Code&lt;span class="hx:absolute hx:-mt-20" id="accessing-the-source-code"&gt;&lt;/span&gt;
&lt;a href="#accessing-the-source-code" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Since GDB is a GNU software, it defaults to AT&amp;amp;T syntax for assembly. But we can tell gdb to use intel syntax as well.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;(&lt;/span&gt;gdb&lt;span style="color:#f92672"&gt;)&lt;/span&gt; set disassembly-flavor intel&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Stack Management&lt;span class="hx:absolute hx:-mt-20" id="stack-management"&gt;&lt;/span&gt;
&lt;a href="#stack-management" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;!-- raw HTML omitted --&gt;
&lt;h3&gt;Execution State Information&lt;span class="hx:absolute hx:-mt-20" id="execution-state-information"&gt;&lt;/span&gt;
&lt;a href="#execution-state-information" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Requirement&lt;/strong&gt;: An inferior which has been stopped for inspection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; All the commands here are frame-specific. When you change the current stack frame, the values will change. So remember that and save yourself headaches.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3&gt;Managerial Commands&lt;span class="hx:absolute hx:-mt-20" id="managerial-commands"&gt;&lt;/span&gt;
&lt;a href="#managerial-commands" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;All the i-suffixed commands operate on machine instruction. Their equivalent with no &lt;code&gt;i&lt;/code&gt; in them operates on C source lines.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Therefore, the i-suffixed ones work even when there are no debug symbols, because they don&amp;rsquo;t rely on them.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This write up is already quite dense so we&amp;rsquo;ll leave it as is. In the next one, we will explore gdb fully practically, no theory.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;span class="hx:absolute hx:-mt-20" id="conclusion"&gt;&lt;/span&gt;
&lt;a href="#conclusion" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I mentioned this earlier as well that GDB is very extensive. It can do so much. Therefore, understanding how gdb does all of that is quite important because it primes you for future explorations.&lt;/p&gt;
&lt;p&gt;If you have read my previous write ups, you might remember it, but if you don&amp;rsquo;t, this is for you.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;No one is born with knowledge and understanding. You do the work and you build it. That&amp;rsquo;s the recipe.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;In 2025, you have a proper&lt;/strong&gt;&lt;/em&gt; &lt;a href="https://sourceware.org/gdb/current/onlinedocs/gdb.pdf"target="_blank" rel="noopener"&gt;&lt;em&gt;&lt;strong&gt;GDB manual&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;em&gt;&lt;strong&gt;, spread across 994 pages. You have awesome reference cards. GDB itself comes with a built-in &lt;code&gt;help&lt;/code&gt; .Make use of these resources.&lt;/strong&gt;&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;This is the age of AI, ask AI chatbots what is this?, why it is like this? They will help you.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;That is how I have understood all of this. It&amp;rsquo;s not magic, it&amp;rsquo;s just work. So explore yourself, there is so much out there. The horizon expands as long as you want to see it.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;</description></item><item><title>What are the available APIs?</title><link>https://hi-anki.github.io/gitbook/docs/elf-parser-project/what-are-the-available-apis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/elf-parser-project/what-are-the-available-apis/</guid><description>
&lt;p&gt;This file includes all the internal APIs that does the heavy lifting.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div class="hextra-code-filename not-prose" dir="auto"&gt;core_api/parser.h&lt;/div&gt;&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#ifndef PARSER_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#define PARSER_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;elf.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;typedef&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Elf64_Ehdr&lt;span style="color:#f92672"&gt;*&lt;/span&gt; ehdr; &lt;span style="color:#75715e"&gt;// File Header
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; Elf64_Phdr&lt;span style="color:#f92672"&gt;*&lt;/span&gt; phdrs; &lt;span style="color:#75715e"&gt;// Program Headers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; Elf64_Shdr&lt;span style="color:#f92672"&gt;*&lt;/span&gt; shdrs; &lt;span style="color:#75715e"&gt;// Section Headers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt; r_shstrtab; &lt;span style="color:#75715e"&gt;// flat section header string table dump
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; r_shstr_count; &lt;span style="color:#75715e"&gt;// └─ count of total bytes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;&lt;span style="color:#f92672"&gt;**&lt;/span&gt; f_shstrtab; &lt;span style="color:#75715e"&gt;// formatted dump of section header string table
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; f_shstr_count; &lt;span style="color:#75715e"&gt;// └─ count of total individual entries
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt; r_strtab; &lt;span style="color:#75715e"&gt;// flat string table dump
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; r_str_count; &lt;span style="color:#75715e"&gt;// └─ count of total bytes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;&lt;span style="color:#f92672"&gt;**&lt;/span&gt; f_strtab; &lt;span style="color:#75715e"&gt;// formatted dump of string table
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; f_str_count; &lt;span style="color:#75715e"&gt;// └─ count of total individual entries
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Elf64_Sym&lt;span style="color:#f92672"&gt;*&lt;/span&gt; symtab; &lt;span style="color:#75715e"&gt;// Symbol Table
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; symtab_count; &lt;span style="color:#75715e"&gt;// └─ entry count
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Elf64_Sym&lt;span style="color:#f92672"&gt;*&lt;/span&gt; dynsym; &lt;span style="color:#75715e"&gt;// Dynamic Symbol Table
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; dynsym_count; &lt;span style="color:#75715e"&gt;// └─ entry count
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Elf64_Rela&lt;span style="color:#f92672"&gt;*&lt;/span&gt; reladyn; &lt;span style="color:#75715e"&gt;// .rela.dyn Table
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; reladyn_count; &lt;span style="color:#75715e"&gt;// └─ entry count
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Elf64_Rela&lt;span style="color:#f92672"&gt;*&lt;/span&gt; relaplt; &lt;span style="color:#75715e"&gt;// .rela.plt Table
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; relaplt_count; &lt;span style="color:#75715e"&gt;// └─ entry count
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt; r_dynstr; &lt;span style="color:#75715e"&gt;// flat .dynstr dump
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; r_dstr_count; &lt;span style="color:#75715e"&gt;// └─ count of total bytes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;&lt;span style="color:#f92672"&gt;**&lt;/span&gt; f_dynstr; &lt;span style="color:#75715e"&gt;// formatted dump of .dynstr table
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; f_dstr_count; &lt;span style="color:#75715e"&gt;// └─ count of total individual entries
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Elf64_Dyn&lt;span style="color:#f92672"&gt;*&lt;/span&gt; dynamic; &lt;span style="color:#75715e"&gt;// Dynamic Section
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; dyn_ent; &lt;span style="color:#75715e"&gt;// └─ entry count
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;} ElfFile;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;verify_elf&lt;/span&gt;(FILE&lt;span style="color:#f92672"&gt;*&lt;/span&gt; f_obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_ehdr&lt;/span&gt;(FILE&lt;span style="color:#f92672"&gt;*&lt;/span&gt; f_obj, ElfFile&lt;span style="color:#f92672"&gt;*&lt;/span&gt; AccessFile);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_phdrs&lt;/span&gt;(FILE&lt;span style="color:#f92672"&gt;*&lt;/span&gt; f_obj, ElfFile&lt;span style="color:#f92672"&gt;*&lt;/span&gt; AccessFile);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_shdrs&lt;/span&gt;(FILE&lt;span style="color:#f92672"&gt;*&lt;/span&gt; f_obj, ElfFile&lt;span style="color:#f92672"&gt;*&lt;/span&gt; AccessFile);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_shstrtab&lt;/span&gt;(FILE&lt;span style="color:#f92672"&gt;*&lt;/span&gt; f_obj, ElfFile&lt;span style="color:#f92672"&gt;*&lt;/span&gt; AccessFile);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_strtab&lt;/span&gt;(FILE&lt;span style="color:#f92672"&gt;*&lt;/span&gt; f_obj, ElfFile&lt;span style="color:#f92672"&gt;*&lt;/span&gt; AccessFile);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_symtab&lt;/span&gt;(FILE&lt;span style="color:#f92672"&gt;*&lt;/span&gt; f_obj, ElfFile&lt;span style="color:#f92672"&gt;*&lt;/span&gt; AccessFile);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_dynsym&lt;/span&gt;(FILE&lt;span style="color:#f92672"&gt;*&lt;/span&gt; f_obj, ElfFile&lt;span style="color:#f92672"&gt;*&lt;/span&gt; AccessELF);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_relocations&lt;/span&gt;(FILE&lt;span style="color:#f92672"&gt;*&lt;/span&gt; f_obj, ElfFile&lt;span style="color:#f92672"&gt;*&lt;/span&gt; AccessELF);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_dynstr&lt;/span&gt;(FILE&lt;span style="color:#f92672"&gt;*&lt;/span&gt; f_obj, ElfFile&lt;span style="color:#f92672"&gt;*&lt;/span&gt; AccessELF);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parse_dynamic&lt;/span&gt;(FILE&lt;span style="color:#f92672"&gt;*&lt;/span&gt; f_obj, ElfFile&lt;span style="color:#f92672"&gt;*&lt;/span&gt; AccessELF);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;deallocator&lt;/span&gt;(ElfFile&lt;span style="color:#f92672"&gt;*&lt;/span&gt; AccessELF);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-8"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The data type structs, like &lt;code&gt;Elf64_Ehdr&lt;/code&gt; are borrowed from &lt;code&gt;elf.h&lt;/code&gt; header file.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ElfFile&lt;/code&gt; is the actual API that would be out for external use.&lt;/p&gt;
&lt;p&gt;The idea is that the main controller would open the ELF file to be parsed and it will pass the file pointer to each of these APIs, along with a &lt;code&gt;ElfFile&lt;/code&gt; struct. Every API will populate its pointer and it can be used later.&lt;/p&gt;
&lt;p&gt;The idea behind &lt;code&gt;ElfFile&lt;/code&gt; struct is that it will be the one stop solution for all the extracted parts from the ELF. It really simplifies the access to different parts of the ELF just by one &lt;code&gt;struct&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the end, &lt;code&gt;deallocator&lt;/code&gt; is called to free up the memory.&lt;/p&gt;</description></item><item><title>Anatomy Of An Assembly Program</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/anatomy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/anatomy/</guid><description>
&lt;h2&gt;Section&lt;span class="hx:absolute hx:-mt-20" id="section"&gt;&lt;/span&gt;
&lt;a href="#section" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Sections define how the memory layout at runtime would be prepared. Common sections include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;.text&lt;/code&gt;, for code or instructions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.data&lt;/code&gt;, for initialized data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.bss&lt;/code&gt;, for uninitialized data, where bss stands for &amp;ldquo;Block Started by Symbol&amp;rdquo;.
&lt;ul&gt;
&lt;li&gt;It refers to a label (symbol) that marks the start of a block of uninitialized data in memory.&lt;/li&gt;
&lt;li&gt;It helps in reducing the size of the object files by leaving a note for the system to allocate x bytes at runtime for this block and zero-initialize them. As allocating zeros at compile time makes no sense.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.rodata&lt;/code&gt;, for read-only data.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Registers (As Operands)&lt;span class="hx:absolute hx:-mt-20" id="registers-as-operands"&gt;&lt;/span&gt;
&lt;a href="#registers-as-operands" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;ve attempted assembly before, you might have seen old lectures using ax, bx, cx, dx like registers, or eax, ebx, ecx, edx and the most recent ones might be using rax, rsi, rdi etc&amp;hellip;.&lt;/p&gt;
&lt;p&gt;We know that x86 architecture emerged from 8086 processor, which was a 16-bit processor. The two lettered registers we see belongs to the 16-bit architecture.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;These 16-bit registers also have smaller ones. They are sized 8-bits each.&lt;/li&gt;
&lt;li&gt;They are called high and low. For example, &lt;code&gt;ax&lt;/code&gt; has &lt;code&gt;al&lt;/code&gt; and &lt;code&gt;ah&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Intel extended them to 32-bit. This increased the register width and all the registers from 16-bit architecture got prefixed by an e. So, ax become eax, bx become ebx and so on. &lt;code&gt;e&lt;/code&gt; stands for extended.&lt;/p&gt;
&lt;p&gt;AMD extended it further to 64-bit. The register width increased again and we get new registers prefixed with r, while retaining the existing ones. So, eax become rax, ebx become rbx and so on. Along with this, we have got 8 new general purpose registers from r8-r15.&lt;/p&gt;
&lt;p&gt;The newer systems are also backward compatible. This means that x86_32 still supports x86 registers, x86_64 still supports x86 and x86_32.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When we use rax, we are using the complete 64-bit register.&lt;/li&gt;
&lt;li&gt;When we use eax, we are using the lower 32-bits of the rax register.&lt;/li&gt;
&lt;li&gt;When we use ax, we are using the lower 16-bits of the rax register.&lt;/li&gt;
&lt;li&gt;When we use ah, we are using the 8-bits after al, 8-15.&lt;/li&gt;
&lt;li&gt;When we use al, we are using the lowest 8-bits of the rax register, 0-7.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://miro.medium.com/v2/resize:fit:1100/format:webp/1*PSTOKsqSfpKLxrFEr2BY2Q.png"target="_blank" rel="noopener"&gt;a visual diagram&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A complete list of general purpose registers, &lt;a href="https://www.google.com/imgres?q=x86%2064%20rax%20register%20anatomy%5c&amp;amp;imgurl=https%3A%2F%2Fwww.researchgate.net%2Fpublication%2F342043300%2Ffigure%2Ftbl1%2FAS%3A900496000827404%401591706385889%2FThe-sixteen-x86-64-general-purpose-registers-and-their-sub-registers.png%5c&amp;amp;imgrefurl=https%3A%2F%2Fwww.researchgate.net%2Ffigure%2FThe-sixteen-x86-64-general-purpose-registers-and-their-sub-registers_tbl1_342043300%5c&amp;amp;docid=xbGBS-ISu9YcPM%5c&amp;amp;tbnid=iHb1hi27pi33ZM%5c&amp;amp;vet=12ahUKEwjtu8-Zo4yNAxW7XmwGHfwTDG4QM3oECFoQAA..i%5c&amp;amp;w=565%5c&amp;amp;h=466%5c&amp;amp;hcb=2%5c&amp;amp;ved=2ahUKEwjtu8-Zo4yNAxW7XmwGHfwTDG4QM3oECFoQAA"target="_blank" rel="noopener"&gt;link&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Data Addressing Modes&lt;span class="hx:absolute hx:-mt-20" id="data-addressing-modes"&gt;&lt;/span&gt;
&lt;a href="#data-addressing-modes" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Immediate Mode.
&lt;ul&gt;
&lt;li&gt;The simplest method.&lt;/li&gt;
&lt;li&gt;Here, the data to access is embedded in the instruction itself.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;mov eax, 5 ; Move the value 5 into EAX register&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Register Addressing Mode.
&lt;ul&gt;
&lt;li&gt;The instruction contains a register to access, rather than a memory location.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Direct Addressing Mode.
&lt;ul&gt;
&lt;li&gt;The instruction contains the reference to the memory address to access.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;mov eax, [some_address] ; Move data from memory at some_address into EAX&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Indexed Addressing Mode.
&lt;ul&gt;
&lt;li&gt;The instruction contains a memory address to access, and also specifies an index register to offset that address.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;mov eax, [ebx + 4] ; Move data from the address in EBX + 4 into EAX&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Indirect Addressing Mode.
&lt;ul&gt;
&lt;li&gt;The instruction contains a register that contains a pointer to where the data should be accessed.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;mov eax, [ebx] ; Move data from the address in EBX into EAX&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Base Pointer Addressing Mode.
&lt;ul&gt;
&lt;li&gt;This is similar to indirect addressing, but you also include a number called the offset to add to the register&amp;rsquo;s value before using it for lookup.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Always leave an empty line at end of the program. This gracefully marks the end of assembly code. Otherwise, you&amp;rsquo;ll get a warning by the assembler.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;System Calls&lt;span class="hx:absolute hx:-mt-20" id="system-calls"&gt;&lt;/span&gt;
&lt;a href="#system-calls" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;system call&lt;/strong&gt; is the controlled gateway between a user-space program and the kernel. It lets your code request services that require higher privileges — like writing to the screen, reading a file, or exiting the program.&lt;/p&gt;
&lt;h3&gt;User Mode vs Kernel Mode&lt;span class="hx:absolute hx:-mt-20" id="user-mode-vs-kernel-mode"&gt;&lt;/span&gt;
&lt;a href="#user-mode-vs-kernel-mode" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The CPU operates in two modes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User Mode&lt;/strong&gt;: Restricted environment in which our code runs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Kernel Mode&lt;/strong&gt;: Full-access mode where the operating system runs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our program cannot perform privileged operations directly. Instead, it uses &lt;strong&gt;syscalls&lt;/strong&gt; to request the kernel to perform them on its behalf.&lt;/p&gt;
&lt;p&gt;Linux supports hundreds of syscalls. Here are a few common ones:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;th&gt;Syscall&lt;/th&gt;
&lt;th&gt;Syscall Number&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Read from a file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;read&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Write to a file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;write&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Open a file&lt;/td&gt;
&lt;td&gt;&lt;code&gt;open&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Map memory&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mmap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Exit the program&lt;/td&gt;
&lt;td&gt;&lt;code&gt;exit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;60&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Variables v/s Labels&lt;span class="hx:absolute hx:-mt-20" id="variables-vs-labels"&gt;&lt;/span&gt;
&lt;a href="#variables-vs-labels" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A variable is a container to store a value. A label is a named memory location. Both are different.&lt;/p&gt;
&lt;p&gt;A label can point to a group of instructions, a constant value, a procedure, anything. But a variable only stores some value. It can store the result of a computation, but not the instruction itself.&lt;/p&gt;
&lt;p&gt;In simple terms, every variable is a label, but every label need not to be a variable.&lt;/p&gt;</description></item><item><title>Practical GDB</title><link>https://hi-anki.github.io/gitbook/docs/debugging/practical-gdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/debugging/practical-gdb/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;25 September 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Without wasting time, let&amp;rsquo;s jump right into experiments.&lt;/p&gt;
&lt;h2&gt;Setup&lt;span class="hx:absolute hx:-mt-20" id="setup"&gt;&lt;/span&gt;
&lt;a href="#setup" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I started my low level journey on May 01, 2025. Today, it is September 25, 2025. Almost 5 months are about to complete. In these 5 months, I have understood lot of theoretical concepts. I tried to visualize them using ASCII and other mechanisms but I have not seen them practically.&lt;/p&gt;
&lt;p&gt;So the idea is to make a list of all the concepts I have studied so far, write small programs to implement them, load them inside gdb and examine how that theory is implemented practically, to verify if what I read was right or not.&lt;/p&gt;
&lt;p&gt;The list below includes everything.&lt;/p&gt;</description></item><item><title>Structure Of A Chunk</title><link>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/dma/structure-of-a-chunk/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/dma/structure-of-a-chunk/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;16 September 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We&amp;rsquo;ll start by understanding the structure of a chunk. This is how a chunk looks like:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_chunk {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; prev_foot;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; head;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_chunk&lt;span style="color:#f92672"&gt;*&lt;/span&gt; fd;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_chunk&lt;span style="color:#f92672"&gt;*&lt;/span&gt; bk;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A chunk is just a piece of metadata.&lt;/p&gt;
&lt;h2&gt;What is size_t?&lt;span class="hx:absolute hx:-mt-20" id="what-is-size_t"&gt;&lt;/span&gt;
&lt;a href="#what-is-size_t" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;size_t&lt;/code&gt; is an unsigned integer type defined by the C standard, which is guaranteed to be able to hold the size (in bytes) of the largest possible object (word size) in the architecture we are in.&lt;/p&gt;
&lt;p&gt;At the end of the day, &lt;code&gt;size_t&lt;/code&gt; is just a type definition alias for some unsigned integer type. In that case, why don&amp;rsquo;t we just use that instead? What&amp;rsquo;s the need for &lt;code&gt;size_t&lt;/code&gt; ?&lt;/p&gt;
&lt;p&gt;Every major kernel like Windows, Unix and Linux has a different ABI. Then there are platform specific ABIs. What looks easy outside is not really that simple inside.&lt;/p&gt;
&lt;p&gt;Leave the topic of ABIs for a second. We have multiple implementations of integer itself. Just open &lt;code&gt;stdint.h&lt;/code&gt; . But when you malloc for any kind, it just works.&lt;/p&gt;
&lt;p&gt;Despite all these differences which we can&amp;rsquo;t comprehend as beginners, we still use the same &lt;code&gt;malloc()&lt;/code&gt; on Windows, Linux and anywhere else. How is that made possible?&lt;/p&gt;
&lt;p&gt;We use the same frontend but beneath that lies the complexity to keep malloc as one single frontend instead of&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;mallocWin32(); mallocWin64()
mallocUnix32(); mallocUnix64() and so on.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So, we hide all that complication programmatically. The toolchain decides the most appropriate value and make it &lt;code&gt;size_t&lt;/code&gt; so that we as programmers have no difficulty working across different systems.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why when we are at 32-bit system, the size of a chunk becomes 16 bytes. And when we are at 64-bit system, it becomes 32 bytes automatically without any extra lines.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;The Confusion Of Size&lt;span class="hx:absolute hx:-mt-20" id="the-confusion-of-size"&gt;&lt;/span&gt;
&lt;a href="#the-confusion-of-size" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When we see a chunk as a struct, it&amp;rsquo;s literal size is always going to 16/32 bytes on 32-bit/64-bit. But when we talk about chunk as an allocation medium, it includes the size of both the chunk (as a metadata keeper) and the raw memory location to which a pointer is returned to the process.&lt;/p&gt;
&lt;p&gt;And this size is stored within the &lt;code&gt;head&lt;/code&gt; declaration in the chunk itself.&lt;/p&gt;
&lt;p&gt;You might be wondering where is the actual memory location. And it&amp;rsquo;s right to feel perplexed about it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What happens is that for every allocation, first comes a metadata chunk, followed by the actual memory location to which a pointer is returned to the process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So for every allocation, it is more like:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;┌────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐────┐
| pf | he | fd | bk | p. | | | | | | .p | // | // | // | // | // |
└────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘────┘&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remember, pointer &lt;code&gt;p&lt;/code&gt; is not a part of the struct. And this is very loosely represented which we will try to manage with more realism later.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;That means, every malloc request creates a chunk, where a chunk literally is just a metadata struct followed by the actual raw memory, but logically we consider them together.&lt;/p&gt;
&lt;h2&gt;size_t head&lt;span class="hx:absolute hx:-mt-20" id="size_t-head"&gt;&lt;/span&gt;
&lt;a href="#size_t-head" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s talk about this declaration within the struct first because this probably the only declaration which is present both in free chunks and in-use chunks.&lt;/p&gt;
&lt;p&gt;As &lt;code&gt;head&lt;/code&gt; is of type &lt;code&gt;size_t&lt;/code&gt; it will be 4 bytes on 32-bit and 8 bytes on 64-bit. So, size is sorted, I guess.&lt;/p&gt;
&lt;p&gt;We need to do 2 things.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We know that a free chunk must be surrounded by in-use chunks only. This is only possible when you coalesce adjacent free chunks. To do that, we need to know whether the adjacent chunk is free or in-use.&lt;/li&gt;
&lt;li&gt;We also need to identify whether the current chunk is free or in-use.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And we do that using flags bits. These are &lt;code&gt;PINUSE&lt;/code&gt; and &lt;code&gt;CINUSE&lt;/code&gt; bits.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;PINUSE&lt;/code&gt; bit is for &amp;ldquo;&lt;em&gt;previous chunk type&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 ⇒ previous chunk is free.&lt;/li&gt;
&lt;li&gt;1 ⇒ previous chunk is in-use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;CINUSE&lt;/code&gt; bit is for &amp;ldquo;&lt;em&gt;current chunk type&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 ⇒ current chunk is free.&lt;/li&gt;
&lt;li&gt;1 ⇒ current chunk is in-use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are two ways to store these bits. Either we allocate separate ints for both, which would waste memory, or we use bit masking. And dlmalloc uses bit masking.&lt;/p&gt;
&lt;p&gt;You may ask, &lt;em&gt;wouldn&amp;rsquo;t that mess with the original size?&lt;/em&gt; No it won&amp;rsquo;t.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remember the stack pointer has to be double word aligned (16 for 64-bits and 8 for 32-bits) because there are SIMD instructions which expects that? A similar story is repeated here as well.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;The total size of the chunk has to be double-word aligned.&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The largest primitive data type in any architecture is double, which basically means a double-word type. If the chunk is only word-aligned, any double word request would mess up the whole calculation of the CPU.&lt;/li&gt;
&lt;li&gt;To keep things consistent and ensure that memory access for every type is managed efficiently, dlmalloc uses double-word aligned chunks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Double-word aligned means 8 bytes on 32-bit and 16-bytes on 64-bit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Any number which is a multiple of 8 or 16 is not going to use the lower 3 bits, i.e 0, 1, 2. These bits are always going to be free. &lt;em&gt;You can do the math if unsure.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;So, why don&amp;rsquo;t we use them to mask &lt;code&gt;pinuse&lt;/code&gt; and &lt;code&gt;cinuse&lt;/code&gt;? The third bit is not used by dlmalloc but ptmalloc uses it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To retrieve the &lt;code&gt;cinuse&lt;/code&gt; bit:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;size_field &amp;amp; 0x1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To retrieve the &lt;code&gt;pinuse&lt;/code&gt; bit:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;size_field &amp;amp; 0x2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To retrieve the size, clear the lower 3 bits.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;size_field &amp;amp; ~0x7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If something still feels off, remember that rule, &lt;em&gt;memory interpretation is context dependent. The same group of 8 bits can be interpreted as an unsigned int, a signed int, an ASCII character, or maybe an emoji. So, bit masking doesn&amp;rsquo;t looses the original size. It just utilizes the bits which have become null function under the &amp;ldquo;alignment rule&amp;rdquo; situation.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;size_t prev_foot&lt;span class="hx:absolute hx:-mt-20" id="size_t-prev_foot"&gt;&lt;/span&gt;
&lt;a href="#size_t-prev_foot" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Remember the &lt;code&gt;pinuse&lt;/code&gt; bit?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When it is 0, &lt;code&gt;prev_foot&lt;/code&gt; stores the size of the previous free chunk.&lt;/li&gt;
&lt;li&gt;When it is 1, &lt;code&gt;prev_foot&lt;/code&gt; is not managed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;*fd and *bd&lt;span class="hx:absolute hx:-mt-20" id="fd-and-bd"&gt;&lt;/span&gt;
&lt;a href="#fd-and-bd" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;These are only used by free chunks. They help us traverse forward and backward in the bin they are associated with.&lt;/p&gt;
&lt;h2&gt;Final Looks&lt;span class="hx:absolute hx:-mt-20" id="final-looks"&gt;&lt;/span&gt;
&lt;a href="#final-looks" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;In-use Chunk&lt;span class="hx:absolute hx:-mt-20" id="in-use-chunk"&gt;&lt;/span&gt;
&lt;a href="#in-use-chunk" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_chunk {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; prev_foot &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;DEPENDS ON PINUSE BIT&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; head &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;8/16 + REQUESTED_BYTES + DWORD_PADDING&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CINUSE&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PINUSE&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;DEPENDS&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_chunk&lt;span style="color:#f92672"&gt;*&lt;/span&gt; fd &lt;span style="color:#f92672"&gt;=&lt;/span&gt; GARBAGE;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_chunk&lt;span style="color:#f92672"&gt;*&lt;/span&gt; bk &lt;span style="color:#f92672"&gt;=&lt;/span&gt; GARBAGE;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Free Chunk&lt;span class="hx:absolute hx:-mt-20" id="free-chunk"&gt;&lt;/span&gt;
&lt;a href="#free-chunk" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_chunk {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; prev_foot &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;DEPENDS ON PINUSE BIT&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; head &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;8/16 + REQUESTED_BYTES + DWORD_PADDING&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CINUSE&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PINUSE&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;DEPENDS&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_chunk&lt;span style="color:#f92672"&gt;*&lt;/span&gt; fd &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;NEXT FREE CHUNK IN THE BIN&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_chunk&lt;span style="color:#f92672"&gt;*&lt;/span&gt; bk &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;PREVIOUS FREE CHUNK IN THE BIN&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The allocator world considers this 8/16 math in head as &amp;ldquo;&lt;strong&gt;overhead&lt;/strong&gt;&amp;rdquo;. But I don&amp;rsquo;t like to complicate that much so I didn&amp;rsquo;t use that.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;span class="hx:absolute hx:-mt-20" id="conclusion"&gt;&lt;/span&gt;
&lt;a href="#conclusion" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;size_t&lt;/code&gt; is the real MVP as it helps in making your code platform independent.&lt;/p&gt;
&lt;p&gt;Everything is confusing until you don&amp;rsquo;t understand it. Chunks is one of those things.&lt;/p&gt;
&lt;p&gt;Next we have to understand binning and how chunks are managed. Questions like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;How a free chunk is associated to a bin?&lt;/li&gt;
&lt;li&gt;What about coalesced free chunks?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;can be answered only when we understand binning. And that&amp;rsquo;s going to be our next exploration.&lt;/p&gt;
&lt;p&gt;Until then, goodbye.&lt;/p&gt;</description></item><item><title>Type Casting</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/type-casting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/type-casting/</guid><description>
&lt;p&gt;Implicit, explicit and pointer type casting&lt;/p&gt;</description></item><item><title>Calling Conventions</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/calling-conventions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/calling-conventions/</guid><description>
&lt;p&gt;Registers are fast, low-level storage locations inside the CPU. While x86_64 offers 16 general-purpose registers, their usage is often guided by conventions rather than absolute freedom.&lt;/p&gt;
&lt;p&gt;The use of these registers usually depends on the context. Primarily there exist two contexts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Function Call Context&lt;/li&gt;
&lt;li&gt;System Call Context&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How the registers would be used in the above two contexts is defined in a system-level agreement, called ABI, which stands for &lt;em&gt;Application Binary Interface&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As long as we are out of these two contexts, we can use a register as we want. And we will demonstrate this later.&lt;/p&gt;
&lt;h2&gt;Function Call Convention&lt;span class="hx:absolute hx:-mt-20" id="function-call-convention"&gt;&lt;/span&gt;
&lt;a href="#function-call-convention" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;th&gt;Register&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Syscall #&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rax&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Identifier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Argument 1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rdi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;First parameter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Argument 2&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rsi&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Second parameter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Argument 3&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rdx&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Third parameter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Argument 4&lt;/td&gt;
&lt;td&gt;&lt;code&gt;r10&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Fourth parameter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Argument 5&lt;/td&gt;
&lt;td&gt;&lt;code&gt;r8&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Fifth parameter&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Argument 6&lt;/td&gt;
&lt;td&gt;&lt;code&gt;r9&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sixth parameter&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2&gt;Syscall Convention&lt;span class="hx:absolute hx:-mt-20" id="syscall-convention"&gt;&lt;/span&gt;
&lt;a href="#syscall-convention" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;Caller&lt;/em&gt; is the function that makes a call to another function. The function that is being called is termed as &lt;em&gt;callee&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a register is callee-saved, the callee function must preserve the state of that register if it wants to use it and restore its state before returning.&lt;/li&gt;
&lt;li&gt;When a register is caller-saved, the caller function must preserve its state if it wants to use it later because a function call in-between might use it and it has no reason to preserve its state.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Linux (x86_64), the most common calling convention is &lt;strong&gt;System V AMD64 ABI&lt;/strong&gt;. It defines how functions and system calls exchange data by assigning specific roles to specific registers.&lt;/p&gt;
&lt;p&gt;To successfully invoke a system call, our data must be placed in these registers accordingly. Otherwise, the kernel will not interpret our request correctly.&lt;/p&gt;
&lt;h2&gt;But Why Do These Conventions Even Exist?&lt;span class="hx:absolute hx:-mt-20" id="but-why-do-these-conventions-even-exist"&gt;&lt;/span&gt;
&lt;a href="#but-why-do-these-conventions-even-exist" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;System V ABI (where V is 5) is not the only ABI that exist. It is the one that Linux uses. Microsoft Windows 64-bit uses x64 ABI.&lt;/p&gt;
&lt;p&gt;If every organization used their own calling convention, one thing is sure to suffer — cross-compatibility. These ABIs are contracts that everyone agrees upon. When every system uses the same convention, cross-compatibility improved. Software support improved.&lt;/p&gt;</description></item><item><title>Free Chunk Management</title><link>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/dma/free-chunk-management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/dma/free-chunk-management/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;17, 18, 19, 20 September 2025 (definitions taken out from a previous&lt;/strong&gt;&lt;/em&gt; &lt;a href="https://ankuragrawal.gitbook.io/home/~/revisions/0fLrDsjrcXzDo0NctRkY/all-roads-to-memory/dynamic-memory-allocation/doug-leas-memory-model"target="_blank" rel="noopener"&gt;&lt;em&gt;&lt;strong&gt;write up&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;&lt;em&gt;&lt;strong&gt;, written on 11, 15, 16 September 2025, optimized)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;In-use chunks are self-owned. Their bookkeeping lives in the chunk header itself and no external registry maintains them. Free chunks require management.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s explore how free chunks are managed by the allocator.&lt;/p&gt;
&lt;h2&gt;Bins&lt;span class="hx:absolute hx:-mt-20" id="bins"&gt;&lt;/span&gt;
&lt;a href="#bins" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A bin is a bucket for storing free chunks. Different buckets exist for different chunk size.&lt;/p&gt;
&lt;p&gt;Bins are implemented using two data structures:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Linked Lists (Singly and Circular Doubly)&lt;/li&gt;
&lt;li&gt;Bitwise Digital Trees&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When chunks are not in use, they are treated as nodes of either of these.&lt;/p&gt;
&lt;p&gt;Bins are categorized as following:&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This categorization of bins helps balancing rapid allocation, memory usage and fragmentation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: v2.7.0 of dlmalloc used fast bins, but they were removed in v2.8.0. The last version of dlmalloc is v2.8.6, as per this repository on&lt;/strong&gt; &lt;a href="https://github.com/DenizThatMenace/dlmalloc"target="_blank" rel="noopener"&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Structures In Account&lt;span class="hx:absolute hx:-mt-20" id="structures-in-account"&gt;&lt;/span&gt;
&lt;a href="#structures-in-account" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We have 3 structs and some aliases to them for different use cases. The structs remains the same, only the naming changes so that it fits the context, that&amp;rsquo;s it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;malloc_chunk&lt;/code&gt;: used for small size free chunks (by small bins).&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_chunk {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; prev_foot;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; head;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_chunk&lt;span style="color:#f92672"&gt;*&lt;/span&gt; fd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_chunk&lt;span style="color:#f92672"&gt;*&lt;/span&gt; bk;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;typedef&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_chunk mchunk;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;typedef&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_chunk&lt;span style="color:#f92672"&gt;*&lt;/span&gt; mchunkptr;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;typedef&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_chunk&lt;span style="color:#f92672"&gt;*&lt;/span&gt; sbinptr;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ol start="2"&gt;
&lt;li&gt;&lt;code&gt;malloc_tree_chunk&lt;/code&gt;: used for large size free chunks (by tree bins).&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_tree_chunk {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Usual metadata from ll-chunks
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; prev_foot;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; head;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_tree_chunk&lt;span style="color:#f92672"&gt;*&lt;/span&gt; fd;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_tree_chunk&lt;span style="color:#f92672"&gt;*&lt;/span&gt; bk;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Bookkeeping for trees
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_tree_chunk&lt;span style="color:#f92672"&gt;*&lt;/span&gt; child[&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_tree_chunk&lt;span style="color:#f92672"&gt;*&lt;/span&gt; parent;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bindex_t&lt;/span&gt; index;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;typedef&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_tree_chunk tchunk;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;typedef&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_tree_chunk&lt;span style="color:#f92672"&gt;*&lt;/span&gt; tchunkptr;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;typedef&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_tree_chunk&lt;span style="color:#f92672"&gt;*&lt;/span&gt; tbinptr;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ol start="3"&gt;
&lt;li&gt;&lt;code&gt;malloc_state&lt;/code&gt;: The master record which manages everything for an allocator instance.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; malloc_state {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;binmap_t&lt;/span&gt; smallmap;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;binmap_t&lt;/span&gt; treemap;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; dvsize;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; topsize;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt; least_addr;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mchunkptr dv;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mchunkptr top;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; trim_check;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; release_checks;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; magic;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mchunkptr smallbins[(NSMALLBINS&lt;span style="color:#f92672"&gt;+&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;)&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; tbinptr treebins[NTREEBINS];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; footprint;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; max_footprint;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; footprint_limit;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;flag_t&lt;/span&gt; mflags;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; msegment seg;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt; extp;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; exts;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We have a few type definitions to ensure size consistency across systems.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;typedef&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;unsigned&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bindex_t&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;typedef&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;unsigned&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;binmap_t&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;typedef&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;unsigned&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;flag_t&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;At last, we have a few macros which define some constant values.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#define NSMALLBINS (32U)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#define NTREEBINS (32U)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;32U&lt;/code&gt; means, take the value 32 as an unsigned integer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;malloc_state&lt;span class="hx:absolute hx:-mt-20" id="malloc_state"&gt;&lt;/span&gt;
&lt;a href="#malloc_state" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The actual bins that manage free chunks are &lt;code&gt;smallbins[]&lt;/code&gt; and &lt;code&gt;treebins[]&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;Using the two macros above, we can find the lengths of both the bins, i.e &lt;code&gt;smallbins[66]&lt;/code&gt; and &lt;code&gt;treebins[32]&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Small Bins&lt;span class="hx:absolute hx:-mt-20" id="small-bins"&gt;&lt;/span&gt;
&lt;a href="#small-bins" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Since small bins are implemented using circular doubly-linked list. We have to maintain two pointers, i.e &lt;code&gt;fd&lt;/code&gt; and &lt;code&gt;bd&lt;/code&gt; for each bin.&lt;/p&gt;
&lt;p&gt;The small bin at 1-index is used for unsorted bin. So there will be 32 small bins and 1 unsorted bin.&lt;/p&gt;
&lt;p&gt;Since array indices start from zero and we are counting bins from 1, for alignment purposes, the 0th element is sentinel and is not used.&lt;/p&gt;
&lt;p&gt;Small bins manage fixed size chunks. Each small bin, &lt;code&gt;smallbin_1&lt;/code&gt; to &lt;code&gt;smallbin_32&lt;/code&gt; manage sizes in multiple of 8. Therefore, the &lt;code&gt;smallbins&lt;/code&gt; array look something like this:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;smallbins &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, ubin, fd_8, bk_8, fd_16, bk_16, fd_24, bk_24, fd_32,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bk_32, fd_40, bk_40, fd_48, bk_48, fd_56, bk_56, fd_64,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bk_64, fd_72, bk_72, fd_80, bk_80, fd_88, bk_88, fd_96,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bk_96, fd_104, bk_104, fd_112, bk_112, fd_120, bk_120,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fd_128, bk_128, fd_136, bk_136, fd_144, bk_144, fd_152,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bk_152, fd_160, bk_160, fd_168, bk_168, fd_176, bk_176,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fd_184, bk_184, fd_192, bk_192, fd_200, bk_200, fd_208,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; bk_208, fd_216, bk_216, fd_224, bk_224, fd_232, bk_232,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; fd_240, bk_240, fd_248, bk_248, fd_256, bk_256
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;What do these entries mean?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Small bins are maintained using doubly-linked circular lists, so &lt;code&gt;fd_8&lt;/code&gt; represents the first node in a linked list that links all the free chunks of size 8 bytes together. And &lt;code&gt;bd_8&lt;/code&gt; represents the end of that same linked list.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;malloc_chunk&lt;/code&gt; struct has 4 &lt;code&gt;size_t&lt;/code&gt; elements, which weigh 16/32 bytes on 32-bit/64-bit systems. The least memory you can request is 1 bytes, which would round up the chunk size to 24/48 bytes on 32-bit/64-bit system. That means, the small bins linking chunks of 8 and 16 bytes makes no sense?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Yeah, that&amp;rsquo;s right. But dlmalloc keeps that overhead for clarity and alignment purposes.&lt;/li&gt;
&lt;li&gt;Those bins are empty. And we will see this practically very soon.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;When a chunk is freed, it goes into unsorted small bin. When multiple chunks are freed together, or there is no malloc request in between multiple frees, like this:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;free(p);
free(q);
// or
free(a);
..
free(b);
..
free(c);
..
free(d);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;free chunks are inserted in the unsorted bin in LIFO order. So the last freed chunk is the first one.&lt;/li&gt;
&lt;li&gt;But popping doesn&amp;rsquo;t follow LIFO. If 2nd chunk is found to be appropriate in a list of 5, the allocator manages linking/unlinking itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the next malloc request finds nothing in the unsorted bin, every chunk is popped out and linked in the respective bins.&lt;/p&gt;
&lt;h3&gt;Tree Bins&lt;span class="hx:absolute hx:-mt-20" id="tree-bins"&gt;&lt;/span&gt;
&lt;a href="#tree-bins" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;There are 32 tree bins in total. They manage chunks falling in a specific range of bytes. This range is obtained using power of 2.&lt;/p&gt;
&lt;p&gt;Small bins manage size &amp;lt; 256 bytes. Everything after that is managed by tree bins.&lt;/p&gt;
&lt;p&gt;256 is 2^8. So, the first range is 257-512 bytes (512 is 2^9). Similarly we have 513-1024, 1025-2048 bytes and so on.&lt;/p&gt;
&lt;p&gt;Tree bins are implemented using bitwise digital trees. Every element in a tree bin is a pointer to the root node of the bitwise digital tree.&lt;/p&gt;
&lt;p&gt;Linked List are fairly simple but bitwise digital trees are not. To understand them and visualize them, we have to practically see how a tree bin is managed by dlmalloc, which we will do very soon.&lt;/p&gt;
&lt;h2&gt;Arena&lt;span class="hx:absolute hx:-mt-20" id="arena"&gt;&lt;/span&gt;
&lt;a href="#arena" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The first malloc request sets up the arena.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we requested 10 bytes. The allocator is guaranteed to receive at least one page. On Linux, 4 KiB pages are more popular. So the allocator is guaranteed to setup an arena of at least 4096 bytes in in the first request.&lt;/p&gt;
&lt;p&gt;Depending on the system (32-bit/64-bit), the allocator will carve a chunk of size 24/48 bytes because of double-word alignment rule. So a minimum of 4072/4048 bytes will be left unused in the arena.&lt;/p&gt;
&lt;p&gt;These ~4k bytes are unallocated. Where do they live?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remember program break we read about in syscalls section? &lt;a href="dma-syscalls.md"&gt;Link&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The program break is just after the data segment. When we extend the heap, the kernel releases more memory than requested, and that memory is not used all at once, but it is allocated to the allocator.&lt;/li&gt;
&lt;li&gt;The program break is the partition between the used arena and the unallocated arena.&lt;/li&gt;
&lt;li&gt;When 24 bytes are used in the arena, the program break would be at the 25th bit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The program break is a pointer to the next free byte in the arena. When there is no space left in the arena for the requested allocation, the allocator requests more memory from the kernel.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;topsize&lt;/code&gt; entry in &lt;code&gt;malloc_state&lt;/code&gt; stores the size of the top chunk, which means the amount of unallocated space in the arena. &lt;code&gt;top&lt;/code&gt; is a pointer to the first byte in the unallocated arena.&lt;/p&gt;
&lt;p&gt;The allocator keeps requesting memory from the kernel when it runs out, the total memory ever requested by the allocator instance is recorded by the &lt;code&gt;max_footprint&lt;/code&gt; declaration.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;least_addr&lt;/code&gt; declaration points to the lowest memory address in the arena.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;footprint_limit&lt;/code&gt; is the user-defined ceiling on how much memory the allocator may request.&lt;/p&gt;
&lt;h3&gt;Designated Victim&lt;span class="hx:absolute hx:-mt-20" id="designated-victim"&gt;&lt;/span&gt;
&lt;a href="#designated-victim" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Many programs do repeated allocations of the same similar sizes. Designated victim is a recently freed chunk which is a part of small-medium size.&lt;/p&gt;
&lt;p&gt;If a malloc request matches the the size of designated victim (&lt;code&gt;dvsize&lt;/code&gt;), it saves the allocator some work by reusing the chunk pointer by &lt;code&gt;dv&lt;/code&gt;. &lt;/p&gt;
&lt;hr&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h2&gt;Rules For Coalescing&lt;span class="hx:absolute hx:-mt-20" id="rules-for-coalescing"&gt;&lt;/span&gt;
&lt;a href="#rules-for-coalescing" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;If the previous chunk is free, merge it with the current chunk. Use &lt;code&gt;prev_foot&lt;/code&gt; to find the previous chunk’s size and adjust pointers.&lt;/li&gt;
&lt;li&gt;If the next chunk is free (top chunk excluded), merge it with the current chunk. Remove the next chunk from its bin before merging.&lt;/li&gt;
&lt;li&gt;If the next chunk is the &lt;strong&gt;top chunk&lt;/strong&gt;, just extend the top chunk’s size instead of placing the chunk in bins.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If coalescing has happened, update the size field of the resulting chunk and insert it in appropriate bin.&lt;/p&gt;
&lt;p&gt;If the coalesced chunk is larger than &lt;code&gt;dvsize&lt;/code&gt;, may replace the designated victim.&lt;/p&gt;
&lt;h2&gt;Fits Strategy&lt;span class="hx:absolute hx:-mt-20" id="fits-strategy"&gt;&lt;/span&gt;
&lt;a href="#fits-strategy" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It refers to how the allocator chooses a free chunk from bins when multiple could work.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;First-fit&lt;/strong&gt;: pick the first sufficiently large chunk you find. Fast, but can cause uneven fragmentation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Best-fit&lt;/strong&gt;: search for the chunk closest in size to request. Reduces waste but costs more CPU (searching).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Next-fit&lt;/strong&gt;: like first-fit but resume search where you left off. Spreads allocations, less clustering.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;dlmalloc&lt;/code&gt; uses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;exact fits&lt;/strong&gt; in small bins.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;best-fit within size range&lt;/strong&gt; for large bins (but not global best-fit, just best within that bin).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This hybrid gives both speed and decent fragmentation control.&lt;/p&gt;</description></item><item><title>Memory Is Byte Addressable</title><link>https://hi-anki.github.io/gitbook/docs/debugging/memory-is-byte-addressable/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/debugging/memory-is-byte-addressable/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;26 September 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The first idea that we are going to verify is:&lt;/p&gt;
&lt;p&gt; &amp;ldquo;&lt;em&gt;memory is a flat array of byte addressable blocks&lt;/em&gt;&amp;rdquo;.&lt;/p&gt;
&lt;h2&gt;Setup&lt;span class="hx:absolute hx:-mt-20" id="setup"&gt;&lt;/span&gt;
&lt;a href="#setup" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Take this program.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; x &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0x12345678&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Compile with debug information:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;gcc -g main.c -o binary&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Open inside gdb.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;$ gdb ./binary
(gdb)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Clear the window with &lt;code&gt;CTRL+L&lt;/code&gt; .&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Exploration Begins&lt;span class="hx:absolute hx:-mt-20" id="exploration-begins"&gt;&lt;/span&gt;
&lt;a href="#exploration-begins" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;Command Background&lt;span class="hx:absolute hx:-mt-20" id="command-background"&gt;&lt;/span&gt;
&lt;a href="#command-background" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;GDB allows us to inspect individual memory locations via the examine command.&lt;/p&gt;
&lt;p&gt;We can open its help page by doing:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;(gdb) help x&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The examine command has the following syntax:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;(gdb) x/FORMAT ADDRESS&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;FORMAT specifies how we want to inspect memory.&lt;/li&gt;
&lt;li&gt;ADDRESS refers to the memory location we want to inspect.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;FORMAT is made up of three arguments.&lt;/p&gt;
&lt;p&gt;The third argument specifies how much memory we want to inspect.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;</description></item><item><title>The World Of Floats</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/floats/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/floats/</guid><description>
&lt;p&gt;The history of floats, the issues, the solutions, historical solutions and modern solutions, x87 FPU stack, SSE/AVX, ymm, zmm regs &lt;/p&gt;</description></item><item><title>Hello, World!</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/hello-world/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/hello-world/</guid><description>
&lt;p&gt;How To Print &amp;ldquo;Hello, World!&amp;rdquo; ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Store the hello world string somewhere in the memory.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Prepare a write syscall.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Invoke the syscall.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 4:&lt;/strong&gt; Prepare an exit syscall.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Step 5:&lt;/strong&gt; Invoke the syscall.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The assembly code for hello world looks like:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-asm" data-lang="asm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;.intel_syntax&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;noprefix&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;.section&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;.data&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; msg: &lt;span style="color:#a6e22e"&gt;.ascii&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Hello, world!\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;len&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;=&lt;/span&gt; . - &lt;span style="color:#66d9ef"&gt;msg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;.section&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.global&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;_start&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;_start:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;rax&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#75715e"&gt;# syscall number for write (1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;rdi&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#75715e"&gt;# file descriptor (stdout)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;rsi&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;offset&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;msg&lt;/span&gt; &lt;span style="color:#75715e"&gt;# pointer to the buffer to print
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;rdx&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;len&lt;/span&gt; &lt;span style="color:#75715e"&gt;# buffer length
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;syscall&lt;/span&gt; &lt;span style="color:#75715e"&gt;# invoke kernel
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# Exit syscall
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;rax&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;60&lt;/span&gt; &lt;span style="color:#75715e"&gt;# syscall number for exit (60)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;xor&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;rdi&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;rdi&lt;/span&gt; &lt;span style="color:#75715e"&gt;# exit code 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;syscall&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note: Indentation makes no sense in assembly, but I have write it for visual clarity.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Lets explore this line by line.&lt;/p&gt;
&lt;h2&gt;Line 1: Assembler Directive For Syntax Clarity&lt;span class="hx:absolute hx:-mt-20" id="line-1-assembler-directive-for-syntax-clarity"&gt;&lt;/span&gt;
&lt;a href="#line-1-assembler-directive-for-syntax-clarity" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Since we are writing in intel syntax but assembling it through GAS, we have to inform GAS about it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.intel_syntax&lt;/code&gt; tells GAS we are writing in intel syntax.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.no_prefix&lt;/code&gt; tells GAS to strictly avoid &lt;code&gt;%&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; in instructions.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Line 2: Define Data&lt;span class="hx:absolute hx:-mt-20" id="line-2-define-data"&gt;&lt;/span&gt;
&lt;a href="#line-2-define-data" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Remember, sections are assembler directives, not something that the CPU understands. This is for the assembler to maintain clarity in asm code.&lt;/p&gt;
&lt;p&gt;The data section keeps all the static and global initialized data variables.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.section&lt;/code&gt; marks the start of a section and &lt;code&gt;.data&lt;/code&gt; tells that it is data section.&lt;/p&gt;
&lt;p&gt;A section continues until a new section is defined. Therefore, both &lt;code&gt;msg&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; are part of the data section, where &lt;code&gt;msg&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; are &lt;strong&gt;constant labels&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: Sections can be user-defined as well. But they are for advance use-cases.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Line 3 And 4: DATA (Global And Static Variables)&lt;span class="hx:absolute hx:-mt-20" id="line-3-and-4-data-global-and-static-variables"&gt;&lt;/span&gt;
&lt;a href="#line-3-and-4-data-global-and-static-variables" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-asm" data-lang="asm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;msg: &lt;span style="color:#a6e22e"&gt;.ascii&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Hello, world!\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;len&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;=&lt;/span&gt; . - &lt;span style="color:#66d9ef"&gt;msg&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;msg:&lt;/code&gt; is a label. It can contain anything &amp;ldquo;but we are storing a string buffer in it&amp;rdquo;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What else can it contain? A future topic.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;len&lt;/code&gt; is a assembly-time constant. It calculates and contains the length of the buffer. It does this using the &lt;code&gt;.&lt;/code&gt; directive in GAS.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;.&lt;/code&gt; directive represents the current address in memory, where current address is defined as how much the assembler has moved in the memory.&lt;/li&gt;
&lt;li&gt;When we created a label &lt;code&gt;msg&lt;/code&gt;, memory started to get occupied. Once that is done, we came on &lt;code&gt;len&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Now the pointer is just after where the buffer finished. This is what the &lt;code&gt;.&lt;/code&gt; directive &amp;ldquo;&lt;strong&gt;in GAS&lt;/strong&gt;&amp;rdquo; represents.&lt;/li&gt;
&lt;li&gt;And the &lt;code&gt;msg&lt;/code&gt; label is a pointer to the start of the &amp;ldquo;hello world&amp;rdquo; buffer.&lt;/li&gt;
&lt;li&gt;Subtracting the two gives us the effective length of the &amp;ldquo;hello world!&amp;rdquo; buffer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Data section completed.&lt;/p&gt;
&lt;h2&gt;The Instructions Section&lt;span class="hx:absolute hx:-mt-20" id="the-instructions-section"&gt;&lt;/span&gt;
&lt;a href="#the-instructions-section" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;.section .text&lt;/code&gt; marks the start of text section. This section contains the instructions to the CPU. Basically, here goes the actual code.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.global&lt;/code&gt; is used to declare a symbol as globally accessible. Here, globally accessible means accessibility outside of the current file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Again, an assembler directive, allowing a symbol to be accessed in other files or modules during the linking process.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you remove it, the code will still work. But it is important when there are multiple files.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Example, a C project might have multiple source files combined to generate one binary. There it becomes important.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;_start&lt;/code&gt; is the memory location (a label) where the execution starts from. Same as main() in C.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is called by the OS. It is the entry-point label.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;.global _start&lt;/code&gt; makes &lt;code&gt;_start&lt;/code&gt; globally accessible.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: &lt;code&gt;_start&lt;/code&gt; is just another label. But this is what everyone has mutually agreed upon. Thus, assemblers look for it. We can define our own label and tell the linker to use it as well.&lt;/p&gt;
&lt;h2&gt;Syscall Setup&lt;span class="hx:absolute hx:-mt-20" id="syscall-setup"&gt;&lt;/span&gt;
&lt;a href="#syscall-setup" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;mov rax, 1&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;By convention, &lt;code&gt;rax&lt;/code&gt; is used to specify the system call number.&lt;/li&gt;
&lt;li&gt;1 identifies the &amp;ldquo;write&amp;rdquo; system call.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;move rdi, 1&lt;/code&gt; sets the file descriptor to 1, which is used for standard output. This ensures that we see &amp;ldquo;hello world!\n&amp;rdquo; in the terminal.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mov rsi, offset msg&lt;/code&gt; sets &lt;code&gt;rsi&lt;/code&gt; to hold the pointer to the message buffer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;offset&lt;/code&gt; is a GAS directive.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;mov rdx, len&lt;/code&gt; sets the length of the buffer in &lt;code&gt;rdx&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;syscall&lt;/code&gt;, invoke the syscall.&lt;/p&gt;
&lt;h3&gt;The &lt;code&gt;write&lt;/code&gt; Syscall&lt;span class="hx:absolute hx:-mt-20" id="the-write-syscall"&gt;&lt;/span&gt;
&lt;a href="#the-write-syscall" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;write(fd=rdi, buffer=rsi, buffer_len=rdx)`&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The write syscall is used to output data to a file descriptor.&lt;/p&gt;
&lt;p&gt;It takes 3 arguments which are passed through registers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Argument 1&lt;/strong&gt;: File descriptor.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This defines where to write or where the output would go.&lt;/li&gt;
&lt;li&gt;It goes in the &lt;code&gt;rdi&lt;/code&gt; register.&lt;/li&gt;
&lt;li&gt;0 for &lt;code&gt;stdin&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;1 for &lt;code&gt;stdout&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;2 for &lt;code&gt;stderr&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Argument 2&lt;/strong&gt;: Pointer to the buffer that contains the data to be written.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This defines where is the item that has to be written.&lt;/li&gt;
&lt;li&gt;This goes in &lt;code&gt;rsi&lt;/code&gt; register.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Argument 3&lt;/strong&gt;: Length of the buffer.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This defines the number of bytes to write.&lt;/li&gt;
&lt;li&gt;This goes in the &lt;code&gt;rdx&lt;/code&gt; register.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Exit Syscall&lt;span class="hx:absolute hx:-mt-20" id="exit-syscall"&gt;&lt;/span&gt;
&lt;a href="#exit-syscall" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;mov rax, 60&lt;/code&gt; sets the register for the next syscall, which is exit.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;xor rdi, rdi&lt;/code&gt; sets &lt;code&gt;rdi&lt;/code&gt; to 0 using a bitwise XOR (which is faster than &lt;code&gt;mov rdi, 0&lt;/code&gt;). This sets the exit code to zero.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;syscall&lt;/code&gt;, invoke the syscall.&lt;/p&gt;
&lt;p&gt;Done.&lt;/p&gt;
&lt;h2&gt;Fun Thing&lt;span class="hx:absolute hx:-mt-20" id="fun-thing"&gt;&lt;/span&gt;
&lt;a href="#fun-thing" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A hello world program written in C won&amp;rsquo;t translate to such an assembly. That&amp;rsquo;s a complete rabbit hole but the reason is that it uses C runtime for setup and cleanup, which makes the assembly slightly different.&lt;/p&gt;
&lt;p&gt;I have explored it in depth &lt;a href="../../understanding-hello-world/"&gt;here&lt;/a&gt;. But it is lengthy and takes time, so I would suggest not to explore that now.&lt;/p&gt;</description></item><item><title>Inspecting dlmalloc Using GDB</title><link>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/dma/inspecting-dlmalloc-using-gdb/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/all-roads-to-memory/dma/inspecting-dlmalloc-using-gdb/</guid><description>
&lt;p&gt;It&amp;rsquo;s time to see dlmalloc in action.&lt;/p&gt;
&lt;p&gt;Use a VM to setup dlmalloc&lt;/p&gt;
&lt;p&gt;Gnome Boxes is best for Linux&lt;/p&gt;
&lt;p&gt;Learn GDB&lt;/p&gt;</description></item><item><title>SIMD Instructions</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/simd/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/simd/</guid><description>
&lt;p&gt;Why rsp is 16 bytes aligned when we are on 8-byte arch?&lt;/p&gt;</description></item><item><title>The Idea Behind "Invisible Symbols"</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/invisible-symbols/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/invisible-symbols/</guid><description>
&lt;p&gt;What are symbols? why everything is a symbol?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt; prefixed symbols&lt;/p&gt;</description></item><item><title>Type Qualifiers</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/type-qualifiers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/type-qualifiers/</guid><description/></item><item><title>Format Specifier</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/format-specifier/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/format-specifier/</guid><description>
&lt;p&gt;what they mean to c and asm.&lt;/p&gt;
&lt;p&gt;syntax of writing a format specifier: like &lt;code&gt;0x%016llx&lt;/code&gt; &lt;/p&gt;</description></item><item><title>Numbers In Computer Science</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/binary-number-system/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/binary-number-system/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Polished on 07 September 2025 (written in May 2025)&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Number System Refresher&lt;span class="hx:absolute hx:-mt-20" id="number-system-refresher"&gt;&lt;/span&gt;
&lt;a href="#number-system-refresher" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Primarily we have 4 number systems. They are: binary, octal, decimal and hexadecimal.&lt;/p&gt;
&lt;p&gt;Normally we use the decimal number system.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;1 Byte = 8 Bits&lt;/p&gt;
&lt;p&gt;Now it&amp;rsquo;s time to dive into binary number system.&lt;/p&gt;
&lt;h2&gt;Revision&lt;span class="hx:absolute hx:-mt-20" id="revision"&gt;&lt;/span&gt;
&lt;a href="#revision" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Everyone learns number lines in elementary school.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;A pictorial representation of numbers on a straight line.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That number line has a zero which separates negative numbers from positive numbers.&lt;/p&gt;
&lt;p&gt;A whole number (-infinity to +infinity) with no fractional part is called an integer. A whole number with fractional part is a decimal.&lt;/p&gt;
&lt;h2&gt;Binary To Decimal Conversion&lt;span class="hx:absolute hx:-mt-20" id="binary-to-decimal-conversion"&gt;&lt;/span&gt;
&lt;a href="#binary-to-decimal-conversion" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Before we dive any further, it is important to understand how bits relate with decimals.&lt;/p&gt;
&lt;p&gt;To obtain the decimal equivalent of a group of bits, we just have to multiply each bit with a power of 2. &lt;/p&gt;
&lt;p&gt;For example: &lt;code&gt;0101&lt;/code&gt; ; to obtain it decimal equivalent, we have to multiply each digit right to left with a power of 2. The power starts from 0 and goes up to &lt;code&gt;digit - 1&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0101&lt;/code&gt; = &lt;code&gt;0* 2^3 + 1* 2^2 + 0* 2^1 + 1* 2^0&lt;/code&gt; = &lt;code&gt;0 + 4 + 0 + 1&lt;/code&gt; = 5.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have any problem, it is discussed &lt;strong&gt;in detail&lt;/strong&gt; below.&lt;/p&gt;
&lt;h2&gt;Types Of Numbers&lt;span class="hx:absolute hx:-mt-20" id="types-of-numbers"&gt;&lt;/span&gt;
&lt;a href="#types-of-numbers" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In computer science, there are 3 types of numbers, or, better is, 3 levels of difficulty with numbers.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unsigned integers are positive integers.&lt;/li&gt;
&lt;li&gt;Signed integers are &amp;ldquo;positive and negative Integers&amp;rdquo; &lt;em&gt;together.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Floating point values.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There is no name for &amp;ldquo;negative integers only&amp;rdquo; in computer science.&lt;/p&gt;
&lt;p&gt;Fractions are popularly known as &lt;strong&gt;floating point integers&lt;/strong&gt;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;In unsigned integers, it is simple.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When all the bits are 0, &lt;code&gt;0b00000000&lt;/code&gt;, it is 0.&lt;/li&gt;
&lt;li&gt;When all the bits are 1, &lt;code&gt;0b11111111&lt;/code&gt;, it is 255.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With signed integers comes problems.&lt;/p&gt;
&lt;p&gt;Signed integers are implemented using two&amp;rsquo;s complement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;What is 2&amp;rsquo;s complement? Discussed below.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To represent signed integers, we use the most significant bit as the sign bit. It is how we keep tracks of positivity and negativity.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0 = positive&lt;/li&gt;
&lt;li&gt;1 = negative&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;What is this most significant bit? Discussed below.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Thus, a group of 8-bits can represent -128 to +127. Their representation is as follows:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;0 =&amp;gt; 0b00000000
&amp;#43;127 =&amp;gt; 0b01111111
-128 =&amp;gt; 0b10000000
-1 =&amp;gt; 0b11111111&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Representing Negative Integers&lt;span class="hx:absolute hx:-mt-20" id="representing-negative-integers"&gt;&lt;/span&gt;
&lt;a href="#representing-negative-integers" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In binary number system, + and - holds no meaning. Complements are how we represent negative numbers here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Complements are mathematical transformations of binary numbers, specifically designed for how binary arithmetic works in computers.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most common ones are: 1&amp;rsquo;s and 2&amp;rsquo;s complement.&lt;/p&gt;
&lt;h3&gt;Types Of Bits&lt;span class="hx:absolute hx:-mt-20" id="types-of-bits"&gt;&lt;/span&gt;
&lt;a href="#types-of-bits" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Primarily there are two types of bits.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Least Significant Bit (LSB) : It is the rightmost bit in the binary representation of an integer. It is called &lt;strong&gt;least&lt;/strong&gt; because setting this ON/OFF has the least impact on the magnitude of the value.&lt;/li&gt;
&lt;li&gt;Most Significant Bit (MSB) : It is the leftmost bit in the binary representation of an integer. It is called &lt;strong&gt;most&lt;/strong&gt; because setting this ON/OFF has the largest possible impact on the magnitude of the value.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;15 is represented by &lt;code&gt;1111&lt;/code&gt; in 4-bits.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you set LSB to 0, we get &lt;code&gt;1110&lt;/code&gt; which is 14. The magnitude is lowered by 1 only.&lt;/li&gt;
&lt;li&gt;If you set MSB to 0, we get &lt;code&gt;0111&lt;/code&gt;, which is 7. The magnitude is lowered by 8.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1&amp;rsquo;s Complement&lt;span class="hx:absolute hx:-mt-20" id="1s-complement"&gt;&lt;/span&gt;
&lt;a href="#1s-complement" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The value you must add to a number so the result is a string of 1s or the result is the maximum value that you can represent with the number of bits.&lt;/p&gt;
&lt;p&gt;To get the 1&amp;rsquo;s complement of a binary number: Flip all bits (change 0s to 1s and 1s to 0s).&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 in binary is represented by: &lt;code&gt;0b00000101&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1&amp;rsquo;s complement of 5 (= -5): &lt;code&gt;0b11111010&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The problem with 1&amp;rsquo;s complement is that it has two representation of 0.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+0 = &lt;code&gt;0b00000000&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;-0 = &lt;code&gt;0b11111111&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But 0 is one digit. + and - are insignificant for it.&lt;/p&gt;
&lt;h3&gt;2&amp;rsquo;s Complement&lt;span class="hx:absolute hx:-mt-20" id="2s-complement"&gt;&lt;/span&gt;
&lt;a href="#2s-complement" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In 2&amp;rsquo;s complement, the number of possible combinations are divided into two halves.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lowe halve: positive integers&lt;/li&gt;
&lt;li&gt;Upper halve: negative integers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To obtain 2&amp;rsquo;s complement of a number:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Start with a binary representation.&lt;/li&gt;
&lt;li&gt;Get 1&amp;rsquo;s complement.&lt;/li&gt;
&lt;li&gt;Add 1 (0001) to the result.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;5 in binary is represented by: &lt;code&gt;0b00000101&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;1&amp;rsquo;s complement of 5: &lt;code&gt;0b11111010&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add 1: &lt;code&gt;0b11111010&lt;/code&gt; + &lt;code&gt;0b00000001&lt;/code&gt; = &lt;code&gt;0b11111011&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We get -5 in 2&amp;rsquo;s complement as &lt;code&gt;0b11111011&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0b00000101&lt;/code&gt; - &lt;code&gt;0b11111011&lt;/code&gt; = &lt;code&gt;0b00000000&lt;/code&gt;, Hence proved!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How 2&amp;rsquo;s complement this solves the problem of 0?&lt;span class="hx:absolute hx:-mt-20" id="how-2s-complement-this-solves-the-problem-of-0"&gt;&lt;/span&gt;
&lt;a href="#how-2s-complement-this-solves-the-problem-of-0" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Lets take an example using 4-bits, because combinations here are neither too less, nor too more.&lt;/p&gt;
&lt;p&gt;4-bits can represent 16 combinations, or better, &lt;strong&gt;16 unsigned integers&lt;/strong&gt; from 0 to 15. These combinations are: &lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;2&amp;rsquo;s complement divides these into two halves. Both of them gets 8 values each.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;Lower Half :: 0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111,
Upper Half :: 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We can use the range formula mentioned above to verify this:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;=&amp;gt; [(-2)^(4-1), 2^(4-1)-1]
=&amp;gt; [(-2)^3, (2^3)-1]
=&amp;gt; [-8, &amp;#43;7]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let&amp;rsquo;s see how the upper halve maps to negative integers.&lt;/p&gt;
&lt;p&gt;First of all, If you notice, all the combination in the upper half have the most significant bit set to 1.&lt;/p&gt;
&lt;p&gt;Second, to obtain integers from 8-15, 4th bit must be set to 1. But it is not required with 0-7. This is the distinction.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In 2&amp;rsquo;s complement, positive integers have their MSB set to 0 and negative integers have this bit set to 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now take the upper half and put it in the left of the lower halve. We&amp;rsquo;ll get something like this:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111, 0000, 0001, 0010, 0011, 0100, 0101, 0110, 0111
-8 -7 -6 -5 -4 -3 -2 -1 0 &amp;#43;1 &amp;#43;2 &amp;#43;3 &amp;#43;4 &amp;#43;5 &amp;#43;6 &amp;#43;7&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To obtain the negative representation of 0, we need the MSB as 1 and rest of the bits as 0, which brings us to 1000, which represents -8.&lt;/p&gt;
&lt;p&gt;We can notice a pattern from the grid above. Every negative integer is of the form &lt;code&gt;-(2^n) + (+ve integer)&lt;/code&gt; . For example:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;-8 =&amp;gt; -(2^4) &amp;#43; (&amp;#43;8) = -16 &amp;#43; 8 = -8 (1000)
-1 =&amp;gt; -(2^4) &amp;#43; (&amp;#43;1) = -16 &amp;#43; 1 = -15 (1111)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If we try the same for 0, we get&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;-0 =&amp;gt; -(2^4) &amp;#43; (&amp;#43;0) = -16 &amp;#43; 0 = -16&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;But 16 as a combination is not possible using 4-bits.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This proves that 2&amp;rsquo;s complement by design has no room for two representations of zero.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Binary Arithmetic&lt;span class="hx:absolute hx:-mt-20" id="binary-arithmetic"&gt;&lt;/span&gt;
&lt;a href="#binary-arithmetic" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Take out your elementary mathematics notes because we are going to need them&lt;/p&gt;
&lt;h3&gt;Unsigned Arithmetic&lt;span class="hx:absolute hx:-mt-20" id="unsigned-arithmetic"&gt;&lt;/span&gt;
&lt;a href="#unsigned-arithmetic" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Everything is same, only the borrowing value is different. But the borrow value is calculated the same way.&lt;/p&gt;
&lt;h4&gt;Addition&lt;span class="hx:absolute hx:-mt-20" id="addition"&gt;&lt;/span&gt;
&lt;a href="#addition" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Carry&lt;/strong&gt; once the sum exceeds 1. And dispose than 1 only when the result of a sum is 0.&lt;/p&gt;
&lt;p&gt;Basically, if the digits in sum are more than 1, you have to carry.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt; 0011 (3)
1101 (13)
= 10000 (16)
We have to add a new bit because the result exceeded the bit-limit.
0011 (3)
0110 (6)
= 1001 (9)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4&gt;Subtraction&lt;span class="hx:absolute hx:-mt-20" id="subtraction"&gt;&lt;/span&gt;
&lt;a href="#subtraction" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;em&gt;Take out you subtraction notes now. We are gonna need them. Just joking. If you don&amp;rsquo;t remember, you&amp;rsquo;ll.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We know that &lt;code&gt;10 - 8 = 2&lt;/code&gt;. And we can do the same for any operands. But this process has become so automatic that we have internalize the theory subconsciously and forget it consciously.&lt;/p&gt;
&lt;p&gt;To understand binary subtraction, we have to revisit how subtraction works.&lt;/p&gt;
&lt;p&gt;In decimal number system, every digit in a number has a &lt;em&gt;&lt;strong&gt;position&lt;/strong&gt;&lt;/em&gt; attached to it. For example, take &lt;code&gt;49521&lt;/code&gt; . Moving from right to left,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 is the ones digit,&lt;/li&gt;
&lt;li&gt;2 is the tens digit,&lt;/li&gt;
&lt;li&gt;5 is the hundreds digit,&lt;/li&gt;
&lt;li&gt;9 is the thousands digit, and&lt;/li&gt;
&lt;li&gt;4 is the ten-thousands digit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These positions aren&amp;rsquo;t NPCs, they have a purpose. And this &lt;em&gt;purpose&lt;/em&gt; is the whole &lt;strong&gt;purpose of our revisit.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We know that decimal system is a base-10 system. But what does that actually mean?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;It means that every position has a &lt;strong&gt;weight&lt;/strong&gt; attached to it, where &lt;strong&gt;weights&lt;/strong&gt; are indices raised to the power of base and &lt;strong&gt;indices&lt;/strong&gt;&lt;/em&gt; refers to a numerical identity, given to a position. &lt;em&gt;These &lt;strong&gt;indices&lt;/strong&gt; start from 0 and go till (number of digits - 1).&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The ones position carries a weight of 10^0 = 1.&lt;/li&gt;
&lt;li&gt;The tens position carries a weight of 10^1 = 10&lt;/li&gt;
&lt;li&gt;The hundreds position carries a weight of 10^2 = 100&lt;/li&gt;
&lt;li&gt;The thousands position carries a weight of 10^3 = 1000&lt;/li&gt;
&lt;li&gt;The ten-thousands position carries a weight of 10^4 = 10000&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;In division, we have dividend (numerator) and divisor (denominator). In subtraction, we have &lt;em&gt;&lt;strong&gt;minuend&lt;/strong&gt;&lt;/em&gt; and &lt;em&gt;&lt;strong&gt;subtrahend&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Even I can&amp;rsquo;t remember if I have heard these words before.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To keep things simple, if we have &lt;code&gt;op1 - op2&lt;/code&gt; operation, op1 is the &lt;em&gt;&lt;strong&gt;minuend&lt;/strong&gt;&lt;/em&gt; and op2 is the &lt;em&gt;&lt;strong&gt;subtrahend&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;There are multiple techniques to do subtraction.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In school, we have learned &lt;em&gt;&lt;strong&gt;column-based subtraction&lt;/strong&gt;&lt;/em&gt;, which involves borrowing from the left digits.&lt;/li&gt;
&lt;li&gt;We can &lt;strong&gt;add equal&lt;/strong&gt; numbers to both minuend and subtrahend and make the subtrahend end with zero. It helps visually, that&amp;rsquo;s it.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Subtraction&lt;/strong&gt; by complement. A quite easy way to do subtraction, and computers this.&lt;/li&gt;
&lt;li&gt;Most simplest way, &lt;strong&gt;counting&lt;/strong&gt;, &lt;em&gt;even though I confuse that as well, sometimes&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Decomposition&lt;/strong&gt;. I love this one and use it quite often, when I don&amp;rsquo;t have calculator. We break numbers in pairs of 10s. Like 4215 can be broken into 4200 + 15. 2307 can be broken into 2300 + 7. 4200 - 2300 is simple, 1900. So as 15 - 7, 8. Add at last, 1900 + 8, result = 1908. I use this in addition as well.&lt;/li&gt;
&lt;li&gt;And yes, I didn&amp;rsquo;t forget calculator!&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;We have to study column-based subtraction for binary bits.&lt;/p&gt;
&lt;p&gt;When doing column-based subtraction, we subtract digits at corresponding positions in minuend and subtrahend. For example: 4215 and 2307. The digit at ones position (7) will be subtracted from the digit at ones position (5) only.&lt;/p&gt;
&lt;p&gt;Sometimes, we get stuck when the corresponding minuend is lesser than the subtrahend. In that case, we &lt;em&gt;&lt;strong&gt;borrow&lt;/strong&gt;&lt;/em&gt; from the left side. This is where the problem is.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s take &lt;code&gt;10 - 4&lt;/code&gt; as borrowing is inevitable here.&lt;/p&gt;
&lt;p&gt;We are taught that when we borrow, we reduce the one from the lender and add 10 to the borrower. So, 0 borrowing from 1 becomes 10. Now it can subtract.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;You may ask, it was 10 before as well. And seriously, I also want to know the &amp;ldquo;commonsense&amp;rdquo; behind this. But anyways.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Similarly, in &lt;code&gt;20 - 4&lt;/code&gt;, we just need 10, not the entire 20. Upon looking closely, 20 is just 10+10. Problem solved. Take out one 10 and give it to 0.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;But why 10 only? Why not any arbitrary number? And the answer is &lt;strong&gt;weight&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Treat positions like containers, where every container has a limit on how much it can contain.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The ones position has a weight 10^0 or 1. It can&amp;rsquo;t contain more than that. And 1 here represents the base value, which is 10, not the literal 1.&lt;/li&gt;
&lt;li&gt;That is why we have never borrowed more than 10. Because it can&amp;rsquo;t hold more. And to keep thing consistent, we borrow the max value, not any arbitrary digit.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;That&amp;rsquo;s all we need to know. &lt;em&gt;Looks easy huh?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Lets tackle binary subtraction now.&lt;/p&gt;
&lt;p&gt;There are 4 rules, 3 of them are straightforward. And one is the rebel.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;0 - 0 = 0
1 - 1 = 0
1 - 0 = 1
0 - 1 = 1 # the problem&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Take this:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;_ 0110 (6)
0100 (4)
= 0010 (2)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Simple.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And these?&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;_ 0100 (4)
0001 (1)
= 0011
_ 1010 (10)
0011 (3)
= 0111&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you are questioning &lt;em&gt;what and how&lt;/em&gt;, then we are on the same page. I have also wasted hours figuring out the same.&lt;/p&gt;
&lt;p&gt;Anyone who has spend time with binary knows about &amp;ldquo;8 4 2 1&amp;rdquo;. Some might know it by name, others use it as is. I fall in the others category.&lt;/p&gt;
&lt;p&gt;My search brought me to this YouTube video: &lt;a href="https://www.youtube.com/watch?v=AE-27BSbkJ4%5c&amp;amp;t=629s%5c&amp;amp;pp=ygUSYmluYXJ5IHN1YnRyYWN0aW9u"target="_blank" rel="noopener"&gt;Binary Addition and Subtraction Explained (with Examples)&lt;/a&gt;. And the first time, I got introduced to the term &lt;strong&gt;weights&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;These 8 4 2 1 are the weights in binary number system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To obtain weight for any given position, we use this formula: &lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;Weight For Position i = (base)^i&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lets look at the minuend, &lt;code&gt;1010&lt;/code&gt;. The weights attached to each digit are: &lt;code&gt;[2^3:1, 2^2:0, 2^1:1, 2^0:0]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To convert binary representation into decimal, we have to multiply the digit with its weight and sum-up the result. For example, 1010. The weights are 8421. We get &lt;code&gt;8 + 2 = 10&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;From this, can we say that,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 at 0th bit position represents &lt;code&gt;2^0&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;1 at 3rd bit represents &lt;code&gt;2^3&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;And a 1 at position &lt;code&gt;i&lt;/code&gt; represents &lt;code&gt;2^i&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A bit at index 3 is basically inside a container which can hold a maximum value of &lt;code&gt;2^3&lt;/code&gt; (size in decimals). But in binary, it is still about 0 and 1.&lt;/p&gt;
&lt;p&gt;I think &lt;code&gt;10 - 3&lt;/code&gt; is a really complex binary subtraction primarily because of how borrowing works.&lt;/p&gt;
&lt;p&gt;To visualize borrowing, lets take a simple example.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;8 - 3 = 5
_ 1000 (Minuend, 8)
0011 (Subtrahend, 3)
= ____&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Subtraction process starts the same, from right towards left.&lt;/p&gt;
&lt;p&gt;Here is a simple table to condense this information.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Attribute&lt;/th&gt;
&lt;th&gt;Value At Bit&lt;/th&gt;
&lt;th&gt;Value At Bit&lt;/th&gt;
&lt;th&gt;Value At Bit&lt;/th&gt;
&lt;th&gt;Value At Bit&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Index&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Weight&lt;/td&gt;
&lt;td&gt;2^3 = 8&lt;/td&gt;
&lt;td&gt;2^2 = 4&lt;/td&gt;
&lt;td&gt;2^1 = 2&lt;/td&gt;
&lt;td&gt;2^0 = 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Minuend&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Subtrahend&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now lets understand &lt;em&gt;&lt;strong&gt;borrowing&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bit-0 subtraction needs borrowing. It goes to bit-1.&lt;/li&gt;
&lt;li&gt;bit-1 also needs borrowing. It goes to bit-2.&lt;/li&gt;
&lt;li&gt;bit-2 also needs borrowing. It goes to bit-3.&lt;/li&gt;
&lt;li&gt;bit-3 is 1, so it can lend. The weight attached to bit 3 is 8.&lt;/li&gt;
&lt;li&gt;bit-2 has come to ask for lending from bit-3. But the maximum that bit-2 can contain is 2^2. But bit-3 can lend 2^3 only. Because in binary, either you have 0 or you have 1.&lt;/li&gt;
&lt;li&gt;So bit-3 breaks itself as 4+4, which is same as 2 units of 2^2. And notice, 2^2 is exactly what bit-2 can hold at max. But there are two units. &lt;em&gt;Lets not go any further and assume it can hold it&lt;/em&gt;. Lending successful.&lt;/li&gt;
&lt;li&gt;Status:
&lt;ul&gt;
&lt;li&gt;bit-3 = 0&lt;/li&gt;
&lt;li&gt;bit-2 = something that 2*(2^2) might refer to.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Now bit-2 lends to bit-1. It has got two units of 2^2.&lt;/li&gt;
&lt;li&gt;But again, bit-1 can hold up to 2^1 only. So bit-2 breaks one of its units 2^2 as 2 * (2^1). And lends it to bit-1. Lending successful.&lt;/li&gt;
&lt;li&gt;Status:
&lt;ul&gt;
&lt;li&gt;bit-3: 0&lt;/li&gt;
&lt;li&gt;bit-2: something that 2^2 might refer to. One unit is now given to bit-1.&lt;/li&gt;
&lt;li&gt;bit-1: something that 2*(2^1) might refer to.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Now bit-1 lends to bit-0. It has two units of 2^1.&lt;/li&gt;
&lt;li&gt;But once again, bit-0 can only hold up to 2^0. So bit-1 breaks one of its units 2^1 as 2 * (2^0), And lends it to bit-0. Lending successful.&lt;/li&gt;
&lt;li&gt;Status:
&lt;ul&gt;
&lt;li&gt;bit-3: 0&lt;/li&gt;
&lt;li&gt;bit-2: something that 2^2 might refer to.&lt;/li&gt;
&lt;li&gt;bit-1: something that 2^1 might refer to. One unit is now given to bit-0.&lt;/li&gt;
&lt;li&gt;bit-0: something that 2*(2^0) might refer to.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, no more lending or borrowing.&lt;/p&gt;
&lt;p&gt;What is this &amp;ldquo;something that __ might refer to&amp;rdquo;? What do they actually refer to?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Just look at them, you&amp;rsquo;ll find your answer.&lt;/li&gt;
&lt;li&gt;bit-3 is already zeroed, so no confusion.&lt;/li&gt;
&lt;li&gt;bit-2 is 2^2, from the table above, it is exactly the weight it can contain, that means, a 1.&lt;/li&gt;
&lt;li&gt;bit-1 is 2^1, from the table above, it is exactly the weight it can contain, that means, a 1.&lt;/li&gt;
&lt;li&gt;bit-0 is 2 units of 2^0 or better, 2 units of 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, lets do the subtraction.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;_ 1 0 0 0
0 0 1 1
can be written as
_ 0 1 1 (1&amp;#43;1)
0 0 1 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I don&amp;rsquo;t think its tough anymore. The answer is 0101, precisely what we needed.&lt;/p&gt;
&lt;p&gt;Lets tackle the final boss now, which spiraled me to understand subtraction from its roots.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;_ 1 0 1 0 (10)
0 0 1 1 (3)
can be written as
_ 0 1 (1&amp;#43;1) (1&amp;#43;1)
0 0 1 1
= 0 1 1 1 (7)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;And, we are done!&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the end, binary subtraction is mysterious because of the fundamentals not being right.&lt;/p&gt;
&lt;p&gt;Most of the people advising &amp;ldquo;&lt;em&gt;Your fundamentals have to be really strong&lt;/em&gt;&amp;rdquo; might not even realize the depth of their statement. It can easily turn into a rabbit hole because of our incomplete understanding and things becoming automatic (subconscious).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But don&amp;rsquo;t assume this was the final boss.&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Signed Arithmetic&lt;span class="hx:absolute hx:-mt-20" id="signed-arithmetic"&gt;&lt;/span&gt;
&lt;a href="#signed-arithmetic" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Computers use 2&amp;rsquo;s complement so it is pretty straightforward.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A - B&lt;/code&gt; becomes &lt;code&gt;A + (-B)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We obtain &lt;code&gt;-B&lt;/code&gt; using 2&amp;rsquo;s complement.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;A = 0101 (5)
B = 0011 (3)
5 - 3 = 2
A - B =&amp;gt; A &amp;#43; (-B)
-B = 1&amp;#39;s complement (B) &amp;#43; 0011
= 1100 &amp;#43; 0001
= 1101
A - B = A &amp;#43; (-B)
= 0101 &amp;#43; 1101
= 10010 (discard carry)
= 0010
= 2
Hence Proved&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Conclusion&lt;span class="hx:absolute hx:-mt-20" id="conclusion"&gt;&lt;/span&gt;
&lt;a href="#conclusion" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It is no black magic, first of all.&lt;/p&gt;
&lt;p&gt;Second, signed numbers and floats is where the problem is.&lt;/p&gt;</description></item><item><title>Endianness</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/endianness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/endianness/</guid><description/></item><item><title>Preprocessing Directives</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/preprocessing-directives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/preprocessing-directives/</guid><description/></item><item><title>Bitwise Operations</title><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/bitwise-operations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/orientation/bitwise-operations/</guid><description>
&lt;p&gt;&lt;em&gt;&lt;strong&gt;08 September 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Introduction&lt;span class="hx:absolute hx:-mt-20" id="introduction"&gt;&lt;/span&gt;
&lt;a href="#introduction" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As named, bitwise operations are logical operations performed on the individual bits of a binary representation.&lt;/p&gt;
&lt;p&gt;We have logic gates like &lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, &lt;code&gt;NOT&lt;/code&gt; and others which are made up of these fundamental logic gates, like &lt;code&gt;NOR&lt;/code&gt; and &lt;code&gt;XOR&lt;/code&gt;. When we perform these logical operations on bits, it becomes a bitwise operation.&lt;/p&gt;
&lt;p&gt;From boolean algebra, we know this.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;1 and 1 = 1
1 or 1 = 1
1 and 0 = 0
1 or 0 = 1
0 and 0 = 0
0 or 0 = 0&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The same idea is applied either it is normal logical operations or bitwise operations.&lt;/p&gt;
&lt;p&gt;In C, we use:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Operation&lt;/th&gt;
&lt;th&gt;Symbol&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AND&lt;/td&gt;
&lt;td&gt;&amp;amp;&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OR&lt;/td&gt;
&lt;td&gt;||&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NOT&lt;/td&gt;
&lt;td&gt;!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bitwise AND&lt;/td&gt;
&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bitwise OR&lt;/td&gt;
&lt;td&gt;|&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bitwise NOT&lt;/td&gt;
&lt;td&gt;~&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Left shift&lt;/td&gt;
&lt;td&gt;&amp;laquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Right shift&lt;/td&gt;
&lt;td&gt;&amp;raquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let&amp;rsquo;s take some examples to understand how bitwise operations work&lt;/p&gt;
&lt;h2&gt;Examples&lt;span class="hx:absolute hx:-mt-20" id="examples"&gt;&lt;/span&gt;
&lt;a href="#examples" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In bitwise AND, compare the bits in both the operands and put 1 in the output for that bit if both the operands have 1, else 0.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;5 &amp;amp; 5 = 5
0101
&amp;amp; 0101
------
= 0101
------&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;5 &amp;amp; 6 = 4
0101
&amp;amp; 0110
------
= 0100
------&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In bitwise OR, compare the bits in both operands and put 1 in the output bit if at least one operand bit is 1, else 0.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;5 | 5 = 5
0101
| 0101
------
= 0101
------&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;5 | 6 = 7
0101
&amp;amp; 0110
------
= 0111
------&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In bitwise NOT, flip all the bits in the output.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt; 6 = 0110
~6 = 1001 (-7)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Be cautious and remember the rule of &lt;strong&gt;interpretation&lt;/strong&gt; as the output might not be what you expect if you don&amp;rsquo;t factor it. Take this: &lt;code&gt;int a = ~6;&lt;/code&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you use &lt;code&gt;%d&lt;/code&gt; format specifier, you &lt;code&gt;-7&lt;/code&gt; as ints are signed by default.&lt;/li&gt;
&lt;li&gt;If you use &lt;code&gt;%u&lt;/code&gt; format specifier, you get &lt;code&gt;4294967289&lt;/code&gt; as it interprets the value as unsigned int.&lt;/li&gt;
&lt;li&gt;And it is applicable to any pattern that can produce both signed and unsigned interpretations.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The bitwise XOR operation is made up of all the three fundamental operations.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;XOR(A, B) = (A AND NOT B) OR (B AND NOT A) .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In simple words, set the bit to 1 where the bits are different.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;5 ^ 6 = 3
0101
^ 0110
------
= 0011
------&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;Let&amp;rsquo;s talk about shifts now.&lt;/p&gt;
&lt;p&gt;In left shift, we move from right to left and shift all the bits by n positions and the new bits in right will be 0. For example,&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;5 &amp;lt;&amp;lt; 2
=&amp;gt; 00000101 &amp;lt;&amp;lt; 2
=&amp;gt; 00010100&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;So &lt;code&gt;5 &amp;lt;&amp;lt; 2&lt;/code&gt; = &lt;code&gt;20&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In right shift, we move all bits to the &lt;strong&gt;right&lt;/strong&gt; by &lt;code&gt;n&lt;/code&gt; positions. We have two options here.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Arithmetic right shift is where the sign is preserved. The new bits on the left are copies of the &lt;strong&gt;sign bit&lt;/strong&gt;. For example:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;11010000 &amp;gt;&amp;gt; 2
=&amp;gt; 11110100
00001100 &amp;gt;&amp;gt; 2
=&amp;gt; 00000011&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logical right shift is normal shifting. For example:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;11010000 &amp;gt;&amp;gt; 2
=&amp;gt; 00110100&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If the value get passed the limit, it is discarded. For example:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;11001100 &amp;lt;&amp;lt; 2
=&amp;gt; 00110000
00001100 &amp;gt;&amp;gt; 4
=&amp;gt; 00000000&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Rotation&lt;span class="hx:absolute hx:-mt-20" id="rotation"&gt;&lt;/span&gt;
&lt;a href="#rotation" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Rotation is shifting with wrapping. The values which get past the container limit are wrapped on the other side.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;10110001 rol 2
=&amp;gt; 11000110
10110001 ror 2
=&amp;gt; 01101100&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;What Use?&lt;span class="hx:absolute hx:-mt-20" id="what-use"&gt;&lt;/span&gt;
&lt;a href="#what-use" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;Performance&lt;span class="hx:absolute hx:-mt-20" id="performance"&gt;&lt;/span&gt;
&lt;a href="#performance" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Bitwise operation are single instructions and multiplication/division is more costlier. So, if the system can achieve the same thing with bitwise ops, it optimizes for that.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;(x &amp;lt;&amp;lt; n``) ~= (x* 2^n)&lt;/code&gt; . &lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;5 &amp;lt;&amp;lt; 2 = 20
5*(2^2) = 5*4 = 20&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;(x &amp;gt;&amp;gt; n``) ~= (x/ 2^n)&lt;/code&gt;.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;5 &amp;gt;&amp;gt; 2 = 1
5/(2^2) = 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Data Compression&lt;span class="hx:absolute hx:-mt-20" id="data-compression"&gt;&lt;/span&gt;
&lt;a href="#data-compression" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We can use one a single int to compress multiple information and use bit shifts to obtain the correct values.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;span class="hx:absolute hx:-mt-20" id="conclusion"&gt;&lt;/span&gt;
&lt;a href="#conclusion" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Bitwise Operation&lt;/th&gt;
&lt;th&gt;Symbol in C&lt;/th&gt;
&lt;th&gt;Instruction In x64 Assembly&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bitwise AND&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;and reg, reg/mem/imm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Keeps only common &lt;code&gt;1&lt;/code&gt; bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bitwise OR&lt;/td&gt;
&lt;td&gt;&lt;code&gt;|&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;or reg, reg/mem/imm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bitwise XOR&lt;/td&gt;
&lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;xor reg, reg/mem/imm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Sets bit if different&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bitwise NOT&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;not reg/mem&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Flips all bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logical AND (boolean)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;test reg, reg/mem&lt;/code&gt; + &lt;code&gt;jcc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;In C it’s short-circuit; in asm use &lt;code&gt;test&lt;/code&gt;/&lt;code&gt;cmp&lt;/code&gt; + jump&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logical OR (boolean)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;||&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logical NOT (boolean)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;!&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;test&lt;/code&gt;/&lt;code&gt;cmp&lt;/code&gt; + &lt;code&gt;setz&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Inverts truth value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Left Shift&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shl reg, imm/cl&lt;/code&gt; or &lt;code&gt;sal reg, imm/cl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Fill right with &lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Right Shift (logical)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; (unsigned)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;shr reg, imm/cl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Fill left with &lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Right Shift (arith.)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; (signed)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sar reg, imm/cl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Fill left with sign bit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rotate Left&lt;/td&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rol reg, imm/cl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Bits wrap left-to-right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rotate Right&lt;/td&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ror reg, imm/cl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Bits wrap right-to-left&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rotate Left w/ Carry&lt;/td&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rcl reg, imm/cl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Includes CF as extra bit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rotate Right w/ Carry&lt;/td&gt;
&lt;td&gt;–&lt;/td&gt;
&lt;td&gt;&lt;code&gt;rcr reg, imm/cl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Includes CF as extra bit&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description></item><item><title/><link>https://hi-anki.github.io/gitbook/docs/extras/garbage-collection/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/extras/garbage-collection/</guid><description>
&lt;h1&gt;What Is Garbage Collection?&lt;/h1&gt;</description></item><item><title/><link>https://hi-anki.github.io/gitbook/docs/extras/how-package-management-works/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/extras/how-package-management-works/</guid><description>
&lt;h1&gt;How Package Management Works?&lt;/h1&gt;&lt;p&gt;apt, npm, yarn, pip&lt;/p&gt;
&lt;p&gt;sources&lt;/p&gt;
&lt;p&gt;repositories&lt;/p&gt;
&lt;p&gt;gpg keys&lt;/p&gt;
&lt;p&gt;channels&lt;/p&gt;
&lt;p&gt;contrib main non-free&lt;/p&gt;</description></item><item><title/><link>https://hi-anki.github.io/gitbook/docs/extras/inline-assembly/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/extras/inline-assembly/</guid><description>
&lt;h1&gt;Inline Assembly&lt;/h1&gt;</description></item><item><title/><link>https://hi-anki.github.io/gitbook/docs/extras/processes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/extras/processes/</guid><description>
&lt;h1&gt;Introduction To Processes In Linux&lt;/h1&gt;&lt;h2&gt;Introduction To Processes&lt;span class="hx:absolute hx:-mt-20" id="introduction-to-processes"&gt;&lt;/span&gt;
&lt;a href="#introduction-to-processes" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A process is an instance of a running program. Every time you execute a command or run a program, the Linux kernel creates a process to run it.&lt;/p&gt;
&lt;p&gt;Every process gets a virtual address space (VAS), which is mostly made up of the program image.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A virtual memory address (VMA) is the same as the name of a street and the physical memory address (PMA) is the actual GPS coordinates.&lt;/li&gt;
&lt;li&gt;Two cities can have a &amp;ldquo;main street&amp;rdquo; but their coordinates would be unique.&lt;/li&gt;
&lt;li&gt;Every process gets its own isolated address space, thanks to virtual memory. So your program might access 0x400000, but that doesn&amp;rsquo;t mean that&amp;rsquo;s the physical address.&lt;/li&gt;
&lt;li&gt;The OS + hardware&amp;rsquo;s MMU (Memory Management Unit) maps VMA to PMA.&lt;/li&gt;
&lt;li&gt;Without the MMU, all processes would share the same memory space — like roommates with no walls.
&lt;ul&gt;
&lt;li&gt;A bug in one process could overwrite another process&amp;rsquo;s memory.&lt;/li&gt;
&lt;li&gt;With MMU, each process gets its own private virtual address space. It&amp;rsquo;s still messy on ground level but easier for management. It&amp;rsquo;s a nice abstraction.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Process Hierarchy&lt;span class="hx:absolute hx:-mt-20" id="process-hierarchy"&gt;&lt;/span&gt;
&lt;a href="#process-hierarchy" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Processes follow a tree like structure in linux.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first process is &lt;code&gt;init&lt;/code&gt; or &lt;code&gt;systemd&lt;/code&gt;, depending on the system, which is started by the kernel. It&amp;rsquo;s PID is 1, and PPID is 0.&lt;/li&gt;
&lt;li&gt;Every process is created by another process (its parent process).&lt;/li&gt;
&lt;li&gt;Every process is a descendant of the &lt;code&gt;init&lt;/code&gt; process.&lt;/li&gt;
&lt;li&gt;Processes follow a parent-child relationship. Although each process is independent in nature, and the execution of a sub-process doesn&amp;rsquo;t hinder the execution of the parent process, still, the child process is linked with the parent process and it has to report its exit status.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To view the tree like structure of processes, use &lt;code&gt;pstree&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Why does process hierarchy exists? Why can&amp;rsquo;t processes be truly independent?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To understand this, we need to understand how processes are created.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Process Creation&lt;span class="hx:absolute hx:-mt-20" id="process-creation"&gt;&lt;/span&gt;
&lt;a href="#process-creation" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It is a 4 step &amp;ldquo;process&amp;rdquo;.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;Each process may require other helper processes.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For example, when I did &lt;code&gt;pstree&lt;/code&gt;, I found that VS Code is not a standalone process. It has a lot of sub-processes. Like the terminal opened within VS Code comes under it, not as a fully independent process with no parent.&lt;/li&gt;
&lt;li&gt;The same is with Firefox and everything else.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hierarchical structure is not just a design philosophy, but a very logical decision.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is a proper way to manage which process spawned which sub-process.&lt;/li&gt;
&lt;li&gt;We fork the calling process (parent process), keep the identifying metadata as it is and replace the old process image with the new one. This ensures that the child process has proper links to the parent process, without any hustle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Every process is independent in its execution. But it is answerable to the parent process so that it knows if the sub-process exited successfully or it acquired any problem.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Just like children, who are although independent but they are always answerable to their parents.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Key Properties Of A Process&lt;span class="hx:absolute hx:-mt-20" id="key-properties-of-a-process"&gt;&lt;/span&gt;
&lt;a href="#key-properties-of-a-process" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;PID (Process ID)&lt;/td&gt;
&lt;td&gt;Unique identifier of a process.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PPID (Parent Process ID)&lt;/td&gt;
&lt;td&gt;Unique identifier of the process that created the PID process&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UID (User ID)&lt;/td&gt;
&lt;td&gt;Who owns the process&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;State&lt;/td&gt;
&lt;td&gt;Running, sleeping, zombie etc&amp;hellip;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Memory Info&lt;/td&gt;
&lt;td&gt;RAM consumption&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Executable code and data&lt;/td&gt;
&lt;td&gt;What it’s running and working with&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h2&gt;A Real Example&lt;span class="hx:absolute hx:-mt-20" id="a-real-example"&gt;&lt;/span&gt;
&lt;a href="#a-real-example" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We are going to run an ELF binary made from this C code and see how Linux does all the magic.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;unistd.h&amp;gt; // sleep()&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sleep&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;400&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To get the final ELF binary:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;gcc main.c -o main_elf&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Step1 - Call The Binary&lt;span class="hx:absolute hx:-mt-20" id="step1---call-the-binary"&gt;&lt;/span&gt;
&lt;a href="#step1---call-the-binary" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To call or execute the binary (&lt;code&gt;main_elf&lt;/code&gt;), we need a shell (or terminal).&lt;/p&gt;
&lt;p&gt;I have opened my shell, which is zsh.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ echo $SHELL
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/usr/bin/zsh&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;zsh&lt;/code&gt; itself is a &amp;ldquo;running&amp;rdquo; process.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-zsh" data-lang="zsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ps
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;PID TTY TIME CMD
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;41027&lt;/span&gt; pts/0 00:00:01 zsh
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;49852&lt;/span&gt; pts/0 00:00:00 ps&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Run the binary in background so that we can retain the shell session.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./main_elf &amp;amp;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;[&lt;/span&gt;1&lt;span style="color:#f92672"&gt;]&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;52184&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;ps&lt;/code&gt; ~&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ps
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;PID TTY TIME CMD
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;41027&lt;/span&gt; pts/0 00:00:02 zsh
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;52184&lt;/span&gt; pts/0 00:00:00 main_elf
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;52325&lt;/span&gt; pts/0 00:00:00 ps&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Since main_elf is executed within zsh, zsh must be the parent of main_elf? Lets verify this.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ps -T -o pid,ppid,cmd
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;PID PPID CMD
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;41027&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;40797&lt;/span&gt; /usr/bin/zsh -i
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;59461&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;41027&lt;/span&gt; ./main_elf
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;59559&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;41027&lt;/span&gt; ps -T -o pid,ppid,cmd&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-T&lt;/code&gt; shows processes for the current terminal session.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o&lt;/code&gt; helps in custom formatting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This proves that the &lt;code&gt;zsh&lt;/code&gt; process was forked and the child process (main_elf) born from it.&lt;/p&gt;
&lt;p&gt;Until now, we can say that a base template for the child process is created.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Now we have to find the evidence for the process image replacement.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Step2 - Correct (Replace) The Process Image In The Child Process (Fork)&lt;span class="hx:absolute hx:-mt-20" id="step2---correct-replace-the-process-image-in-the-child-process-fork"&gt;&lt;/span&gt;
&lt;a href="#step2---correct-replace-the-process-image-in-the-child-process-fork" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A fork is a near-clone of the parent process. But the child process is a different program than the parent. Therefore, the process image must have been changed.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;strace&lt;/code&gt; is a Linux utility which helps in tracing all the syscalls a process has executed.&lt;/p&gt;
&lt;p&gt;If we run our program with &lt;code&gt;strace&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;strace ./main_elf&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;we can find a long list of output, which starts from &lt;code&gt;execve&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What is &lt;code&gt;execve&lt;/code&gt;?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In simple words, &lt;code&gt;execve&lt;/code&gt; is a syscall which executes a binary.&lt;/li&gt;
&lt;li&gt;In real terms, &lt;code&gt;execve&lt;/code&gt; is a syscall which executes a binary passed in the &lt;code&gt;pathname&lt;/code&gt; argument by replacing the process image of the current process (not the child process, the current process).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execve&lt;/code&gt; is designed to be paired with &lt;code&gt;fork&lt;/code&gt; in order to fit Linux&amp;rsquo;s hierarchical process structure.&lt;/li&gt;
&lt;li&gt;This is the signature of the &lt;code&gt;execve&lt;/code&gt; syscall, &lt;code&gt;int execve(const char *pathname, char *const _Nullable argv[], char *const _Nullable envp[]);&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pathname&lt;/code&gt; is the name of the binary.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;argv[]&lt;/code&gt; is a &lt;code&gt;NULL&lt;/code&gt; terminated array of arguments passed to the binary.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;envp[]&lt;/code&gt; is a &lt;code&gt;NULL&lt;/code&gt; terminated array of environment variables required in the process image.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;What is a process image?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Just imagine how crazy and chaotic it would get to manage millions of process inside a single RAM, with all demanding various services including stack and heap.&lt;/li&gt;
&lt;li&gt;This is why an abstraction known as virtual address space (VAS) exist. Every process is executed in an isolated environment called virtual address space.&lt;/li&gt;
&lt;li&gt;A process image is the complete in-memory layout of a program after it has been loaded into memory by the OS.&lt;/li&gt;
&lt;li&gt;It is the answer to the question, &amp;ldquo;What the process looks like in the RAM?&amp;rdquo; A process image is the memory representation of a program at runtime.&lt;/li&gt;
&lt;li&gt;It includes code, data, stack, heap, environment, memory-mapped regions, loaded libraries etc&amp;hellip;.&lt;/li&gt;
&lt;li&gt;It is created by the kernel during &lt;code&gt;execve()&lt;/code&gt;, based on the ELF layout.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the whole process that &lt;code&gt;execve&lt;/code&gt; syscall carries out.&lt;/p&gt;
&lt;p&gt;The kernel opens the binary (&lt;code&gt;main_elf&lt;/code&gt;) using virtual file system (VFS).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It reads the ELF Header (first 64 bytes) to confirm that it is an ELF file, and find the &lt;code&gt;e_type&lt;/code&gt;, &lt;code&gt;e_entry&lt;/code&gt; and Program Headers Table (PHT) for carrying out its job.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is VFS and Why the kernel is using it?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s an abstraction layer inside the Linux kernel that provides a uniform interface to access all kinds of file systems — regardless of their actual formats or physical devices.&lt;/li&gt;
&lt;li&gt;There exist multiple file systems, like ext4, btrfs, zfs, hfs, ntfs, fat32 and so on&amp;hellip;. If there is no VFS, the kernel has to learn to speak in all the different file systems.&lt;/li&gt;
&lt;li&gt;VFS knows how to talk to different file systems and provide the kernel with a consistent interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The kernel loads the binary into memory by reading the PHT.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It maps each segment defined in the PHT into memory regions using &lt;code&gt;mmap()&lt;/code&gt; (memory map) syscall and sets the permissions (R, W, X) accordingly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This is the PHT for our ELF:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ readelf -l main_elf
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Elf file type is DYN &lt;span style="color:#f92672"&gt;(&lt;/span&gt;Position-Independent Executable file&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Entry point 0x1060
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;There are &lt;span style="color:#ae81ff"&gt;14&lt;/span&gt; program headers, starting at offset &lt;span style="color:#ae81ff"&gt;64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Program Headers:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Type Offset VirtAddr PhysAddr FileSiz MemSiz Flags Align
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PHDR 0x0000000000000040 0x0000000000000040 0x0000000000000040 0x0000000000000310 0x0000000000000310 R 0x8
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; INTERP 0x0000000000000394 0x0000000000000394 0x0000000000000394 0x000000000000001c 0x000000000000001c R 0x1
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt;Requesting program interpreter: /lib64/ld-linux-x86-64.so.2&lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; LOAD 0x0000000000000000 0x0000000000000000 0x0000000000000000 0x0000000000000660 0x0000000000000660 R 0x1000
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; LOAD 0x0000000000001000 0x0000000000001000 0x0000000000001000 0x0000000000000179 0x0000000000000179 R E 0x1000
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; LOAD 0x0000000000002000 0x0000000000002000 0x0000000000002000 0x000000000000010c 0x000000000000010c R 0x1000
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; LOAD 0x0000000000002dd0 0x0000000000003dd0 0x0000000000003dd0 0x0000000000000250 0x0000000000000258 RW 0x1000
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; DYNAMIC 0x0000000000002de0 0x0000000000003de0 0x0000000000003de0 0x00000000000001e0 0x00000000000001e0 RW 0x8
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; NOTE 0x0000000000000350 0x0000000000000350 0x0000000000000350 0x0000000000000020 0x0000000000000020 R 0x8
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; NOTE 0x0000000000000370 0x0000000000000370 0x0000000000000370 0x0000000000000024 0x0000000000000024 R 0x4
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; NOTE 0x00000000000020ec 0x00000000000020ec 0x00000000000020ec 0x0000000000000020 0x0000000000000020 R 0x4
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; GNU_PROPERTY 0x0000000000000350 0x0000000000000350 0x0000000000000350 0x0000000000000020 0x0000000000000020 R 0x8
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; GNU_EH_FRAME 0x0000000000002014 0x0000000000002014 0x0000000000002014 0x000000000000002c 0x000000000000002c R 0x4
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; GNU_STACK 0x0000000000000000 0x0000000000000000 0x0000000000000000 0x0000000000000000 0x0000000000000000 RW 0x10
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; GNU_RELRO 0x0000000000002dd0 0x0000000000003dd0 0x0000000000003dd0 0x0000000000000230 0x0000000000000230 R 0x1
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Section to Segment mapping:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Segment Sections...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;00&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;01&lt;/span&gt; .interp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;02&lt;/span&gt; .note.gnu.property .note.gnu.build-id .interp .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;03&lt;/span&gt; .init .plt .plt.got .text .fini
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;04&lt;/span&gt; .rodata .eh_frame_hdr .eh_frame .note.ABI-tag
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;05&lt;/span&gt; .init_array .fini_array .dynamic .got .got.plt .data .bss
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;06&lt;/span&gt; .dynamic
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;07&lt;/span&gt; .note.gnu.property
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;08&lt;/span&gt; .note.gnu.build-id
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;09&lt;/span&gt; .note.ABI-tag
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt; .note.gnu.property
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;11&lt;/span&gt; .eh_frame_hdr
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;13&lt;/span&gt; .init_array .fini_array .dynamic .got&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note: It is slightly formatted so that we can see it clearly.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Program headers table describes how the operating system should load the ELF binary into the memory. It maps parts of the binary file into memory regions with specific permissions and purposes.&lt;/p&gt;
&lt;p&gt;A simple decode of this cryptic table is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Type: PHDR&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;Offset: 0x40
VirtAddr:0x40
Size: 0x310
Flags: R&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This describes where in the memory the program headers themselves are located.&lt;/p&gt;
&lt;p&gt;The loader reads this to get all other segment info.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type: INTERP&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;Offset: 0x394
VirtAddr: 0x394
Size: 0x1c
Flags: R
[Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Specifies the dynamic linker to load and run this PIE executable.&lt;/p&gt;
&lt;p&gt;This linker will resolve symbols and apply relocations before main() runs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type: LOAD Segments, The actual loadable code/data in the binary&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# LOAD 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Offset: 0x0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;VirtAddr: 0x0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;FileSiz: 0x660
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Flags: R&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The R flag shows that this is a read only section, contains the initial part of ELF.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# LOAD 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Offset: 0x1000
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;VirtAddr: 0x1000
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Size: 0x179
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Flags: R E&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is a read + executable section. This implies that it contains the actual code segment&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# LOAD 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Offset: 0x2000
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;VirtAddr: 0x2000
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Size: 0x10c
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Flags: R&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Another readonly segment, which may contain constants and other ro-data.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# LOAD 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Offset: 0x2dd0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;VirtAddr: 0x3dd0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Size: File&lt;span style="color:#f92672"&gt;=&lt;/span&gt;0x250, Mem&lt;span style="color:#f92672"&gt;=&lt;/span&gt;0x258
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Flags: RW&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This section is both readable and writeable. This is where .data, .bss, etc&amp;hellip;. are stored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type: DYNAMIC&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Offset: 0x2de0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;VirtAddr: 0x3de0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Size: 0x1e0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Flags: RW&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Contains relocations, library names, symbol tables, etc&amp;hellip;., which are used by the dynamic linker to perform symbol resolution and relocation at runtime.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type: Note Segments and GNU_PROPERTY, for metadata handling. Nothing explosive.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type: GNU_EH_FRAME, exception handling frame, used by debuggers and during crashes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type: GNU_STACK, specifies stack permissions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type GNU_RELRO, a region that is read-only after relocation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The kernel finds the &lt;code&gt;LOAD&lt;/code&gt; segments and maps them into memory.&lt;/p&gt;
&lt;p&gt;All the offsets are relative to the location where the binary would be actually loaded.&lt;/p&gt;
&lt;p&gt;Now our program is loaded in the memory, but we&amp;rsquo;re not executing yet.&lt;/p&gt;
&lt;h4&gt;Handle Dynamic Linking&lt;span class="hx:absolute hx:-mt-20" id="handle-dynamic-linking"&gt;&lt;/span&gt;
&lt;a href="#handle-dynamic-linking" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Since the PHT has &lt;code&gt;INTERP&lt;/code&gt; header, this tells the kernel to run this interpreter &lt;code&gt;lib64/ld-linux-x86-64.so.2&lt;/code&gt; before jumping to the entry point in the binary.&lt;/p&gt;
&lt;p&gt;The kernel now loads the dynamic linker/loader (&lt;code&gt;ld-linux-x86-64.so.2&lt;/code&gt;) into the memory.&lt;/p&gt;
&lt;p&gt;The dynamic linker is the first code that will run in this process.&lt;/p&gt;
&lt;p&gt;Now the kernel set up the stack, &lt;code&gt;rip&lt;/code&gt; to &lt;code&gt;ld-linux&lt;/code&gt;&amp;rsquo;s entry point and returns the control to user space.&lt;/p&gt;
&lt;p&gt;And the child process is finally alive.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ld-linux&lt;/code&gt; now:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Parses the &lt;code&gt;.dynamic&lt;/code&gt; section (&lt;code&gt;readelf -S main_elf&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Finds the required shared libraries, like &lt;code&gt;libc.so.6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Loads them into the memory using &lt;code&gt;mmap()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Applies relocations to the code.&lt;/li&gt;
&lt;li&gt;Finally, jumps to our ELF binary&amp;rsquo;s real entry point (not &lt;code&gt;main&lt;/code&gt;, but &lt;code&gt;_start&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;Entry point Management &amp;amp;&amp;amp; Program Execution&lt;span class="hx:absolute hx:-mt-20" id="entry-point-management--program-execution"&gt;&lt;/span&gt;
&lt;a href="#entry-point-management--program-execution" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;The dynamic linker jumps to &lt;code&gt;_start&lt;/code&gt; in our binary (provided by crt1.o).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;_start&lt;/code&gt; sets up the runtime.&lt;/p&gt;
&lt;p&gt;Then it calls &lt;code&gt;__libc_start_main()&lt;/code&gt;, a libc function that initializes more stuff and finally calls the &lt;code&gt;main()&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;Now the program runs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;printf()&lt;/code&gt; is a call into &lt;code&gt;libc&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sleep()&lt;/code&gt; sleeps the process for 400 seconds using &lt;code&gt;nanosleep&lt;/code&gt; syscall.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Step3 - End Of The Program&lt;span class="hx:absolute hx:-mt-20" id="step3---end-of-the-program"&gt;&lt;/span&gt;
&lt;a href="#step3---end-of-the-program" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;After main() ends, control goes back to &lt;code&gt;__libc_start_main()&lt;/code&gt;, which handles the final cleanup and calls &lt;code&gt;exit()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The kernel:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cleans up the process resources.&lt;/li&gt;
&lt;li&gt;Returns the exit code to parent (zsh).&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Lets Manage An Actual Process Using C&lt;span class="hx:absolute hx:-mt-20" id="lets-manage-an-actual-process-using-c"&gt;&lt;/span&gt;
&lt;a href="#lets-manage-an-actual-process-using-c" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Downloadable source code of the program can be found at &lt;a href="https://github.com/hi-anki/process-creation-in-linux/blob/main/process.c"target="_blank" rel="noopener"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Standard I/O: printf() and perror()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// General Utils: exit()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// POSIX OS API: fork(), execvp(), getpid(), getppid()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Defines data types used in system calls: pid_t, the data type for process IDs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Provides macros and functions for waiting on child processes: waitpid(), WIFEXITED(), WEXITSTATUS()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;pid_t&lt;/span&gt; pid;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Calling Process `p_proc`:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34; PPID: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;getppid&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34; PID : %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;getpid&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;---------------------------&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 1. Process creation (fork)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Calling fork.....&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; pid &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fork&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (pid &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;perror&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;fork failed&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;`p_proc`: return value from fork(): %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, pid);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;exit&lt;/span&gt;(EXIT_FAILURE);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (pid &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Cloned Process `c_proc`:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34; PPID: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;getppid&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34; PID : %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;getpid&lt;/span&gt;());
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Return value from fork() to `c_proc`: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, pid);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;---------------------------&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// 2. Image replacement using exec
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;args[] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#e6db74"&gt;&amp;#34;./main_elf&amp;#34;&lt;/span&gt;, NULL};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;execvp&lt;/span&gt;(args[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], args) &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;perror&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;exec failed&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;exit&lt;/span&gt;(EXIT_FAILURE);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Parent process
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; status;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;waitpid&lt;/span&gt;(pid, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;status, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;); &lt;span style="color:#75715e"&gt;// Wait for child to finish
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;WIFEXITED&lt;/span&gt;(status)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Child exited with status %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;WEXITSTATUS&lt;/span&gt;(status));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;---------------------------&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Return value from fork(): to `p_proc` %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, pid);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Child did not exit normally.&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Lets understand this program.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pid_t&lt;/code&gt; is a type definition, defined in&lt;code&gt;POSIX&lt;/code&gt; to hold process IDs. It allows the kernel and user-space programs to use a consistent and portable data type for managing process IDs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;pid&lt;/code&gt; variable is very important. Understanding this small and harmless looking part is very important.&lt;/li&gt;
&lt;li&gt;The confusion is paired with &lt;code&gt;fork&lt;/code&gt;, so we&amp;rsquo;ll learn it there.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;fork()&lt;/code&gt; function is used to clone the calling process. Tell me, where would &lt;code&gt;fork&lt;/code&gt; send its return value?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To the calling process? or, To the cloned process?&lt;/li&gt;
&lt;li&gt;The answer is, both. And this is where the question how the parent process maintains its state arises from.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; It returns&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; to the &lt;strong&gt;cloned process&lt;/strong&gt; if the calling process is cloned successfully and the process ID of the cloned process to the calling process (which is now the parent process).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-1&lt;/code&gt; to the &lt;strong&gt;parent process&lt;/strong&gt;, if an error occurred and cloning didn&amp;rsquo;t succeed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Remember, &lt;code&gt;fork()&lt;/code&gt; makes a near-clone of the calling process. Only certain things are different.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The functions &lt;code&gt;getpid()&lt;/code&gt; and &lt;code&gt;getppid()&lt;/code&gt; are used to obtain the child process ID and the parent process ID, respectively.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;These functions are relative to the process that has invoked them.&lt;/li&gt;
&lt;li&gt;This is why &lt;code&gt;getpid()&lt;/code&gt; before forking the process returned the process ID of the current process, which became the parent process after forking.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The &lt;code&gt;exec()&lt;/code&gt; family of functions replaces the current process image with a new process image. Under the hood, they all use the mighty &lt;code&gt;execve&lt;/code&gt; syscall.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;char *argv[]&lt;/code&gt; argument is an array of pointers to null-terminated strings that represent the argument list available to the new program.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first argument, by convention, should point to the filename associated with the file being executed. The array of pointers must be terminated by a &lt;code&gt;null&lt;/code&gt; pointer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;execvp()&lt;/code&gt; is wrapper build upon &lt;code&gt;execve&lt;/code&gt; syscall. Internally, it is just:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;execvp&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;file, &lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; argv[]);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The first argument is a pointer to the binary which is to be executed and the second argument is an array to the arguments provided to the binary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Why not &lt;code&gt;execvp(argv)&lt;/code&gt; directly?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remember, &lt;code&gt;sys.argv[0]&lt;/code&gt; is reserved to the filename in python. &lt;code&gt;$0&lt;/code&gt; is reserved for the script name in bash. The same principle is followed here.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;exec()&lt;/code&gt; family of functions returns only when an error has occurred, which is -1, which is why we are running the binary through &lt;code&gt;execvp&lt;/code&gt; and matching if the return value is -1, to indicate failure or success.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;waitpid()&lt;/code&gt; function is like &lt;code&gt;async()&lt;/code&gt; function in JavaScript, which waits for a longer process to finish and then adjusts the results appropriately, without stopping the current thread.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After that some cleanup happens and we are done.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Now, lets understand the flow of execution, that&amp;rsquo;s the most important thing here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lets name the process of the calling C program as &lt;code&gt;p_proc&lt;/code&gt; and the process of the binary it is calling internally as &lt;code&gt;c_proc&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;The calling process is cloned.&lt;/li&gt;
&lt;li&gt;We know that process are independent in their execution context, which means that &lt;code&gt;p_proc&lt;/code&gt; and &lt;code&gt;c_proc&lt;/code&gt; will be running independently.
&lt;ul&gt;
&lt;li&gt;If we print something just after cloning the process, there is no guarantee if the first print came from the parent or the child because the child has a copy of the file descriptors and it depends on scheduling algorithms that which on goes first.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Both the processes continue executing the same code from the point where fork() returned. Lets look at the execution of &lt;code&gt;p_proc&lt;/code&gt; first.
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;pid&lt;/code&gt; variable for the calling process would have a random 4-5 digit unsigned value, which is definitely not equal to -1. Therefore, it never goes in the first &lt;code&gt;if&lt;/code&gt; block.&lt;/li&gt;
&lt;li&gt;Also, it is not 0. So, it never goes in the second &lt;code&gt;if&lt;/code&gt; block as well.&lt;/li&gt;
&lt;li&gt;Remaining &lt;code&gt;else&lt;/code&gt; block. Here, it will find &lt;code&gt;waitpid()&lt;/code&gt;, which will tell it to wait until the cloned process ends up.
&lt;ul&gt;
&lt;li&gt;If you comment this part, this means, the parent didn&amp;rsquo;t wait until the child finished. Such a process is called zombie process. Such processes are adopted by &lt;code&gt;init&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;ll only see &lt;code&gt;Hello, World!&lt;/code&gt; and no &lt;code&gt;sleep(10)&lt;/code&gt; effect.&lt;/li&gt;
&lt;li&gt;But wait. After 10 seconds, you&amp;rsquo;ll see that too, but in a new prompt.&lt;/li&gt;
&lt;li&gt;Here the parent process finished. Lets focus on the child now. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;c_proc&lt;/code&gt; receives &lt;code&gt;0&lt;/code&gt; in its &lt;code&gt;pid&lt;/code&gt; variable. Thus, it qualifies to go inside the second &lt;code&gt;if&lt;/code&gt; block.
&lt;ul&gt;
&lt;li&gt;And everything happens as stated before in &lt;code&gt;execve&lt;/code&gt; section.&lt;/li&gt;
&lt;li&gt;But remember, both the processes are executing independently. But because of &lt;code&gt;waitpid()&lt;/code&gt;, the parent waits for the child to finish and cleans up everything.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;That&amp;rsquo;s how it works.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;`exec` Family Of Functions&lt;span class="hx:absolute hx:-mt-20" id="exec-family-of-functions"&gt;&lt;/span&gt;
&lt;a href="#exec-family-of-functions" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;execve&lt;/code&gt; syscall has multiple wrappers in the form of C library functions. The questions is, which one to use when?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;execve(path, argv, envp)&lt;/code&gt; is the raw signature of this syscall.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;argv[] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#e6db74"&gt;&amp;#34;/path/to/binary&amp;#34;&lt;/span&gt;, .., .., NULL};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;char&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;envp[] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#e6db74"&gt;&amp;#34;variable=value&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;var2=val2&amp;#34;&lt;/span&gt;, NULL}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;execve&lt;/span&gt;(args[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], args, envp);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Prefix Guide&lt;span class="hx:absolute hx:-mt-20" id="prefix-guide"&gt;&lt;/span&gt;
&lt;a href="#prefix-guide" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt;: vector: refers to an array/vector of arguments&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt;: list: refers to a list of arguments, passed as varargs&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt;: path: tells the function to search $PATH for the executable&lt;/li&gt;
&lt;li&gt;&lt;code&gt;e&lt;/code&gt;: environment: lets you explicitly pass the environment&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Functions&lt;span class="hx:absolute hx:-mt-20" id="functions"&gt;&lt;/span&gt;
&lt;a href="#functions" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;execv(path, argv)&lt;/code&gt;: inherits caller&amp;rsquo;s environment.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execl(path, arg0, arg1, ..., NULL)&lt;/code&gt;: Same as &lt;code&gt;execv&lt;/code&gt;, except that the arguments are directly passed as varargs, rather than an array.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execvp(file, argv)&lt;/code&gt;: searches &lt;code&gt;$PATH&lt;/code&gt; variable for the binary. Good to run programs like a shell would do, like &lt;code&gt;ls&lt;/code&gt; or &lt;code&gt;./exe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execlp(file, arg0, ...., argN, NULL)&lt;/code&gt;: combines &lt;code&gt;execl + $PATH&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;execle(path, arg0, ..., NULL, envp)&lt;/code&gt;: varargs + custom env&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that&amp;rsquo;s how we finish establishing a baseline understanding in Linux processes.&lt;/p&gt;
&lt;p&gt;Thank You.&lt;/p&gt;</description></item><item><title/><link>https://hi-anki.github.io/gitbook/docs/extras/user-input/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/extras/user-input/</guid><description>
&lt;h1&gt;User Input In Assembly&lt;/h1&gt;&lt;p&gt;To take user input, we use &lt;code&gt;read&lt;/code&gt; syscall.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;.intel_syntax&lt;/span&gt; noprefix
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;.section&lt;/span&gt; .bss
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; buffer: &lt;span style="color:#a6e22e"&gt;.skip&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;.section&lt;/span&gt; .text
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.global&lt;/span&gt; _start
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; _start:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Step&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;: Take user&lt;span style="color:#f92672"&gt;-&lt;/span&gt;input
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt; sys_read
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt; stdin
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rsi, buffer &lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt; buffer to read into
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdx, &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;s to read
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Step&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;: Display the input
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdx, rax &lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt; number of &lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;s read (from previous syscall)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt; sys_write
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt; stdout
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rsi, buffer &lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt; buffer to write from
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;syscall&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Exit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#ae81ff"&gt;60&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt; sys_exit
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;xor&lt;/span&gt; rdi, rdi &lt;span style="color:#960050;background-color:#1e0010"&gt;#&lt;/span&gt; status &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;syscall&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Why `stdin` goes in `.bss` and not in `.data` section?&lt;span class="hx:absolute hx:-mt-20" id="why-stdin-goes-in-bss-and-not-in-data-section"&gt;&lt;/span&gt;
&lt;a href="#why-stdin-goes-in-bss-and-not-in-data-section" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;.bss&lt;/code&gt; section is the place for uninitialized data.&lt;/p&gt;
&lt;p&gt;The allocation in .bss is zero-initialized at runtime. Why can&amp;rsquo;t we just zero initialize the memory locations ourselves in the .data section only?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.data&lt;/code&gt; section holds static and global variables, which are already initialized. This directly affects the size of the binary.&lt;/p&gt;
&lt;p&gt;When we allocate an array of size 100 bytes, zero-initialized in .data section, those 100 bytes are basically excess space, because they aren&amp;rsquo;t used right away. We have to populate them before using.&lt;/p&gt;
&lt;p&gt;Those 100 bytes could also have been allocated directly at runtime, reducing the size of the overall binary? This is the whole idea behind the existence of &lt;code&gt;.bss&lt;/code&gt; and why stdin goes in &lt;code&gt;.bss&lt;/code&gt; not &lt;code&gt;.data&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Reserve Space&lt;span class="hx:absolute hx:-mt-20" id="reserve-space"&gt;&lt;/span&gt;
&lt;a href="#reserve-space" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;code&gt;buffer&lt;/code&gt; is a user-defined label which is reserving number of bytes for stdin.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.skip&lt;/code&gt; is a GAS directive used to reserve uninitialized space by skipping N-bytes.&lt;/p&gt;
&lt;h2&gt;Setup Read Syscall&lt;span class="hx:absolute hx:-mt-20" id="setup-read-syscall"&gt;&lt;/span&gt;
&lt;a href="#setup-read-syscall" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The accumulator (&lt;code&gt;rax&lt;/code&gt;) is set for read syscall, which is 0.&lt;/p&gt;
&lt;p&gt;The file descriptor (&lt;code&gt;rdi&lt;/code&gt;) is set to 0, which is for stdin.&lt;/p&gt;
&lt;p&gt;Now we need the runtime address of the &lt;code&gt;buffer&lt;/code&gt; label in the source index register (&lt;code&gt;rsi&lt;/code&gt;). To obtain this, we use &lt;code&gt;lea&lt;/code&gt; instruction, which stands for &lt;em&gt;load effective address&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Set &lt;code&gt;rdx&lt;/code&gt; with the number of bytes to read (arg 3).&lt;/p&gt;
&lt;p&gt;Invoke the syscall and read from console.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;With that in mind, read syscall would look like: &lt;code&gt;read(fd, buffer, bytes)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Displaying The Input&lt;span class="hx:absolute hx:-mt-20" id="displaying-the-input"&gt;&lt;/span&gt;
&lt;a href="#displaying-the-input" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Setup &lt;code&gt;rax&lt;/code&gt; for write syscall, 1.&lt;/p&gt;
&lt;p&gt;Set the file descriptor to 1, for stdout.&lt;/p&gt;
&lt;p&gt;Load the buffer to write from in &lt;code&gt;rsi&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Set the number of bytes to write in &lt;code&gt;rdx&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The question is, how we are going to know the length of our input?&lt;/li&gt;
&lt;li&gt;Because 100 is the maximum number of bytes that can be read, not necessarily the bytes we have read in total.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How to find the number of bytes being read?&lt;span class="hx:absolute hx:-mt-20" id="how-to-find-the-number-of-bytes-being-read"&gt;&lt;/span&gt;
&lt;a href="#how-to-find-the-number-of-bytes-being-read" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If we open the man page for &lt;code&gt;read&lt;/code&gt; syscall, we can find this signature:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;ssize_t&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;read&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; fd, &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; buf[.count], &lt;span style="color:#66d9ef"&gt;size_t&lt;/span&gt; count);&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you are still unsure, lets look at the &lt;code&gt;RETURN VALUE&lt;/code&gt; section.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;On success, the number of bytes read is returned (zero indicates end of file), and the file position is advanced by this number.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now it is confirmed that the number of bytes read is returned, but where? As this is a C wrapper on the actual syscall!&lt;/p&gt;
&lt;p&gt;If you go back to the calling convention article, you can find that &lt;code&gt;rax&lt;/code&gt; is where the result of a syscall is returned.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can also verify this by visiting the System V ABI documentation.&lt;/li&gt;
&lt;li&gt;Visit this GitLab repo, &lt;a href="https://gitlab.com/x86-psABIs/x86-64-ABI"target="_blank" rel="noopener"&gt;x86-64 psABI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Search for &amp;ldquo;Download latest PDF&amp;rdquo; and open the link.&lt;/li&gt;
&lt;li&gt;Check Appendix A, AMD64 Linux Kernel Conventions on page 146.&lt;/li&gt;
&lt;li&gt;Point number 5 reads as: &lt;em&gt;Returning from the syscall, register %rax contains the result of the system-call. A value in the range between -4095 and -1 indicates an error, it is -errno&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s why we are setting up rdx before setting the accumulator for write syscall.&lt;/p&gt;
&lt;p&gt;Invoke the syscall, print to console.&lt;/p&gt;
&lt;p&gt;Exit syscall. And we are done.&lt;/p&gt;
&lt;h2&gt;What is &lt;code&gt;lea&lt;/code&gt; and Why is &lt;code&gt;lea&lt;/code&gt;?&lt;span class="hx:absolute hx:-mt-20" id="what-is-lea-and-why-is-lea"&gt;&lt;/span&gt;
&lt;a href="#what-is-lea-and-why-is-lea" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It stands for &amp;ldquo;load effective address&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;It computes the address of a memory operand and loads it into a register, but it never access the value at that memory address.&lt;/p&gt;
&lt;p&gt;Why we haven&amp;rsquo;t used &lt;code&gt;offset&lt;/code&gt;?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remember assembly-time v/s runtime constraints? That&amp;rsquo;s the reason.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offset&lt;/code&gt; is an assembler directive. It replaces the label with a virtual address or offset. It doesn&amp;rsquo;t resemble the actual runtime address of that label (symbol).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lea&lt;/code&gt; is a CPU instruction which specializes in finding the runtime memory address of a label.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lets talk about an undefined behavior here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Right now we don&amp;rsquo;t know how memory is managed, so we don&amp;rsquo;t know what an offset, virtual address or anything else actually mean.&lt;/li&gt;
&lt;li&gt;Sometimes, just using &lt;code&gt;offset&lt;/code&gt; with mov can perfectly work. But, its not guaranteed.&lt;/li&gt;
&lt;li&gt;This undefined behavior exists when that offset or virtual address is mapped as it is in the actual memory, which in today&amp;rsquo;s world is almost impossible if you use production-grade principles.&lt;/li&gt;
&lt;li&gt;ASLR exists to eliminate such possibilities. ASLR stands for address space layout randomization. But we need not to know about it.&lt;/li&gt;
&lt;li&gt;Just keep this in mind that &lt;code&gt;offset&lt;/code&gt; might work but it is not right.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title/><link>https://hi-anki.github.io/gitbook/docs/extras/virtualization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/extras/virtualization/</guid><description>
&lt;h1&gt;Virtualization&lt;/h1&gt;&lt;p&gt;how to virtualize efficiently&lt;/p&gt;
&lt;p&gt;problems in mainstream solutions&lt;/p&gt;
&lt;p&gt;plug and play GNOME Boxes&lt;/p&gt;
&lt;p&gt;kvm+qemu the best way&lt;/p&gt;
&lt;p&gt;comparison table (ease of use, customization, memory, usage, unforeseen breaks, most stable, plug and play behavior, &amp;ldquo;set it, forget it&amp;rdquo; level&lt;/p&gt;</description></item><item><title/><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/control-flow/examples/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/control-flow/examples/</guid><description>
&lt;h1&gt;Examples&lt;/h1&gt;&lt;p&gt;Lets talk practically how if, else if and else, for loop, while loop and do while loop exist.&lt;/p&gt;
&lt;h2&gt;Example 1: if-else&lt;span class="hx:absolute hx:-mt-20" id="example-1-if-else"&gt;&lt;/span&gt;
&lt;a href="#example-1-if-else" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;, b &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (a &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; b){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Yes, 5 &amp;gt; 6.&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;No, 5 &amp;lt; 6.&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Assembly:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.section&lt;/span&gt; .rodata
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC0:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Yes, 5 &amp;gt; 6.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC1:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;No, 5 &amp;lt; 6.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.globl&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.type&lt;/span&gt; main, &lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;function
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt; &lt;span style="color:#75715e"&gt;; a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt; &lt;span style="color:#75715e"&gt;; b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cmp&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; if (a &amp;gt; b)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jle&lt;/span&gt; .L2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; if block&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; puts@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jmp&lt;/span&gt; .L3
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;; else block&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC1[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; puts@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;; return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L3:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h2&gt;Example 2: if- else if -else&lt;span class="hx:absolute hx:-mt-20" id="example-2-if--else-if--else"&gt;&lt;/span&gt;
&lt;a href="#example-2-if--else-if--else" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;, b &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (a &lt;span style="color:#f92672"&gt;==&lt;/span&gt; b){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Yes, a &amp;gt; b.&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (a &lt;span style="color:#f92672"&gt;==&lt;/span&gt; b){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Actually, a == b.&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;No, a &amp;lt; b.&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Assembly:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.section&lt;/span&gt; .rodata
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC0:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Yes, a &amp;gt; b.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC1:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Actually, a == b.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;No, a &amp;lt; b.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.globl&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.type&lt;/span&gt; main, &lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;function
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt; &lt;span style="color:#75715e"&gt;; a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt; &lt;span style="color:#75715e"&gt;; b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cmp&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; if (a &amp;gt; b)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jne&lt;/span&gt; .L2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; if block&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; puts@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jmp&lt;/span&gt; .L3
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;; else if block &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cmp&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; if (a == b)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jne&lt;/span&gt; .L4
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC1[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; puts@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jmp&lt;/span&gt; .L3
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;; else block&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L4:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC2[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; puts@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;; return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L3:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Example 3: Switch Case&lt;span class="hx:absolute hx:-mt-20" id="example-3-switch-case"&gt;&lt;/span&gt;
&lt;a href="#example-3-switch-case" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; choice &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;switch&lt;/span&gt;(choice){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Yes, equal to zero.&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;No, not 1.&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;default&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;No case matched. It is 5.&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Assembly:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.section&lt;/span&gt; .rodata
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC0:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Yes, equal to zero.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC1:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;No, not 1.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;No case matched. It is 5.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.globl&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.type&lt;/span&gt; main, &lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;function
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt; &lt;span style="color:#75715e"&gt;; choice&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cmp&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#75715e"&gt;; case 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;je&lt;/span&gt; .L2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cmp&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt; &lt;span style="color:#75715e"&gt;; case 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;je&lt;/span&gt; .L3
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jmp&lt;/span&gt; .L7 &lt;span style="color:#75715e"&gt;; default&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;; case 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; puts@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jmp&lt;/span&gt; .L5
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;; case 1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L3:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC1[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; puts@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jmp&lt;/span&gt; .L5
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;; default&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L7:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC2[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; puts@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;; return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L5:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice that for default case we are using unconditional jump.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Although &lt;code&gt;.L7&lt;/code&gt; is not strictly required but the semantics of switch cases require you to create a separate label for each. The compiler may optimize it at higher levels.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Example 4: Importance of break;&lt;span class="hx:absolute hx:-mt-20" id="example-4-importance-of-break"&gt;&lt;/span&gt;
&lt;a href="#example-4-importance-of-break" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This code doesn&amp;rsquo;t use &lt;code&gt;break;&lt;/code&gt; in case 5. We know that if break is not present, the cases after it are executed without any check. Let&amp;rsquo;s see.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; choice &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;switch&lt;/span&gt;(choice){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Yes, equal to zero.&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;case&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;No, not 1.&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;default&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;No case matched. It is 5.&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Assembly:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.section&lt;/span&gt; .rodata
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC0:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Yes, equal to zero.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC1:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;No, not 1.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;No case matched. It is 5.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.globl&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.type&lt;/span&gt; main, &lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;function
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cmp&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#75715e"&gt;; case 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;je&lt;/span&gt; .L2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cmp&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt; &lt;span style="color:#75715e"&gt;; case 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;je&lt;/span&gt; .L3
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jmp&lt;/span&gt; .L4
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;; case 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; puts@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jmp&lt;/span&gt; .L5
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;; case 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L3:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC1[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; puts@PLT &lt;span style="color:#75715e"&gt;; Notice, no jmp to .L5 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;; case default&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L4:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC2[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; puts@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;; return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L5:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This code lacks an unconditional jump to &lt;code&gt;.L5&lt;/code&gt;, the return label, which is why the case after it is executed without any check as the check is performed before.&lt;/p&gt;
&lt;h2&gt;Example 5: for loop&lt;span class="hx:absolute hx:-mt-20" id="example-5-for-loop"&gt;&lt;/span&gt;
&lt;a href="#example-5-for-loop" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;i: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Assembly:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.section&lt;/span&gt; .rodata
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC0:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;i: %d\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.globl&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.type&lt;/span&gt; main, &lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;function
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#75715e"&gt;; i = 0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jmp&lt;/span&gt; .L2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L3:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; load i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, eax &lt;span style="color:#75715e"&gt;; esi = i (arg 2)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax &lt;span style="color:#75715e"&gt;; edi = addr(str)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; printf@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#75715e"&gt;; update local instance of i&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;; body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cmp&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; &lt;span style="color:#75715e"&gt;; check i &amp;lt; 4 &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jle&lt;/span&gt; .L3
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; otherwise, return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice that &lt;code&gt;.L2&lt;/code&gt; is present after &lt;code&gt;.L3&lt;/code&gt; , so &lt;code&gt;.L2&lt;/code&gt; need not to make any jump to it. That&amp;rsquo;s compiler optimization at bare minimum.&lt;/p&gt;
&lt;p&gt;Even if you declare &lt;code&gt;i&lt;/code&gt; outside of loop, nothing will change.&lt;/p&gt;
&lt;h2&gt;Example 6: Infinite for loop&lt;span class="hx:absolute hx:-mt-20" id="example-6-infinite-for-loop"&gt;&lt;/span&gt;
&lt;a href="#example-6-infinite-for-loop" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (;;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;i: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Assembly:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.section&lt;/span&gt; .rodata
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC0:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;i: %d\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.globl&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.type&lt;/span&gt; main, &lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;function
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; printf@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jmp&lt;/span&gt; .L2&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Unless the source has an explicit break condition, it will run until it eats up all the resources.&lt;/p&gt;
&lt;h2&gt;Example 7: while loop&lt;span class="hx:absolute hx:-mt-20" id="example-7-while-loop"&gt;&lt;/span&gt;
&lt;a href="#example-7-while-loop" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Although this is an infinite while loop, but it will not run.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (i){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;i: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Assembly:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.section&lt;/span&gt; .rodata
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC0:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;i: %d\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.globl&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.type&lt;/span&gt; main, &lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;function
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jmp&lt;/span&gt; .L2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L3:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; printf@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cmp&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jne&lt;/span&gt; .L3
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice the condition in &lt;code&gt;.L2&lt;/code&gt;. It jumps to &lt;code&gt;.L3&lt;/code&gt; when the comparison is not equal to zero.&lt;/p&gt;
&lt;h2&gt;Example 8: Infinite while loop&lt;span class="hx:absolute hx:-mt-20" id="example-8-infinite-while-loop"&gt;&lt;/span&gt;
&lt;a href="#example-8-infinite-while-loop" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (i){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;i: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Assembly:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.section&lt;/span&gt; .rodata
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC0:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;i: %d\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.globl&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.type&lt;/span&gt; main, &lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;function
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jmp&lt;/span&gt; .L2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L3:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; printf@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cmp&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jne&lt;/span&gt; .L3
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you notice, infinite while loop and infinite for loop matches instruction by instruction except the &lt;code&gt;.L2&lt;/code&gt; label in while loop, which basically checks for true/false.&lt;/p&gt;
&lt;h2&gt;Example 9: Finite while loop&lt;span class="hx:absolute hx:-mt-20" id="example-9-finite-while-loop"&gt;&lt;/span&gt;
&lt;a href="#example-9-finite-while-loop" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;i: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Assembly:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.section&lt;/span&gt; .rodata
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC0:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;i: %d\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.globl&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.type&lt;/span&gt; main, &lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;function
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jmp&lt;/span&gt; .L2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L3:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; printf@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cmp&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jle&lt;/span&gt; .L3
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Again, it is exactly same as finite for loop.&lt;/p&gt;
&lt;p&gt;This proves that for and while is just syntactic sugar.&lt;/p&gt;
&lt;h2&gt;Example 10: do while loop&lt;span class="hx:absolute hx:-mt-20" id="example-10-do-while-loop"&gt;&lt;/span&gt;
&lt;a href="#example-10-do-while-loop" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;i: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt; ;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;while&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Assembly:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.section&lt;/span&gt; .rodata
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC0:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;i: %d\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.globl&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.type&lt;/span&gt; main, &lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;function
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; printf@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cmp&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; &lt;span style="color:#75715e"&gt;; while (i &amp;lt; 5) check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jle&lt;/span&gt; .L2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Conclusion&lt;span class="hx:absolute hx:-mt-20" id="conclusion"&gt;&lt;/span&gt;
&lt;a href="#conclusion" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is how control flow looks like.&lt;/p&gt;</description></item><item><title/><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/functions/parameter-passing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/functions/parameter-passing/</guid><description>
&lt;h1&gt;Parameter Passing&lt;/h1&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;5 September 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Parameters and Arguments&lt;span class="hx:absolute hx:-mt-20" id="parameters-and-arguments"&gt;&lt;/span&gt;
&lt;a href="#parameters-and-arguments" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Parameters are variables defined in a function definition that act as placeholders for values the function will receive.&lt;/p&gt;
&lt;p&gt;Arguments are the actual values supplied to a function when it is called.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;square&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; n&lt;span style="color:#f92672"&gt;*&lt;/span&gt;n;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;square&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Here, &lt;code&gt;n&lt;/code&gt; is parameter and &lt;code&gt;5&lt;/code&gt; is the argument.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Parameter Passing&lt;span class="hx:absolute hx:-mt-20" id="parameter-passing-1"&gt;&lt;/span&gt;
&lt;a href="#parameter-passing-1" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Functions can receive arguments from the caller. These arguments can be passed in two ways.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Call by value -&amp;gt; a copy of the actual value is passed.&lt;/li&gt;
&lt;li&gt;Call by reference -&amp;gt; the memory address of the value is passed, allowing the function to modify the original variable.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let&amp;rsquo;s take an example. We have a number and we want to increment it by 10.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;inc1&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Inside inc1&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34; Before increment: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, n);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; n &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34; After increment: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, n);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;inc2&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;m){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Inside inc2&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34; Before increment: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;m);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;m &lt;span style="color:#f92672"&gt;+=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34; After increment: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;m);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;In main&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34; Before increment: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, n);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;inc1&lt;/span&gt;(n);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;In main&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34; After increment: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, n);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;--------&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;In main&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34; Before increment: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, m);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;inc2&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;m);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;In main&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34; After increment: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, m);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;When we normally pass a value, a copy of it is passed. When we pass the reference of a value, the memory address at which it is stored is passed, which is why the change persists after function call.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Swapping two numbers&lt;/strong&gt; is very famous in this space.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Assembly Comparison&lt;span class="hx:absolute hx:-mt-20" id="assembly-comparison"&gt;&lt;/span&gt;
&lt;a href="#assembly-comparison" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is call by value.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sq&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; s &lt;span style="color:#f92672"&gt;=&lt;/span&gt; n&lt;span style="color:#f92672"&gt;*&lt;/span&gt;n;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, s);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sq&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And there is nothing new.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC0:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;%d\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sq:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], edi &lt;span style="color:#75715e"&gt;; 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;imul&lt;/span&gt; eax, eax &lt;span style="color:#75715e"&gt;; 25&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], eax &lt;span style="color:#75715e"&gt;; update local n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; printf@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;nop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; edi, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; sq
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; printf@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is call by reference.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sq&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt; n){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;n)&lt;span style="color:#f92672"&gt;*&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;n);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;n);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; num &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sq&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;num);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, num);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is the assembly.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC0:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;%d\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sq:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp], rdi &lt;span style="color:#75715e"&gt;; address of num passed from main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; edx, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR [rax]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR [rax]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;imul&lt;/span&gt; edx, eax &lt;span style="color:#75715e"&gt;; 5 * 5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; load the address of -8[rbp]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR [rax], edx &lt;span style="color:#75715e"&gt;; mov the updated value of n (n*n)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR [rax]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; printf@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;nop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; We are loading the address of 4[rbp], not what is at -4[rbp]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; sq
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; printf@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And the fun begins here. Let&amp;rsquo;s start with the &lt;code&gt;main&lt;/code&gt; symbol.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In call by value assembly, we load the value at stack memory:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In call by reference, we are computing the address where 5 is in the stack memory:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In call by reference, the compiler uses 64-bit registers for the pointer, because addresses on a 64-bit system are 8 bytes. The integer itself is 4 bytes, so we still use 32-bit registers for arithmetic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The rest is the same.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Let&amp;rsquo;s shift our focus on the &lt;code&gt;sq&lt;/code&gt; symbol now.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In call by value, we are moving a 4-byte value at &lt;code&gt;-4[rbp]&lt;/code&gt;, which is 5.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], edi&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In call by reference, we are moving a 8-byte value, and we know that an integer is not sized &amp;ldquo;8-bytes&amp;rdquo; by default on Linux. This again reinforces the fact that this is a pointer to/address of 5, not 5 itself.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp], rdi&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The call by value code simply loaded the local instance of &lt;code&gt;n&lt;/code&gt; in &lt;code&gt;eax&lt;/code&gt; , multiplied with itself and updated the local instance with new value.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;imul&lt;/span&gt; eax, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], eax&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is quite complicated for the call by reference program.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;First we load 8-bytes starting from &lt;code&gt;-8[rbp]&lt;/code&gt;.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next we dereference the address to obtain the actual value (5). Since it is a 32-bit value, we are using &lt;code&gt;DWORD&lt;/code&gt; to move it in &lt;code&gt;edx&lt;/code&gt; .&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; edx, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR [rax]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We repeat the same process to hold 5 in another register for multiplication.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR [rax]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We are using different registers here to avoid overwriting values that are still required for computation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we have to update the existing instance of stack with 25. In call by value, it was again quite simple.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], eax&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In call by reference, first we have to load the 8-bytes of address in &lt;code&gt;rax&lt;/code&gt;:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then we dereference it and mov 25 there.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After this we print the value.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that&amp;rsquo;s how call by reference works.&lt;/p&gt;
&lt;h2&gt;But what is the utility of call by reference?&lt;span class="hx:absolute hx:-mt-20" id="but-what-is-the-utility-of-call-by-reference"&gt;&lt;/span&gt;
&lt;a href="#but-what-is-the-utility-of-call-by-reference" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;That&amp;rsquo;s the only way stack frames can interact.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s the only way stack frames can manage complex data.&lt;/p&gt;
&lt;p&gt;Pointers are the &lt;em&gt;&lt;strong&gt;only&lt;/strong&gt;&lt;/em&gt;&lt;strong&gt; mechanism&lt;/strong&gt; that lets a function access memory outside its own frame&lt;/p&gt;</description></item><item><title/><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/functions/recursion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/functions/recursion/</guid><description>
&lt;h1&gt;Recursion (Recursive Function)&lt;/h1&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;04, 05 September 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Definition&lt;span class="hx:absolute hx:-mt-20" id="definition"&gt;&lt;/span&gt;
&lt;a href="#definition" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A recursive function is a function that calls itself during its execution to solve a problem by breaking it down into smaller, simpler instances of the same problem.&lt;/p&gt;
&lt;p&gt;It requires a &lt;strong&gt;recursive step&lt;/strong&gt; where the function calls itself with a modified input and a &lt;strong&gt;base case&lt;/strong&gt;, which is the stopping condition that prevents infinite calls.&lt;/p&gt;
&lt;p&gt;These recursive case and base case are the things that makes a recursion either easy to understand or very complex. For this reason, we are using &lt;strong&gt;factorial&lt;/strong&gt;, because it is very straightforward.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Problems like Tower of Hanoi and Fibonacci series can be solved with recursion but they are a little complex to understand.&lt;/li&gt;
&lt;li&gt;But we can definitely touch that later.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Recursion is the ideal next step to understand:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;how stack frames are &amp;ldquo;stacked&amp;rdquo;?&lt;/li&gt;
&lt;li&gt;how stack frame returns?&lt;/li&gt;
&lt;li&gt;how arguments are managed across calls?&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Factorial&lt;span class="hx:absolute hx:-mt-20" id="factorial"&gt;&lt;/span&gt;
&lt;a href="#factorial" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To calculate the factorial of a number, we use this formula:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nb" data-lang="nb"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;n&lt;span style="color:#f92672"&gt;!&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; n &lt;span style="color:#f92672"&gt;*&lt;/span&gt; (n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;) &lt;span style="color:#f92672"&gt;*&lt;/span&gt; (n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;) &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;....&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; (n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; (n&lt;span style="color:#ae81ff"&gt;-1&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;where &lt;code&gt;n&lt;/code&gt; is a positive integer and the factorial of 0 is 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example - &lt;code&gt;5! = 120&lt;/code&gt;, which is calculated as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;5 * (5 - 1) * (5 - 2) * (5 - 3) * (5 - 4)&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;5 * 4 * 3 * 2 * 1&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;120&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A loop based program would be:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;factorial&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (n &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; f &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;lt;=&lt;/span&gt; n; i&lt;span style="color:#f92672"&gt;++&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; f &lt;span style="color:#f92672"&gt;*=&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; f;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To do this with recursion, we need a base condition and recursive condition.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Base condition: &lt;code&gt;0! = 1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Recursive condition: &lt;code&gt;n * func(n - 1)&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The idea is that each recursive call reduces the value of &lt;code&gt;n&lt;/code&gt; until it becomes 0. When it becomes zero, return is triggered. And the final return computes &lt;code&gt;n!&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;Thus, recursion can be implemented as:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;rec_fact&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (n &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; (n &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;rec_fact&lt;/span&gt;(n &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rec_fact&lt;/span&gt;(n);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This the assembly.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rec_fact:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], edi &lt;span style="color:#75715e"&gt;; n received as func arg is moved to stack&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cmp&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#75715e"&gt;; (n == 0) check&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jne&lt;/span&gt; .L2 &lt;span style="color:#75715e"&gt;; if not, prepare for next call&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;jmp&lt;/span&gt; .L3 &lt;span style="color:#75715e"&gt;; if yes, we&amp;#39;ve hit the base case&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;; return n * rec_fact(n - 1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L2:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; load n in eax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#75715e"&gt;; eax = eax - 1 OR ( n - 1)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; edi, eax &lt;span style="color:#75715e"&gt;; setup arg1 = eax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; rec_fact &lt;span style="color:#75715e"&gt;; call again&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;imul&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; when the function call hit the base case, and there is a return, multiply the return (rax) with n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;; return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.L3:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; edi, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; rec_fact
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Procedures receive the first 6 arguments in registers, where the first one goes into &lt;code&gt;edi&lt;/code&gt; . But in a continuous recursion, &lt;code&gt;edi&lt;/code&gt; is constantly in use, which makes it unreliable to keep the original value of &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can use other registers? We can manage the caller/callee discipline ourselves?&lt;/li&gt;
&lt;li&gt;We can, but we&amp;rsquo;ve to deal with two problems.
&lt;ul&gt;
&lt;li&gt;We can only implement this in pure assembly.&lt;/li&gt;
&lt;li&gt;There is no limit to how many arguments a function can receive, which makes relying on registers a mess.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We are compiling C into assembly. When we are translating one language into another one, we would prefer standard rules which remain consistent across all the cases.&lt;/li&gt;
&lt;li&gt;That&amp;rsquo;s the reason behind creating a local copy of &lt;code&gt;n&lt;/code&gt; on stack. This keeps the original value intact, stack frames clean and predictable and no management hell.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The assembly is straightforward, so we will skip that. Lets do a dry run and understand the state of stack, because, we already know what the code is doing.&lt;/p&gt;
&lt;h2&gt;Stack Layout&lt;span class="hx:absolute hx:-mt-20" id="stack-layout"&gt;&lt;/span&gt;
&lt;a href="#stack-layout" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We can talk theory all the day, but how one interprets that theory changes everything. And the best way to ensure that we are on the same page is by visualizing the stack.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: This visual representation of stack might not be very accurate, but it explains things in a way that ensures that all of use are interpreting the theory the right way.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With this ASCII Art, we can draw the theory. That&amp;rsquo;s the main thing.&lt;/p&gt;
&lt;p&gt;All the addresses are in decimal, no hex is used as it creates an overhead of calculation. The addresses are kept deliberately small so that &lt;strong&gt;subtraction of bytes&lt;/strong&gt; is easier to calculate.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;4008: rsp
*------------------*
4000 -&amp;gt; | old rbp on stack | (push rbp)
*------------------*
new rbp = 4000
Stack Frame: main()
*------------------*
3996 -&amp;gt; | edi (n = 5) | -4[rbp]
*------------------*
3992 -&amp;gt; | | -8[rbp]
*------------------*
3988 -&amp;gt; | | -12[rbp]
*------------------*
3984 -&amp;gt; | | -16[rbp]
*------------------*
3976 -&amp;gt; | addr(mov eax, 0) |
*------------------*
3968 -&amp;gt; | main() rbp (4000)|
*------------------*
new rbp = 3968
Stack Frame: rec_fact()
*------------------*
3964 -&amp;gt; | edi (n = 5) | -4[rbp]
*------------------*
3960 -&amp;gt; | | -8[rbp]
*------------------*
3956 -&amp;gt; | | -12[rbp]
*------------------*
3952 -&amp;gt; | | -16[rbp]
*------------------*
3944 -&amp;gt; | addr(imul eax, 5)|
*------------------*
3936 -&amp;gt; | old rbp (3968) |
*------------------*
new rbp = 3936
Stack Frame: rec_fact()
*------------------*
3932 -&amp;gt; | edi (n = 4) | -4[rbp]
*------------------*
3928 -&amp;gt; | | -8[rbp]
*------------------*
3924 -&amp;gt; | | -12[rbp]
*------------------*
3920 -&amp;gt; | | -16[rbp]
*------------------*
3912 -&amp;gt; | addr(imul eax, 4)|
*------------------*
3904 -&amp;gt; | old rbp (3936) |
*------------------*
new rbp = 3904
Stack Frame: rec_fact()
*------------------*
3900 -&amp;gt; | edi (n = 3) | -4[rbp]
*------------------*
3896 -&amp;gt; | | -8[rbp]
*------------------*
3892 -&amp;gt; | | -12[rbp]
*------------------*
3888 -&amp;gt; | | -16[rbp]
*------------------*
3880 -&amp;gt; | addr(imul eax, 3)|
*------------------*
3872 -&amp;gt; | old rbp (3904) |
*------------------*
new rbp = 3872
Stack Frame: rec_fact()
*------------------*
3868 -&amp;gt; | edi (n = 2) | -4[rbp]
*------------------*
3864 -&amp;gt; | | -8[rbp]
*------------------*
3860 -&amp;gt; | | -12[rbp]
*------------------*
3856 -&amp;gt; | | -16[rbp]
*------------------*
3848 -&amp;gt; | addr(imul eax, 2)|
*------------------*
3840 -&amp;gt; | old rbp (3872) |
*------------------*
new rbp = 3840
Stack Frame: rec_fact()
*------------------*
3836 -&amp;gt; | edi (n = 1) | -4[rbp]
*------------------*
3832 -&amp;gt; | | -8[rbp]
*------------------*
3828 -&amp;gt; | | -12[rbp]
*------------------*
3824 -&amp;gt; | | -16[rbp]
*------------------*
3816 -&amp;gt; | addr(imul eax, 1)|
*------------------*
3808 -&amp;gt; | old rbp (3840) |
*------------------*
new rbp = 3808
Stack Frame: rec_fact()
*------------------*
3804 -&amp;gt; | edi (n = 0) | -4[rbp]
*------------------*
3800 -&amp;gt; | | -8[rbp]
*------------------*
3796 -&amp;gt; | | -12[rbp]
*------------------*
3792 -&amp;gt; | | -16[rbp]
*------------------*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;If you notice, the addresses feel inconsistent. The difference is oscillating between 4 and 8.&lt;/li&gt;
&lt;li&gt;That&amp;rsquo;s because a direct &lt;code&gt;push&lt;/code&gt; is a shorthand for subtracting 8 bytes and moving a value at that memory. When we reserve 16 bytes separately, and they bytes are used to store an integer, they are 4-byte aligned for efficient memory access, as an integer is normally 4-bytes in size.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This ASCII Art has stopped at &lt;code&gt;(n = 0)&lt;/code&gt; as we have reached the base condition. Now the frames will remove one-by-one. Let&amp;rsquo;s see how that works.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Return Management&lt;span class="hx:absolute hx:-mt-20" id="return-management"&gt;&lt;/span&gt;
&lt;a href="#return-management" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is a compressed view of stack.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;| Stack Frame | rbp | n |
*-------------*------*---*
| main | 4000 | 5 | &amp;lt;- Bottom
| rec_fact | 3968 | 5 |
| rec_fact | 3936 | 4 |
| rec_fact | 3904 | 3 |
| rec_fact | 3872 | 2 |
| rec_fact | 3840 | 1 |
| rec_fact | 3808 | 0 | &amp;lt;- Top&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;If you notice, each frame is exactly 32-bytes in size; 16 for locals, 8 for return address and 8 for old &lt;code&gt;rbp&lt;/code&gt; .&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;3808 Frame&lt;span class="hx:absolute hx:-mt-20" id="3808-frame"&gt;&lt;/span&gt;
&lt;a href="#3808-frame" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The top stack frame is &lt;code&gt;rbp=3808&lt;/code&gt; , and is &lt;code&gt;rsp=3792&lt;/code&gt; here. Let&amp;rsquo;s look at assembly.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;(n==0)&lt;/code&gt; , we set &lt;code&gt;eax=1&lt;/code&gt; (which is the return value) and jump to &lt;code&gt;.L3&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;leave&lt;/code&gt; instruction resets the stack pointer by using &lt;code&gt;rbp&lt;/code&gt; &lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;mov rsp, 3808&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and pops the old base pointer (located in &lt;code&gt;rsp&lt;/code&gt;) into &lt;code&gt;rbp&lt;/code&gt;, which changes the current base pointer to the previous stack frame. &lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;mov rbp, [3808] ; [3808] = 3840
add rsp, 8 ; rsp = 3816&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now &lt;code&gt;rsp=3816&lt;/code&gt; and &lt;code&gt;rbp=3840&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When we do &lt;code&gt;pop rip&lt;/code&gt;, it is: &lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;mov rip, [3816]
add rsp, 8 ; rsp = 3824&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;dereferencing 3816 gives the address of &lt;code&gt;imul eax, DWORD PTR -4[rbp]&lt;/code&gt; instruction in the previous stack frame (3840).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And we have successfully returned to the previous stack frame, the one with &lt;code&gt;rbp=3840&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State of pointers: &lt;code&gt;rsp=3824&lt;/code&gt; and &lt;code&gt;rbp=3840&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;3840 Frame&lt;span class="hx:absolute hx:-mt-20" id="3840-frame"&gt;&lt;/span&gt;
&lt;a href="#3840-frame" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now we are inside the &lt;code&gt;rbp=3840&lt;/code&gt; stack frame.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here, &lt;code&gt;n=1&lt;/code&gt;. So, &lt;code&gt;.L2&lt;/code&gt; was executed, which sets up the next recursion call.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The next recursion call was &lt;code&gt;rbp=3808&lt;/code&gt;, which successfully returned 1 in &lt;code&gt;eax&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we are at:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;imul eax, DWORD PTR -4[rbp]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For this stack frame, &lt;code&gt;rbp=3840&lt;/code&gt;. &lt;code&gt;-4[3840]&lt;/code&gt; would go to &lt;code&gt;3836&lt;/code&gt; which stores a local copy of &lt;code&gt;n&lt;/code&gt; received by this procedure&amp;rsquo;s frame, which is &lt;code&gt;1&lt;/code&gt; here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So, the instruction translates to:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;imul eax, 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;and &lt;code&gt;eax&lt;/code&gt; is already 1, so the result in &lt;code&gt;eax&lt;/code&gt; would be 1.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After this, &lt;code&gt;.L3&lt;/code&gt; is called.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;; leave
mov rsp, 3840
mov rbp, [3840] ; [3840] = 3872
add rsp, 8 ; rsp = 3848
; return
mov rip, [3848]
add rsp, 8 ; rsp = 3856&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And we have successfully returned to the previous stack frame, the one with &lt;code&gt;rbp=3872&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State of pointers: &lt;code&gt;rsp=3856&lt;/code&gt; and &lt;code&gt;rbp=3872&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;3872 Frame&lt;span class="hx:absolute hx:-mt-20" id="3872-frame"&gt;&lt;/span&gt;
&lt;a href="#3872-frame" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now we are inside the &lt;code&gt;rbp=3872&lt;/code&gt; stack frame.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here, &lt;code&gt;n=2&lt;/code&gt;. So, &lt;code&gt;.L2&lt;/code&gt; was executed, which sets up the next recursion call.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The next recursion call was &lt;code&gt;rbp=3840&lt;/code&gt; , which successfully returned 1 in &lt;code&gt;eax&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we are at:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;imul eax, DWORD PTR -4[rbp]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For this stack frame, &lt;code&gt;rbp=3872&lt;/code&gt; . &lt;code&gt;-4[3872]&lt;/code&gt; would go to &lt;code&gt;3868&lt;/code&gt; , which stores a local copy of &lt;code&gt;n&lt;/code&gt; received by this procedure&amp;rsquo;s frame, which is &lt;code&gt;2&lt;/code&gt; here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So, the instruction translates to:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;imul eax, 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt; &lt;code&gt;eax&lt;/code&gt; is 1, so the result in &lt;code&gt;eax&lt;/code&gt; would be 2.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After this, &lt;code&gt;.L3&lt;/code&gt; is called.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;; leave
mov rsp, 3872
mov rbp, [3872] ; [3872] = 3904
add rsp, 8 ; rsp = 3880
; ret
mov rip, [3880]
add rsp, 8 ; rsp = 3888&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And we have successfully returned to the previous stack frame, the one with &lt;code&gt;rbp=3904&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State of pointers: &lt;code&gt;rsp=3888&lt;/code&gt; and &lt;code&gt;rbp=3904&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;3904 Frame&lt;span class="hx:absolute hx:-mt-20" id="3904-frame"&gt;&lt;/span&gt;
&lt;a href="#3904-frame" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now we are inside the &lt;code&gt;rbp=3904&lt;/code&gt; stack frame.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here, &lt;code&gt;n=3&lt;/code&gt;. So, &lt;code&gt;.L2&lt;/code&gt; was executed, which sets up the next recursion call.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The next recursion call was &lt;code&gt;rbp=3872&lt;/code&gt; , which successfully returned 2 in &lt;code&gt;eax&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we are at:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;imul eax, DWORD PTR -4[rbp]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For this stack frame, &lt;code&gt;rbp=3904&lt;/code&gt; , &lt;code&gt;-4[3904]&lt;/code&gt; would go to &lt;code&gt;3900&lt;/code&gt; , which stores a local copy of &lt;code&gt;n&lt;/code&gt; received by this procedure&amp;rsquo;s frame, which is &lt;code&gt;3&lt;/code&gt; here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So, the instruction translates to:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;imul eax, 3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt; &lt;code&gt;eax&lt;/code&gt; is 2, so the result in &lt;code&gt;eax&lt;/code&gt; would be 6.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After this, &lt;code&gt;.L3&lt;/code&gt; is called.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;; leave
mov rsp, 3904
mov rbp, [3904] ; [3904] = 3936
add rsp, 8 ; rsp = 3912
; ret
mov rip, [3912]
add rsp, 8 ; rsp = 3920&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And we have successfully returned to the previous stack frame, the one with &lt;code&gt;rbp=3936&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State of pointers: &lt;code&gt;rsp=3920&lt;/code&gt; and &lt;code&gt;rbp=3936&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;3936 Frame&lt;span class="hx:absolute hx:-mt-20" id="3936-frame"&gt;&lt;/span&gt;
&lt;a href="#3936-frame" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now we are inside the &lt;code&gt;rbp=3936&lt;/code&gt; stack frame.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here, &lt;code&gt;n=4&lt;/code&gt;. So, &lt;code&gt;.L2&lt;/code&gt; was executed, which sets up the next recursion call.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The next recursion call was &lt;code&gt;rbp=3904&lt;/code&gt; , which successfully returned 6 in &lt;code&gt;eax&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we are at:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;imul eax, DWORD PTR -4[rbp]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For this stack frame, &lt;code&gt;rbp=3936&lt;/code&gt; , &lt;code&gt;-4[3936]&lt;/code&gt; would go to &lt;code&gt;3932&lt;/code&gt; , which stores a local copy of &lt;code&gt;n&lt;/code&gt; received by this procedure&amp;rsquo;s frame. The value of &lt;code&gt;n&lt;/code&gt; is &lt;code&gt;4&lt;/code&gt; here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So, the instruction translates to:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;imul eax, 4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt; &lt;code&gt;eax&lt;/code&gt; is 6, so the result in &lt;code&gt;eax&lt;/code&gt; would be 24.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After this, &lt;code&gt;.L3&lt;/code&gt; is called.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;; leave
mov rsp, 3936
mov rbp, [3936] ; [3936] = 3968
add rsp, 8 ; rsp = 3944
; ret
mov rip, [3944]
add rsp, 8 ; rsp = 3952&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And we have successfully returned to the previous stack frame, the one with &lt;code&gt;rbp=3968&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State of pointers: &lt;code&gt;rsp=3952&lt;/code&gt; and &lt;code&gt;rbp=3968&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;3968 Frame&lt;span class="hx:absolute hx:-mt-20" id="3968-frame"&gt;&lt;/span&gt;
&lt;a href="#3968-frame" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now we are inside the &lt;code&gt;rbp=3968&lt;/code&gt; stack frame.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Here, &lt;code&gt;n=5&lt;/code&gt;. So, &lt;code&gt;.L2&lt;/code&gt; was executed, which sets up the next recursion call.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The next recursion call was &lt;code&gt;rbp=3936&lt;/code&gt; , which successfully returned 24 in &lt;code&gt;eax&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now we are at:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;imul eax, DWORD PTR -4[rbp]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For this stack frame, &lt;code&gt;rbp=3968&lt;/code&gt; , &lt;code&gt;-4[3968]&lt;/code&gt; would go to &lt;code&gt;3964&lt;/code&gt; , which stores a local copy of &lt;code&gt;n&lt;/code&gt; received by this procedure&amp;rsquo;s , which is &lt;code&gt;5&lt;/code&gt; here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So, the instruction translates to:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;imul eax, 5&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt; &lt;code&gt;eax&lt;/code&gt; is 24, so the result in &lt;code&gt;eax&lt;/code&gt; would be 120.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After this, &lt;code&gt;.L3&lt;/code&gt; is called.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;; leave
mov rsp, 3968
mov rbp, [3968] ; [3968] = 4000
add rsp, 8 ; rsp = 3976
; ret
mov rip, [3976]
add rsp, 8 ; rsp = 3984&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And we have successfully returned to the previous stack frame, the one with &lt;code&gt;rbp=4000&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;State of pointers: &lt;code&gt;rsp=3984&lt;/code&gt; and &lt;code&gt;rbp=4000&lt;/code&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Now we are inside the &lt;code&gt;rbp=4000&lt;/code&gt; stack frame.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is where we started from.&lt;/li&gt;
&lt;li&gt;From here, we return to the almighty gods of C, the startup code, which handles the exit and remaining cleanup.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Sigh. It was crazy, isn&amp;rsquo;t it? Conclusion is still remaining.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;span class="hx:absolute hx:-mt-20" id="conclusion"&gt;&lt;/span&gt;
&lt;a href="#conclusion" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The only conclusion that is worth reading is that, &lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;!-- raw HTML omitted --&gt;it&amp;rsquo;s a hoax that low level systems are complex and impossible to understand without the help of some C God. It&amp;rsquo;s a hoax that you can&amp;rsquo;t draw theory, visualize theory. Any idea that restricts you from doing the work to build deep understanding is just a hoax. It takes time and it takes energy, but the output is worth every bit of effort.&lt;!-- raw HTML omitted --&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It took me a whole day to build this understanding and stack art, roughly ~7h accumulated.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;And the result of that is that I will never be confused about stack discipline.&lt;/li&gt;
&lt;li&gt;I am sure that stack is not done yet. There is a lot to explore. But I am also ready to do that, &lt;em&gt;&lt;strong&gt;the hard way, the boring way, the repetitive way&lt;/strong&gt;&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title/><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/functions/return/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/functions/return/</guid><description>
&lt;h1&gt;How returns are managed?&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;5, &lt;/strong&gt;&lt;em&gt;&lt;strong&gt;6 September 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Premise&lt;span class="hx:absolute hx:-mt-20" id="premise"&gt;&lt;/span&gt;
&lt;a href="#premise" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Returns can be classified into 3 types:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Primitives&lt;/strong&gt; (int, char, float, double): the return is in register (&lt;code&gt;rax&lt;/code&gt; for int and char, &lt;code&gt;xmm0&lt;/code&gt; for floats)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Arrays&lt;/strong&gt;: they can&amp;rsquo;t be returned. Period. You pass a reference to a modifiable memory from the caller itself. To return a local declaration, you make it block static.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Structures/Unions&lt;/strong&gt;: this is where the problem is.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Returning Structures/Unions &amp;lt;= 16 Bytes&lt;span class="hx:absolute hx:-mt-20" id="returning-structuresunions--16-bytes"&gt;&lt;/span&gt;
&lt;a href="#returning-structuresunions--16-bytes" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;System V ABI decides return strategy based on size and fields.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If the return size is &amp;lt;= 16 bytes, it is returned in registers.&lt;/li&gt;
&lt;li&gt;If the return size is &amp;gt; 16 bytes, it is complicated.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3&gt;8-byte Struct&lt;span class="hx:absolute hx:-mt-20" id="8-byte-struct"&gt;&lt;/span&gt;
&lt;a href="#8-byte-struct" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Pair { &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; x; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; y; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Pair &lt;span style="color:#a6e22e"&gt;make_pair&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; b) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Pair p;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p.x &lt;span style="color:#f92672"&gt;=&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p.y &lt;span style="color:#f92672"&gt;=&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; p;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Pair q &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;make_pair&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; q.x &lt;span style="color:#f92672"&gt;+&lt;/span&gt; q.y;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Feels like we have implemented a class in C huh?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is the assembly:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;make_pair:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; create a local copy of args (2, 3)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;[rbp], edi
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;24&lt;/span&gt;[rbp], esi
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; Load the local copy at a different place for operation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; as the primary local copy is kept untouched unless specified&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;24&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; The most important line&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; We are loading 8-bytes in rax starting from -8[rbp] to -1[rbp]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pop&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; edi, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; make_pair
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; Unpacking the 8-bytes into two separate 4-byte integers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp], rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; edx, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; -8, -7, -6, -5 represent 2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; -4, -3, -2, -1 represent 3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt; eax, edx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This would be the state of &lt;code&gt;make_pair&lt;/code&gt; stack frame:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt; rbp
-4[rbp] &amp;lt;-&amp;gt; 3
-8[rbp] &amp;lt;-&amp;gt; 2
-12[rbp] &amp;lt;-&amp;gt;
-16[rbp] &amp;lt;-&amp;gt;
-20[rbp] &amp;lt;-&amp;gt; 2
-24[rbp] &amp;lt;-&amp;gt; 3&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The trick is that we load both the values in one single register. The question is how? Remember, interpretation rules memory access. As long as you interpret the right way, even garbage is gold.&lt;/p&gt;
&lt;p&gt;Lets modify this program to see what is returned in &lt;code&gt;rax&lt;/code&gt; .&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Pair { &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; x; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; y; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;union&lt;/span&gt; PairBits {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Pair p;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;unsigned&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;long&lt;/span&gt; bits;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Pair &lt;span style="color:#a6e22e"&gt;make_pair&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; b) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Pair tmp &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {a, b};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; tmp;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;print_binary64&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;uint64_t&lt;/span&gt; val) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; i &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;63&lt;/span&gt;; i &lt;span style="color:#f92672"&gt;&amp;gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; i&lt;span style="color:#f92672"&gt;--&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;putchar&lt;/span&gt;((val &lt;span style="color:#f92672"&gt;&amp;gt;&amp;gt;&lt;/span&gt; i) &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (i &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;putchar&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39; &amp;#39;&lt;/span&gt;); &lt;span style="color:#75715e"&gt;// group by bytes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;putchar&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;union&lt;/span&gt; PairBits u;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; u.p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;make_pair&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;sizeof union `u`: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(u));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;rax (hex) = 0x%016llx&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, u.bits);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;rax (bin) = &amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;print_binary64&lt;/span&gt;(u.bits);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;q.x = %d, q.y = %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, u.p.x, u.p.y);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Lets understand this program first.&lt;/p&gt;
&lt;p&gt;We can&amp;rsquo;t capture &lt;code&gt;rax&lt;/code&gt; directly because it exist in only. But there are two way ways to do it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Using union.&lt;/li&gt;
&lt;li&gt;Inline assembly.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We are implementing the union way because we are not known to inline assembly yet.&lt;/p&gt;
&lt;p&gt;The idea is simple, all the members in a union share the same memory starting at offset 0. So, &lt;code&gt;u.p&lt;/code&gt; struct and &lt;code&gt;u.bits&lt;/code&gt; are just two aliases for the same memory and the &lt;code&gt;sizeof&lt;/code&gt; printf confirms that.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s talk about &lt;code&gt;0x%016llx&lt;/code&gt; .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0x&lt;/code&gt; : literally prints &lt;code&gt;0x&lt;/code&gt; in front.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt; : start of format specifier.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; : pad with zeroes instead of space.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;16&lt;/code&gt; : total width of output is 16 characters. Every hex bit represents 4 binary bits so 64 binary bits require 16 hex digits.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ll&lt;/code&gt; : length modifier: long long (for 64-bit).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt; : print in hexadecimal lowercase.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since there is no builtin way to print binary bits, we created our own.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s run the program, we get:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ gcc main.c
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ./a.out
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sizeof union &lt;span style="color:#e6db74"&gt;`&lt;/span&gt;u&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rax &lt;span style="color:#f92672"&gt;(&lt;/span&gt;hex&lt;span style="color:#f92672"&gt;)&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; 0x0000000300000002
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rax &lt;span style="color:#f92672"&gt;(&lt;/span&gt;bin&lt;span style="color:#f92672"&gt;)&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;00000000&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;00000000&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;00000000&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;00000011&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;00000000&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;00000000&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;00000000&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;00000010&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;q.x &lt;span style="color:#f92672"&gt;=&lt;/span&gt; 2, q.y &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is the proof that the compiler packed both the members of the struct in &lt;code&gt;rax&lt;/code&gt; only.&lt;/p&gt;
&lt;h3&gt;12-byte Struct&lt;span class="hx:absolute hx:-mt-20" id="12-byte-struct"&gt;&lt;/span&gt;
&lt;a href="#12-byte-struct" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Point { &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; x; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; y; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; z;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Point &lt;span style="color:#a6e22e"&gt;make_pair&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; b, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; c) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Point p;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p.x &lt;span style="color:#f92672"&gt;=&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p.y &lt;span style="color:#f92672"&gt;=&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p.z &lt;span style="color:#f92672"&gt;=&lt;/span&gt; c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; p;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Point p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;make_pair&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;sizeof struct `p`: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(p));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is the assembly.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;make_pair:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; make a local copy of args (2, 3, 4)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;36&lt;/span&gt;[rbp], edi
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;40&lt;/span&gt;[rbp], esi
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;44&lt;/span&gt;[rbp], edx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; Copy them again&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;36&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;24&lt;/span&gt;[rbp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;40&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;[rbp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;44&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;[rbp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; Copy them again which is used in return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;24&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;12&lt;/span&gt;[rbp], rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;12&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; (2, 3) in rax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; ecx, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; 4 in rdx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdx, rcx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pop&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC0:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;sizeof struct `p`: %d\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; edx, &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; edi, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; make_pair
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; Unpack&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;12&lt;/span&gt;[rbp], rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;and&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;or&lt;/span&gt; eax, edx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, &lt;span style="color:#ae81ff"&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; printf@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This time, &lt;code&gt;rax&lt;/code&gt; alone can&amp;rsquo;t help as it has already contained the two ints. So we use &lt;code&gt;rdx&lt;/code&gt; to return the third int. The extra copying behavior is due to &lt;code&gt;-00&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This would be the state of &lt;code&gt;make_pair&lt;/code&gt; stack frame.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt; rbp
-4[rbp] &amp;lt;-&amp;gt; 4
-8[rbp] &amp;lt;-&amp;gt;
-12[rbp] &amp;lt;-&amp;gt; 2, 3
-16[rbp] &amp;lt;-&amp;gt; 4
-20[rbp] &amp;lt;-&amp;gt; 3
-24[rbp] &amp;lt;-&amp;gt; 2
-28[rbp] &amp;lt;-&amp;gt;
-32[rbp] &amp;lt;-&amp;gt;
-36[rbp] &amp;lt;-&amp;gt; 2
-40[rbp] &amp;lt;-&amp;gt; 3
-44[rbp] &amp;lt;-&amp;gt; 4&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;16-byte Struct&lt;span class="hx:absolute hx:-mt-20" id="16-byte-struct"&gt;&lt;/span&gt;
&lt;a href="#16-byte-struct" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Point { &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; x; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; y; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; z; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; s;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Point &lt;span style="color:#a6e22e"&gt;make_pair&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; b, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; c, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; d) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Point p;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p.x &lt;span style="color:#f92672"&gt;=&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p.y &lt;span style="color:#f92672"&gt;=&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p.z &lt;span style="color:#f92672"&gt;=&lt;/span&gt; c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p.s &lt;span style="color:#f92672"&gt;=&lt;/span&gt; d;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; p;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Point p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;make_pair&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;sizeof struct `p`: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(p));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is the assembly:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;make_pair:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; local copy of args (2, 3, 4, 5)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;[rbp], edi
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;24&lt;/span&gt;[rbp], esi
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;28&lt;/span&gt;[rbp], edx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;[rbp], ecx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; copy them for return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;[rbp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;24&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;12&lt;/span&gt;[rbp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;28&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; export two 8-byte pointers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdx, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pop&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC0:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;sizeof struct `p`: %d\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; ecx, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; edx, &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; edi, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; make_pair
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;[rbp], rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp], rdx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; printf@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we are smart enough to recognize that export two 8-byte pointers and unpack them in main is the strategy for 16-byte structs. Perfect.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Time for final boss, structs ≥ 16 bytes.&lt;/p&gt;
&lt;h2&gt;Returning Structs/Unions &amp;gt; 16 Bytes&lt;span class="hx:absolute hx:-mt-20" id="returning-structsunions--16-bytes"&gt;&lt;/span&gt;
&lt;a href="#returning-structsunions--16-bytes" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;For structs greater than 16 bytes in size, the caller must allocate space for the return object and pass a hidden pointer to it as the first argument.&lt;/p&gt;
&lt;p&gt;The callee writes the struct into that space and returns (with &lt;code&gt;rax&lt;/code&gt; typically holding that pointer back again).&lt;/p&gt;
&lt;p&gt;Basically, we came back to square one. The caller has to pass a pointer, either pass it directly or indirectly.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Like every single time, the caller would reserve space on stack, what changes is that this time, the caller will pass address to the start of memory reserve for stack in caller&amp;rsquo;s stack frame. The callee will use that pointer to populate the caller&amp;rsquo;s stack frame directly. And the callee returns the same address again. That&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;This is the source:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdint.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Point { &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; x; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; y; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; z; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; r; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; s;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Point &lt;span style="color:#a6e22e"&gt;make_pair&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; a, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; b, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; c, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; d, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Point p;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p.x &lt;span style="color:#f92672"&gt;=&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p.y &lt;span style="color:#f92672"&gt;=&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p.z &lt;span style="color:#f92672"&gt;=&lt;/span&gt; c;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p.r &lt;span style="color:#f92672"&gt;=&lt;/span&gt; d;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p.s &lt;span style="color:#f92672"&gt;=&lt;/span&gt; e;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; p;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; Point p &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;make_pair&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;sizeof struct `p`: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(p));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And the assembly:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;make_pair:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; local copy of arguments (2, 3, 4, 5, 6)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;40&lt;/span&gt;[rbp], rdi
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;44&lt;/span&gt;[rbp], esi
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;48&lt;/span&gt;[rbp], edx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;52&lt;/span&gt;[rbp], ecx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;56&lt;/span&gt;[rbp], r8d
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;60&lt;/span&gt;[rbp], r9d
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; another copy for return mgmt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;44&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;[rbp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;48&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;28&lt;/span&gt;[rbp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;52&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;24&lt;/span&gt;[rbp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;56&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;[rbp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;60&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;[rbp], eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; Updating the memory in main&amp;#39;s stack frame (via rdi)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rcx, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;40&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; save the address in caller&amp;#39;s stack in rcx for easy access&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; load 8-bit pointers to 2 and 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdx, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;24&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; load 8-bit pointers to 2 and 4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR [rcx], rax &lt;span style="color:#75715e"&gt;; dereference and populate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rcx], rdx &lt;span style="color:#75715e"&gt;; dereference and populate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; load 6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;[rcx], eax &lt;span style="color:#75715e"&gt;; copy 6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;40&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; prepare rax for return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pop&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC0:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;sizeof struct `p`: %d\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; address of struct on main&amp;#39;s stack frame&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; r9d, &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; r8d, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; ecx, &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; edx, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax &lt;span style="color:#75715e"&gt;; the address is passed in rdi as the 1st arg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; make_pair
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; printf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, &lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; printf@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The state of stack:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;make_pair:
rbp
-4[rbp] &amp;lt;-&amp;gt;
-8[rbp] &amp;lt;-&amp;gt;
-12[rbp] &amp;lt;-&amp;gt;
-16[rbp] &amp;lt;-&amp;gt; 6
-20[rbp] &amp;lt;-&amp;gt; 5
-24[rbp] &amp;lt;-&amp;gt; 4
-28[rbp] &amp;lt;-&amp;gt; 3
-32[rbp] &amp;lt;-&amp;gt; 2
-36[rbp] &amp;lt;-&amp;gt;
-40[rbp] &amp;lt;-&amp;gt; 3960
-44[rbp] &amp;lt;-&amp;gt; 2
-48[rbp] &amp;lt;-&amp;gt; 3
-52[rbp] &amp;lt;-&amp;gt; 4
-56[rbp] &amp;lt;-&amp;gt; 5
-60[rbp] &amp;lt;-&amp;gt; 6
main:
3992 &amp;lt;-&amp;gt; rbp
3988 &amp;lt;-&amp;gt; -4[rbp] &amp;lt;-&amp;gt;
3984 &amp;lt;-&amp;gt; -8[rbp] &amp;lt;-&amp;gt;
3980 &amp;lt;-&amp;gt; -12[rbp] &amp;lt;-&amp;gt;
3976 &amp;lt;-&amp;gt; -16[rbp] &amp;lt;-&amp;gt; 6
3972 &amp;lt;-&amp;gt; -20[rbp] &amp;lt;-&amp;gt; 5
3968 &amp;lt;-&amp;gt; -24[rbp] &amp;lt;-&amp;gt; 4
3964 &amp;lt;-&amp;gt; -28[rbp] &amp;lt;-&amp;gt; 3
3960 &amp;lt;-&amp;gt; -32[rbp] &amp;lt;-&amp;gt; 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Conclusion&lt;span class="hx:absolute hx:-mt-20" id="conclusion"&gt;&lt;/span&gt;
&lt;a href="#conclusion" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;What did we learn?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;-O0&lt;/code&gt; is best to study the fundamentals, the bookish behavior. It is not for shipping the final product. In any of the cases, just change &lt;code&gt;-O0&lt;/code&gt; to 1 or 2 and you&amp;rsquo;ll start to notice how dangerous the assembly gets. Dangerous in terms of optimization. It shows that a group of assembly instructions can be replaced by one single assembly instruction as well.&lt;/li&gt;
&lt;li&gt;A lot of times, the most &amp;ldquo;complex looking things&amp;rdquo; boils down to simple hacks.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;And we are done with returning complex data.&lt;/p&gt;</description></item><item><title/><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/functions/stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/functions/stack/</guid><description>
&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;August 15 and 16, 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;September 3, 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Everyone knows stack as a data structure, and functions as reusable code blocks. So we are not going to repeat that theory.&lt;/p&gt;
&lt;h2&gt;The basic idea behind stack&lt;span class="hx:absolute hx:-mt-20" id="the-basic-idea-behind-stack"&gt;&lt;/span&gt;
&lt;a href="#the-basic-idea-behind-stack" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We know that memory is a flat-array. Stack approaches that memory sequentially.&lt;/p&gt;
&lt;p&gt;Stack as a memory management technique works exactly like a stack of plates.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first plate is at the bottom and every other plate comes above it (&lt;em&gt;push&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;The last plate is the top one.&lt;/li&gt;
&lt;li&gt;When we take out plates, it happens from the top, not bottom (&lt;em&gt;pop&lt;/em&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may question that a stack of plates grow upwards while the stack in memory grows downwards.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actually, the addresses grow downwards with each push on stack.&lt;/li&gt;
&lt;li&gt;This feels counterintuitive because we don&amp;rsquo;t know how memory is structured.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Checkout the&lt;/em&gt; &lt;a href="../../all-roads-to-memory/introduction/virtual-memory-layout.md"&gt;&lt;em&gt;process memory layout&lt;/em&gt;&lt;/a&gt; &lt;em&gt;article for more information. It explains it the best.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;The whole addressable memory is not managed with stack. There are multiple techniques for multiple purposes.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;What makes something a function?&lt;span class="hx:absolute hx:-mt-20" id="what-makes-something-a-function"&gt;&lt;/span&gt;
&lt;a href="#what-makes-something-a-function" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;A function has its own variable declarations and nested function calls.&lt;/li&gt;
&lt;li&gt;A function can receive arguments.&lt;/li&gt;
&lt;li&gt;A function has a return context.&lt;/li&gt;
&lt;li&gt;A function can return values to the caller.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If something can explain functions at best, it&amp;rsquo;s &lt;strong&gt;code reusability&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We know that labels combined with jump statements help us achieve control flow.&lt;/p&gt;
&lt;p&gt;The problem with jump statements is that they are absolute in nature.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is no return context.&lt;/li&gt;
&lt;li&gt;If I have to return to the caller label, which called the callee label, the jump would be absolute. Meaning, I would return to the start of the caller label, not where the caller label had called that second label.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This lack of context limits code reusability, which is paramount to functions.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Now the question is, how can we create labels such that they can emulate a function?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;And the answer is &lt;strong&gt;stack&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How stack qualifies for function management?&lt;span class="hx:absolute hx:-mt-20" id="how-stack-qualifies-for-function-management"&gt;&lt;/span&gt;
&lt;a href="#how-stack-qualifies-for-function-management" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Primarily there are 2 parts to function management.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Managing the scope of a function.&lt;/li&gt;
&lt;li&gt;Managing the scope of nested function calls.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Everyone has some experience with C. You create &lt;code&gt;main&lt;/code&gt; function and call &lt;code&gt;printf&lt;/code&gt; from &lt;code&gt;stdio.h&lt;/code&gt; to print &lt;code&gt;Hello, World!&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;printf&lt;/code&gt; itself is a function, which uses other internal functions to perform the task it is meant to.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We would not appreciate one function accessing the variables declared inside another function, right? But we want functions to access a limited part of other functions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;That&amp;rsquo;s the problem of scope&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we call &lt;code&gt;printf&lt;/code&gt; from &lt;code&gt;main&lt;/code&gt; , we would not appreciate &lt;code&gt;main&lt;/code&gt; finishing before &lt;code&gt;printf&lt;/code&gt;. We want it to wait.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;That&amp;rsquo;s the problem of lifecycle.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When one function calls another function, we want the callee function to return to the caller function, so that it knows it has finished and can continue its execution. Maybe we want to return something to the caller function as well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;That&amp;rsquo;s the problem of return context and return values.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;How stack fits in?&lt;span class="hx:absolute hx:-mt-20" id="how-stack-fits-in"&gt;&lt;/span&gt;
&lt;a href="#how-stack-fits-in" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Close your eyes and imagine a stack of plates.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The last plate, which is on the top, is always taken out first.&lt;/li&gt;
&lt;li&gt;When more plates come after getting washed, they come on the top of the existing stack.&lt;/li&gt;
&lt;li&gt;Plates can&amp;rsquo;t be taken out from middle.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Isn&amp;rsquo;t this the same as order and lifecycle of function calls?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Until the callee is not finished, caller can&amp;rsquo;t execute further.&lt;/li&gt;
&lt;li&gt;Until the plate on top is not taken, the bottom ones can&amp;rsquo;t be taken out.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Now imagine a stack of office files, organized from high priority (top) to low priority (bottom), each containing a number of pages.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each file has a case study and each case has its own data collection and outcomes.&lt;/li&gt;
&lt;li&gt;Similarly, each function gets its own universe where its declarations and nested calls reside.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Close your eyes one last time and imagine adding and removing plates from the stack.&lt;/p&gt;
&lt;p&gt;Can you see stack smoothly lining up with our priorities?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is &lt;code&gt;main&lt;/code&gt; which calls &lt;code&gt;printf&lt;/code&gt;. A stack frame is created and the control is transferred to it.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;printf&lt;/code&gt; is finished, the control naturally returns to &lt;code&gt;main&lt;/code&gt; , without any extra managerial logic.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;scanf&lt;/code&gt; is called, another stack frame is created and the control is transferred to it. And when it finishes, the control returns back &lt;code&gt;main&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Each stack frame is isolated, so the previous frame or the next frame can&amp;rsquo;t mess with it.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;I&amp;rsquo;ve deliberately kept it explicit and verbose so that we can have a broader overview of stack as a methodology, not just a data structure. I hope it was worth it.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Let&amp;rsquo;s see how functions actually exist in assembly.&lt;/p&gt;
&lt;h2&gt;Introducing Procedures&lt;span class="hx:absolute hx:-mt-20" id="introducing-procedures"&gt;&lt;/span&gt;
&lt;a href="#introducing-procedures" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In simple words, a procedure is just a code symbol with jump statements and some &amp;ldquo;clever&amp;rdquo; usage of stack.&lt;/p&gt;
&lt;p&gt;A procedure is a named, reusable block of code that performs a specific task, can accept input (arguments), has proper memory-management and returns a result.&lt;/p&gt;
&lt;h3&gt;Anatomy Of A Procedure&lt;span class="hx:absolute hx:-mt-20" id="anatomy-of-a-procedure"&gt;&lt;/span&gt;
&lt;a href="#anatomy-of-a-procedure" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A procedure is composed of four core components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Header&lt;/strong&gt; (label) is the name of the function.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prologue&lt;/strong&gt; (entry setup) represents the clever use of stack.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Body&lt;/strong&gt; represents the function body.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Epilogue&lt;/strong&gt; (cleanup and return)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Management Pointers&lt;span class="hx:absolute hx:-mt-20" id="management-pointers"&gt;&lt;/span&gt;
&lt;a href="#management-pointers" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The clever use of stack is about implementing stack frames and return context, which requires some general purpose registers, reserved for some specific purposes in the System V ABI.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3&gt;Stack Frame&lt;span class="hx:absolute hx:-mt-20" id="stack-frame"&gt;&lt;/span&gt;
&lt;a href="#stack-frame" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;A stack frame is chunk of stack that belongs to a single procedure call.&lt;/p&gt;
&lt;p&gt;When a function calls another function, a new stack frame is created and the instruction pointer register (&lt;code&gt;rip&lt;/code&gt;) is adjusted by the CPU to point to the instruction in the new procedure.&lt;/p&gt;
&lt;p&gt;While the upper stack frame exists, the lower one can&amp;rsquo;t execute itself. Once the stack frame at top is done with its execution and it is killed, &lt;code&gt;rip&lt;/code&gt; is adjusted again to continue where it has left.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;How is a stack frame structured?&lt;span class="hx:absolute hx:-mt-20" id="how-is-a-stack-frame-structured"&gt;&lt;/span&gt;
&lt;a href="#how-is-a-stack-frame-structured" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Lets revise how user space memory is laid out. &lt;em&gt;For more information, checkout&lt;/em&gt; &lt;a href="../../all-roads-to-memory/introduction/virtual-memory-layout.md"title="mention"&gt;virtual-memory-layout.md&lt;/a&gt;&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt; User Space Memory Layout
*--------------------------*
| High Memory (~128 TiB) |
| *-----------------* |
| | Stack (↓) | |
| *-----------------* |
| | mmap region | |
| *-----------------* |
| | Free Space | |
| *-----------------* |
| | Heap (↑) | |
| *-----------------* |
| | Data (data/bss) | |
| *-----------------* |
| | Code | |
| *-----------------* |
| Low Memory (0..0) |
*--------------------------*&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;p&gt;This is the general layout of a stack frame.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;pre&gt;&lt;code&gt;*---------------------*
| Function Arugments | &amp;lt;-- [rbp&amp;#43;16], [rbp&amp;#43;24], ....
| (beyond 6) |
*---------------------*
| Return Address |
| (next ins in prev.) | &amp;lt;-- [rbp&amp;#43;8]
*---------------------*
| Old Base Ptr Saved | &amp;lt;-- [rbp]: old base pointer &amp;amp;&amp;amp; rbp: new base pointer
*---------------------*
| Local Variables | &amp;lt;-- [rbp-8], [rbp-16], ....
*---------------------*
| Empty Space |
| (for alignment) |
| (as required) |
*---------------------* &amp;lt;-- rsp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;The first 6 arguments go in registers, we know that. Checkout&lt;/em&gt; &lt;a href="../orientation/calling-conventions.md"title="mention"&gt;calling-conventions.md&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Shorthand Operations&lt;span class="hx:absolute hx:-mt-20" id="shorthand-operations"&gt;&lt;/span&gt;
&lt;a href="#shorthand-operations" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A call instruction calls a procedure, which is shorthand for pushing the address of next instruction (&lt;code&gt;rip&lt;/code&gt;) to stack and jumping to the procedure&amp;rsquo;s label, like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rip
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;jmp&lt;/span&gt; label&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Although this is not exactly how it is done, but we can consider it like this on surface.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;push&lt;/code&gt; is a shorthand for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; [rsp], reg&lt;span style="color:#f92672"&gt;/&lt;/span&gt;imm&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pop&lt;/code&gt; is a shorthand for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; reg, [rsp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;add&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;leave&lt;/code&gt; restores the previous stack frame, which is a shorthand for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rsp, rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;pop&lt;/span&gt; rbp&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ret&lt;/code&gt; is a shorthand to take the return address from stack and put it into &lt;code&gt;rip&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;pop&lt;/span&gt; rip&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How procedures are set up?&lt;span class="hx:absolute hx:-mt-20" id="how-procedures-are-set-up"&gt;&lt;/span&gt;
&lt;a href="#how-procedures-are-set-up" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Call to procedure&lt;/li&gt;
&lt;li&gt;Function prologue&lt;/li&gt;
&lt;li&gt;Body&lt;/li&gt;
&lt;li&gt;Function epilogue&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Prologue&lt;span class="hx:absolute hx:-mt-20" id="prologue"&gt;&lt;/span&gt;
&lt;a href="#prologue" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As per System V ABI, &lt;code&gt;rsp&lt;/code&gt; is guaranteed to be 16-bytes aligned.&lt;/p&gt;
&lt;p&gt;Before calling a procedure, &lt;code&gt;rsp&lt;/code&gt; is 16-bytes aligned. The &lt;code&gt;call&lt;/code&gt; instruction is a shorthand for two instructions.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Push the return address on stack, which is basically the next instruction in the current (caller&amp;rsquo;s) stack frame. This makes &lt;code&gt;rsp&lt;/code&gt; misaligned by 8-bytes.&lt;/li&gt;
&lt;li&gt;Jump on the procedure&amp;rsquo;s header (label).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After &lt;code&gt;call&lt;/code&gt; , we push the base pointer of the caller&amp;rsquo;s stack frame on stack, this is used to return to the caller function. This instruction makes the &lt;code&gt;rsp&lt;/code&gt; 16-bytes aligned again.&lt;/p&gt;
&lt;p&gt;After this, we setup the base pointer for the current stack frame. This is a little confusing so we will move a little slowly here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A push instruction is a shorthand for &amp;ldquo;reserve 8 bytes, then populate them&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When we push return address, the &lt;code&gt;rsp&lt;/code&gt; now points to the memory where return address is stored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Similarly, when we push &lt;code&gt;rbp&lt;/code&gt; on stack, the &lt;code&gt;rsp&lt;/code&gt; now points to the memory where &lt;code&gt;rbp&lt;/code&gt; is stored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We have pushed &lt;code&gt;rbp&lt;/code&gt; on stack but the original value of &lt;code&gt;rbp&lt;/code&gt; is still in &lt;code&gt;rbp&lt;/code&gt;, right? When we do:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We are updating the base pointer. The new base or the stack frame starts from here.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Take this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the &lt;code&gt;rsp&lt;/code&gt; was &lt;code&gt;0d4000&lt;/code&gt; before &lt;code&gt;call&lt;/code&gt;, pushing the return address would subtract it to &lt;code&gt;0d3992&lt;/code&gt;. &lt;code&gt;0d3992&lt;/code&gt; stores the return address.&lt;/li&gt;
&lt;li&gt;When we push &lt;code&gt;rbp&lt;/code&gt;, the &lt;code&gt;rsp&lt;/code&gt; is subtracted by 8 again and &lt;code&gt;rbp&lt;/code&gt; goes on &lt;code&gt;0d3984&lt;/code&gt;. The stack also points at &lt;code&gt;0d3984&lt;/code&gt; now.&lt;/li&gt;
&lt;li&gt;When we do &lt;code&gt;mov rbp, rsp&lt;/code&gt;, &lt;code&gt;rbp&lt;/code&gt; now stores &lt;code&gt;0d3984&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;When you ask what is &lt;code&gt;0d3984&lt;/code&gt;, it would be the new base pointer. When you ask what is at &lt;code&gt;0d3984&lt;/code&gt;, it would be the old base pointer. I hope it is clear.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;These two instructions form the &lt;strong&gt;function prologue&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;h3&gt;Body&lt;span class="hx:absolute hx:-mt-20" id="body"&gt;&lt;/span&gt;
&lt;a href="#body" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Next comes the &lt;strong&gt;function body&lt;/strong&gt;. It is made up of two parts.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reservation on stack.&lt;/li&gt;
&lt;li&gt;Everything else (instructions and static allocation).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Reservation on stack is a little tricky. This is where the concept of padding becomes important.&lt;/p&gt;
&lt;p&gt;Stack pointer movement is word-aligned. Meaning, &lt;code&gt;rsp&lt;/code&gt; always moves in units of the machine&amp;rsquo;s word size, which is 64-bit for us.&lt;/p&gt;
&lt;p&gt;But, there are some special instructions (&lt;code&gt;SIMD&lt;/code&gt;) which require the stack to be 16-bytes aligned.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Why? Checkout&lt;/em&gt; &lt;a href="../simd.md"title="mention"&gt;simd.md&lt;/a&gt;, &lt;em&gt;&lt;strong&gt;but it is not required here, so you can do that later.&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far, the stack is aligned. But now we have to reserve space for locals.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To keep &lt;code&gt;rsp&lt;/code&gt; 16-bytes aligned, the total allocation on stack must be divisible by 16.&lt;/li&gt;
&lt;li&gt;As long as the total allocation on stack is 16 divisible, no padding is required. If that&amp;rsquo;s not the case, the allocation is rounded up to the next 16-divisible digit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If 100 bytes of locals were required, 112 bytes are reserved. The 12 bytes are for 16-bytes alignment.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;There are &lt;strong&gt;leaf functions&lt;/strong&gt; which are functions which don&amp;rsquo;t call any other functions inside them. For leaf functions, a concept called &lt;strong&gt;red zone&lt;/strong&gt; exists in x64 System V ABI.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Red zone is a small area of memory on the stack that a function can use for temporary storage without explicitly moving the stack pointer.&lt;/li&gt;
&lt;li&gt;The red zone is 128 bytes immediately below the &lt;code&gt;rsp&lt;/code&gt; (stack pointer).&lt;/li&gt;
&lt;li&gt;The red zone is guaranteed to be safe, nothing will write there unexpectedly.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Epilogue&lt;span class="hx:absolute hx:-mt-20" id="epilogue"&gt;&lt;/span&gt;
&lt;a href="#epilogue" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;It is about cleanup and return.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Stack does not need a deallocation process. To free the memory, we just make it inaccessible and it is quite efficient. How does that work?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Technically, reducing &lt;code&gt;rsp&lt;/code&gt; doesn&amp;rsquo;t clear the memory. The values are still there.&lt;/li&gt;
&lt;li&gt;The point is that there are so many processes running on a machine constantly. You mark a memory inaccessible, ends the program and another process quickly overwrites the stack memory.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we execute the &lt;code&gt;leave&lt;/code&gt; instruction,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It restores the &lt;code&gt;rsp&lt;/code&gt; by moving &lt;code&gt;rbp&lt;/code&gt; into it. Remember, what is &lt;code&gt;rbp&lt;/code&gt; pointing at? The old base pointer.&lt;/li&gt;
&lt;li&gt;When we do &lt;code&gt;pop rbp&lt;/code&gt; it restores the old base pointer in &lt;code&gt;rbp&lt;/code&gt; by popping &lt;code&gt;rsp&lt;/code&gt; , moving its value into &lt;code&gt;rbp&lt;/code&gt; and adding 8-bytes to &lt;code&gt;rsp&lt;/code&gt; to point at the return address.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At last we execute the &lt;code&gt;ret&lt;/code&gt; instruction, which pops the return address into &lt;code&gt;rip&lt;/code&gt;. And we are back into the old stack frame or old function context.&lt;/p&gt;
&lt;h3&gt;What about return value?&lt;span class="hx:absolute hx:-mt-20" id="what-about-return-value"&gt;&lt;/span&gt;
&lt;a href="#what-about-return-value" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As per the ABI, the return goes in the accumulator (&lt;code&gt;rax&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;When you write raw assembly, you can technically return multiple things as long as you keep ABI rules in check. But when you are writing C, only one return value is possible.&lt;/p&gt;
&lt;h2&gt;The Ultimate Question: Why functions In C return only one value?&lt;span class="hx:absolute hx:-mt-20" id="the-ultimate-question-why-functions-in-c-return-only-one-value"&gt;&lt;/span&gt;
&lt;a href="#the-ultimate-question-why-functions-in-c-return-only-one-value" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I always have to use heap to return values. Why C is not like Python or JavaScript where your function can return multiple values?&lt;/p&gt;
&lt;p&gt;A simple value can be returned in a register. Multiple values require multiple registers, which would need complex ABI rules. Although the existing ABI conventions are no simpler but that&amp;rsquo;s all I have found.&lt;/p&gt;
&lt;p&gt;Although we can return a complex data structure like &lt;code&gt;struct&lt;/code&gt;, but again, that changes the situation.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Conclusion&lt;span class="hx:absolute hx:-mt-20" id="conclusion"&gt;&lt;/span&gt;
&lt;a href="#conclusion" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This sets up the foundation for the next exploration. Now we know how functions exist at basic. From here we can study:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Function arguments.&lt;/li&gt;
&lt;li&gt;How assembly sees function parameters. &lt;em&gt;For clarity, parameters are declared in definition and arguments are passed in actual call. Although they are treated synonymous, they aren&amp;rsquo;t, at least at low level.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Single return value.&lt;/li&gt;
&lt;li&gt;Returning a complex type (array, structure, union and pointer)&lt;/li&gt;
&lt;li&gt;Recursion&lt;/li&gt;
&lt;li&gt;Calling mechanisms: call by value and call by reference.&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Always keep in mind, low level systems aren&amp;rsquo;t black magic. They are complex but can be understood if approached the right way.&lt;/p&gt;
&lt;p&gt;By the way, this article is polished multiple times, which proves that I didn&amp;rsquo;t learned all this in one run, nor even in consecutive runs. Although the head offers a count of dates, you can always check the GitHub. I am mentioning this because I don&amp;rsquo;t want you mistreat your overwhelm. It is genuine. I too have faced that.&lt;/p&gt;</description></item><item><title/><link>https://hi-anki.github.io/gitbook/docs/low-level-architecture/mem-alloc/array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://hi-anki.github.io/gitbook/docs/low-level-architecture/mem-alloc/array/</guid><description>
&lt;h1&gt;Arrays&lt;/h1&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;1, 2, 5 September 2025&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Premise&lt;span class="hx:absolute hx:-mt-20" id="premise"&gt;&lt;/span&gt;
&lt;a href="#premise" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Arrays are just consecutive blocks of memory interpreted together as a collection.&lt;/p&gt;
&lt;p&gt;We use printf to make &lt;code&gt;main&lt;/code&gt; a non-leaf function so that we don&amp;rsquo;t get confused with red zone.&lt;/p&gt;
&lt;h2&gt;Starters&lt;span class="hx:absolute hx:-mt-20" id="starters"&gt;&lt;/span&gt;
&lt;a href="#starters" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We are already familiar with these concepts, so we just have to reinforce them for arrays.&lt;/p&gt;
&lt;h3&gt;Example 1: Declaration Only&lt;span class="hx:absolute hx:-mt-20" id="example-1-declaration-only"&gt;&lt;/span&gt;
&lt;a href="#example-1-declaration-only" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr[&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pop&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As expected, there is no reservation on stack.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Example 2 - Declare and Use (No init)&lt;span class="hx:absolute hx:-mt-20" id="example-2---declare-and-use-no-init"&gt;&lt;/span&gt;
&lt;a href="#example-2---declare-and-use-no-init" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If you print the elements, you will find garbage values.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Example 3 - Declaration + Initialization&lt;span class="hx:absolute hx:-mt-20" id="example-3---declaration--initialization"&gt;&lt;/span&gt;
&lt;a href="#example-3---declaration--initialization" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr[&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We need &lt;code&gt;5*4 = 20 bytes&lt;/code&gt; on stack and the closest 16-bytes aligned round off for 20 is 32 so 32 bytes will be reserved on stack.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;28&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;24&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Note: If you do not mention 5 explicitly, the assembly generated is no different, which proves that the calculation for size allocation is done at compilation level.&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Example 4 - Empty Initialization&lt;span class="hx:absolute hx:-mt-20" id="example-4---empty-initialization"&gt;&lt;/span&gt;
&lt;a href="#example-4---empty-initialization" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr[&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is the assembly.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pxor&lt;/span&gt; xmm0, xmm0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;movaps&lt;/span&gt; XMMWORD PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;[rbp], xmm0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;movaps&lt;/span&gt; XMMWORD PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;[rbp], xmm0&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The 3 instructions above are used to zero-initialize the 5 elements at runtime.&lt;/p&gt;
&lt;p&gt;We could have used simply &lt;code&gt;mov&lt;/code&gt; instructions or even &lt;code&gt;xor&lt;/code&gt; to do the same thing, why these instructions then? First of all, we can definitely do that. If we use &lt;code&gt;-mno-sse -mno-sse2 -mno-avx&lt;/code&gt; flags with &lt;code&gt;gcc&lt;/code&gt; , we can see that the compiler now uses &lt;code&gt;mov&lt;/code&gt;.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;24&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If we change from &lt;code&gt;arr[5]&lt;/code&gt; to &lt;code&gt;arr[100]&lt;/code&gt; and keep these flags, we&amp;rsquo;d expect too many &lt;code&gt;mov&lt;/code&gt; instructions. Let&amp;rsquo;s see.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;400&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rdx, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;400&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; ecx, &lt;span style="color:#ae81ff"&gt;50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rdx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rep&lt;/span&gt; stosq&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This was completely unexpected, isn&amp;rsquo;t it? And the best part is yet to come. I tried to compile the &lt;code&gt;arr[5]&lt;/code&gt; code again and now I have a slightly different assembly. The number of &lt;code&gt;mov&lt;/code&gt; instructions reduced.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; push rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mov rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; sub rsp, &lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mov QWORD PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;20&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mov QWORD PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;12&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; mov DWORD PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now the question is, what&amp;rsquo;s happening here?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modern compilers are &lt;strong&gt;optimization monsters&lt;/strong&gt;. They have evolved for decades and now they have too many tricks under their sleeves. You close one door and another is opened.&lt;/li&gt;
&lt;li&gt;Compilers search for the most efficient way to do something, and that depends on so many parameters. This is why there is always a possibility that two identical systems in an identical environment with the same compiler can generate a different assembly. The extent of difference also varies.&lt;/li&gt;
&lt;li&gt;The generated assembly has no guarantee to be the same, but the intent remains the same, always.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s why I didn&amp;rsquo;t jumped on explaining what are &lt;code&gt;pxor&lt;/code&gt; and &lt;code&gt;movaps&lt;/code&gt;. I wanted to prove the point that &lt;em&gt;understanding the intent is a far better strategy than understanding every optimization that the compiler can make to do the same thing. There is no end to it.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;So, what&amp;rsquo;s the intent here?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The intent is to zero-initialize the array, efficiently.&lt;/li&gt;
&lt;li&gt;SIMD instructions are one way to do that. They zero multiple integers in parallel, reducing instruction count and improving throughput. Here, &lt;code&gt;pxor&lt;/code&gt; clears the register, and &lt;code&gt;movaps&lt;/code&gt; writes aligned 128-bit blocks.&lt;/li&gt;
&lt;li&gt;For now, it&amp;rsquo;s enough to know that SIMD zeroes multiple elements in parallel for efficiency. A deeper SIMD deep-dive deserves its own write-up.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;So, when we do empty initialization, the array is zero-initialized.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: When we use an uninitialized array, the elements have garbage value, by default, in &lt;code&gt;auto&lt;/code&gt; class, obviously.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Example 5 - Incomplete Initialization&lt;span class="hx:absolute hx:-mt-20" id="example-5---incomplete-initialization"&gt;&lt;/span&gt;
&lt;a href="#example-5---incomplete-initialization" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We are declaring an array of 5 elements but we are not initializing all the 5 elements.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr[&lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you printf the elements, you will find that 3rd and 4th positions are zeroed out. Let&amp;rsquo;s have a look at assembly.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; Zero-initialize the array&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pxor&lt;/span&gt; xmm0, xmm0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;movaps&lt;/span&gt; XMMWORD PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;[rbp], xmm0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;movd&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;[rbp], xmm0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; Initialize the positions from starting&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;28&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;24&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;An uninitialized array has garbage values but an initialized one should have values properly.&lt;/p&gt;
&lt;p&gt;When you initialize the array completely along the length, there is no need to zero before. Here we are doing partial initialization, which is why we need to zero-initialize the array so that each element has a proper value, then we are initializing the initial from starting positions with specified values.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Variable Length Allocation&lt;span class="hx:absolute hx:-mt-20" id="variable-length-allocation"&gt;&lt;/span&gt;
&lt;a href="#variable-length-allocation" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is the most important one here.&lt;/p&gt;
&lt;p&gt;If you do:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;; &lt;span style="color:#75715e"&gt;// Known at compile-time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr[n];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; m; &lt;span style="color:#75715e"&gt;// Not known at compile-time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;scanf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;m);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr[m];&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Both are identified as variable length allocation, even though &lt;code&gt;n&lt;/code&gt; is known at compile time, the compiler triggers code for VLA.&lt;/p&gt;
&lt;p&gt;What makes VLA different is that you have to calculate the total bytes required to be allocated on stack.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As of now (&lt;em&gt;September 2, 2025&lt;/em&gt;) I don&amp;rsquo;t know why the compiler emitted code for VLA when &lt;code&gt;n&lt;/code&gt; is known at compile-time.&lt;/li&gt;
&lt;li&gt;Although the idea remains the same in both the cases, I&amp;rsquo;d suggest to keep the &amp;ldquo;&lt;strong&gt;not known at compile-time&lt;/strong&gt;&amp;rdquo; case in reference because it would not make any sense in the other one.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Since &lt;code&gt;n&lt;/code&gt; is not known beforehand, we can&amp;rsquo;t allocate stack in one single instruction. We follow a structured process to allocate stack.&lt;/p&gt;
&lt;h3&gt;Steps In VLA&lt;span class="hx:absolute hx:-mt-20" id="steps-in-vla"&gt;&lt;/span&gt;
&lt;a href="#steps-in-vla" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Allocate space for things defined at compile-time.&lt;/li&gt;
&lt;li&gt;Ensure &lt;code&gt;n&lt;/code&gt; is populated, either at compile-time or runtime.&lt;/li&gt;
&lt;li&gt;Calculate the bytes required by &lt;code&gt;type arr[n]&lt;/code&gt; declaration.&lt;/li&gt;
&lt;li&gt;Calculate the padding required for 16-bytes alignment for &lt;code&gt;rsp&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Allocate space for the array.&lt;/li&gt;
&lt;li&gt;Align the base address of the array, &lt;code&gt;arr[0]&lt;/code&gt; to be 4-bytes.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Example&lt;span class="hx:absolute hx:-mt-20" id="example"&gt;&lt;/span&gt;
&lt;a href="#example" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n; &lt;span style="color:#75715e"&gt;// Not known at compile-time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;scanf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;n);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr[n];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, arr[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Normally integer is sized 4-bytes, so the total requirement is given by &lt;code&gt;n*4&lt;/code&gt; bytes.&lt;/p&gt;
&lt;p&gt;Now we have to calculate padding. Lets see how much padding is required for &lt;code&gt;n ∈ {1....8}&lt;/code&gt;&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;This shows that the value for padding for a 4-byte integer belongs to &lt;code&gt;{0, 4, 8, 12}&lt;/code&gt; . Plus, when the total bytes required are greater than the closest 16-divisible digit, we take the next 16-divisible digit.&lt;/p&gt;
&lt;p&gt;From this information, we can create a simple program to calculate the total bytes required.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Enter n: &amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;scanf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;n);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; l, u;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; bytes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; n &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;sizeof&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (bytes &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Voila... It is a multiple of 16!&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (bytes &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; u &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bytes &lt;span style="color:#f92672"&gt;+&lt;/span&gt; ((bytes &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;) &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; l &lt;span style="color:#f92672"&gt;=&lt;/span&gt; u &lt;span style="color:#f92672"&gt;-&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; l &lt;span style="color:#f92672"&gt;=&lt;/span&gt; bytes &lt;span style="color:#f92672"&gt;-&lt;/span&gt; ((bytes &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; u &lt;span style="color:#f92672"&gt;=&lt;/span&gt; l &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;u: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, u);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;l: %d&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, l);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt; Allocate %d bytes on stack.&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;\n&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;, u);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This program &amp;ldquo;efficiently&amp;rdquo; calculates how much &lt;code&gt;n*sizeof(int)&lt;/code&gt; defers from a multiple of 16. And that&amp;rsquo;s basically the &amp;ldquo;intent&amp;rdquo; behind variable length allocation. &lt;em&gt;We have to calculate how far we are from the next multiple of 16. Once we get this value, we can allocate space on stack.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;By the way, this is just one way to do it. Let&amp;rsquo;s see how the compiler does it.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.section&lt;/span&gt; .rodata
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.LC0:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;%d&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.globl&lt;/span&gt; main
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;.type&lt;/span&gt; main, &lt;span style="color:#960050;background-color:#1e0010"&gt;@&lt;/span&gt;function
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; init&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;40&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbx, rax &lt;span style="color:#75715e"&gt;; save rsp in rbx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; scanf(&amp;#34;%d&amp;#34;, &amp;amp;n)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;36&lt;/span&gt;[rbp] &lt;span style="color:#75715e"&gt;; &amp;amp;n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rsi, rax &lt;span style="color:#75715e"&gt;; arg2 = &amp;amp;n&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip] &lt;span style="color:#75715e"&gt;; &amp;#34;%d&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax &lt;span style="color:#75715e"&gt;; arg1 = &amp;#34;%d&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; __isoc99_scanf@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; calculate total bytes required&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;36&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;movsx&lt;/span&gt; rdx, eax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rdx, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;24&lt;/span&gt;[rbp], rdx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cdqe&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rdx, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;&lt;span style="color:#f92672"&gt;+&lt;/span&gt;rax&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; calculate padding required for 16-bytes alignment of rsp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rax, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt; rax, rdx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; ecx, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; edx, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;div&lt;/span&gt; rcx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;imul&lt;/span&gt; rax, rax, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; reserve space for array&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; Make the base address of array (arr[0]) 4-byte aligned, if not&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;add&lt;/span&gt; rax, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;shr&lt;/span&gt; rax, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sal&lt;/span&gt; rax, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; printf()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;[rbp], rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rax, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;32&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR [rax]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; esi, eax &lt;span style="color:#75715e"&gt;; &amp;amp;arr[0]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, .LC0[rip] &lt;span style="color:#75715e"&gt;; arg2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax &lt;span style="color:#75715e"&gt;; arg1 = arr[0]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; printf@PLT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;; restore rsp and return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rsp, rbx
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbx, &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The compiler has employed another strategy to do this calculation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add 15 to the bytes required, we get &lt;code&gt;(n + 15)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Divide this by 16 and focus on quotient, we have to do &lt;code&gt;(n+15)//16&lt;/code&gt; .&lt;/li&gt;
&lt;li&gt;Multiply the quotient with 16 and you get the total bytes required.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, take n = 5.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n*sizeof(int)&lt;/code&gt; = &lt;code&gt;5*4 = 20&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;20+15 = 35&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;35//16 = 2&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;2*16 = 32&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you have trouble making sense of this, remember the &lt;code&gt;ceil()&lt;/code&gt; and &lt;code&gt;floor()&lt;/code&gt; functions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ceil&lt;/code&gt; rounds up to the next integer while &lt;code&gt;floor&lt;/code&gt; rounds down to the previous integer.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ceil(5.6)&lt;/code&gt; would give 6 while &lt;code&gt;floor(5.6)&lt;/code&gt; would give 5.&lt;/li&gt;
&lt;li&gt;If you notice, we are rounding in terms of 1.&lt;/li&gt;
&lt;li&gt;The algorithm above does the same thing except it rounds integers to the next multiple of 16. &lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Questions Time&lt;span class="hx:absolute hx:-mt-20" id="questions-time"&gt;&lt;/span&gt;
&lt;a href="#questions-time" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Q1. What&amp;rsquo;s the purpose of saving &lt;code&gt;rsp&lt;/code&gt; in &lt;code&gt;rbx&lt;/code&gt; ? And why we are pushing &lt;code&gt;rbx&lt;/code&gt; on stack?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rbx&lt;/code&gt; is a callee-saved register. If the callee function want to use &lt;code&gt;rbx&lt;/code&gt;, it has to preserve the state of &lt;code&gt;rbx&lt;/code&gt; and return &lt;code&gt;rbx&lt;/code&gt; in the same state to the caller function. That&amp;rsquo;s why it is pushed on stack.&lt;/li&gt;
&lt;li&gt;We are using it to preserve the state of &lt;code&gt;rsp&lt;/code&gt; after reserving 40 bytes. Later it used in cleanup.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Q2. Why inconsistent use of registers? When you need sign-extended value, why you are using &lt;code&gt;eax&lt;/code&gt;? just use &lt;code&gt;rax&lt;/code&gt; directly?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compiler optimization.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Q3. How stack is cleaned up after usage?&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It doesn&amp;rsquo;t. There are millions of processes and they use it very fast and dump it. And the next process overwrites the stack memory.&lt;/li&gt;
&lt;li&gt;Just reduce &lt;code&gt;rsp&lt;/code&gt; and you are done. We just have to make memory inaccessible. That&amp;rsquo;s it.&lt;/li&gt;
&lt;li&gt;This is the reason why we sometimes get exactly what we expect but the next moment it vanishes because the stack memory mistakenly had that exact value from a previous process but soon someone else override it. An undefined behavior, basically.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Static &amp;amp;&amp;amp; Extern VLA&lt;span class="hx:absolute hx:-mt-20" id="static--extern-vla"&gt;&lt;/span&gt;
&lt;a href="#static--extern-vla" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Both are possible but require &lt;strong&gt;compile-time constant declaration&lt;/strong&gt;. Because storage with static duration must be determined fully at compile time as memory layout is fixed before runtime.&lt;/p&gt;
&lt;p&gt;Simply put,&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Outisde Functions
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr1[n];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr2[n];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;func&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr3[m];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;all of these are invalid.&lt;/p&gt;
&lt;p&gt;The valid ones are these:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Outisde Functions
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; n &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr1[n];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr2[n];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;func&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; m &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;static&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr3[m];
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Array Decay&lt;span class="hx:absolute hx:-mt-20" id="array-decay"&gt;&lt;/span&gt;
&lt;a href="#array-decay" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;em&gt;Also know as array-to-pointer decay, is an automatic internal process that converts the array into a pointer to its first element. This conversion leads to the loss of array&amp;rsquo;s original size and dimension information.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is essential for passing arrays to a function.&lt;/li&gt;
&lt;li&gt;Not just arrays but other complex types like structures and unions also decay into pointers when passed to function as an argument.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;Take this example:&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-c" data-lang="c"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include&lt;/span&gt; &lt;span style="color:#75715e"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span style="color:#75715e"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;takeArray&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr[]){}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;takeArrayPtr&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt; arr){}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;(){
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; arr[] &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#ae81ff"&gt;41&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;23&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;94&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;55&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;takeArray&lt;/span&gt;(arr);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is the assembly for both the functions.&lt;/p&gt;
&lt;div class="hextra-code-block hx:relative hx:mt-6 hx:first:mt-0 hx:group/code"&gt;
&lt;div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-nasm" data-lang="nasm"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;takeArray:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp], rdi
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;nop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pop&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;takeArrayPtr:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;QWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp], rdi
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;nop&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pop&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;main:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;push&lt;/span&gt; rbp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rbp, rsp
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sub&lt;/span&gt; rsp, &lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;41&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;12&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;23&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;94&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DWORD&lt;/span&gt; PTR &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;[rbp], &lt;span style="color:#ae81ff"&gt;55&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;lea&lt;/span&gt; rax, &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;16&lt;/span&gt;[rbp]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; rdi, rax
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;call&lt;/span&gt; takeArray
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mov&lt;/span&gt; eax, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;leave&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ret&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="hextra-code-copy-btn-container hx:opacity-0 hx:transition hx:group-hover/code:opacity-100 hx:flex hx:gap-1 hx:absolute hx:m-[11px] hx:right-0 hx:top-0"&gt;
&lt;button
class="hextra-code-copy-btn hx:group/copybtn hx:cursor-pointer hx:transition-all hx:active:opacity-50 hx:bg-primary-700/5 hx:border hx:border-black/5 hx:text-gray-600 hx:hover:text-gray-900 hx:rounded-md hx:p-1.5 hx:dark:bg-primary-300/10 hx:dark:border-white/10 hx:dark:text-gray-400 hx:dark:hover:text-gray-50"
title="Copy code"
&gt;
&lt;div class="hextra-copy-icon hx:group-[.copied]/copybtn:hidden hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;div class="hextra-success-icon hx:hidden hx:group-[.copied]/copybtn:block hx:pointer-events-none hx:h-4 hx:w-4"&gt;&lt;/div&gt;
&lt;/button&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There is no difference.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;span class="hx:absolute hx:-mt-20" id="conclusion"&gt;&lt;/span&gt;
&lt;a href="#conclusion" class="subheading-anchor" aria-label="Permalink for this section"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Arrays are contiguous memory blocks.&lt;/p&gt;
&lt;p&gt;What changes is &lt;strong&gt;how&lt;/strong&gt; the compiler allocates, aligns, and initializes them — influenced by constants, optimization flags, and ABI rules.&lt;/p&gt;
&lt;p&gt;Optimizations vary, but the core intent stays constant: manage memory predictably and efficiently.&lt;/p&gt;
&lt;p&gt;Thank you.&lt;/p&gt;</description></item></channel></rss>